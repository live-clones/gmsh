#line 1 "Gmsh.yy.cpp"

#line 3 "Gmsh.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer gmsh_yy_create_buffer
#define yy_delete_buffer gmsh_yy_delete_buffer
#define yy_scan_buffer gmsh_yy_scan_buffer
#define yy_scan_string gmsh_yy_scan_string
#define yy_scan_bytes gmsh_yy_scan_bytes
#define yy_init_buffer gmsh_yy_init_buffer
#define yy_flush_buffer gmsh_yy_flush_buffer
#define yy_load_buffer_state gmsh_yy_load_buffer_state
#define yy_switch_to_buffer gmsh_yy_switch_to_buffer
#define yypush_buffer_state gmsh_yypush_buffer_state
#define yypop_buffer_state gmsh_yypop_buffer_state
#define yyensure_buffer_stack gmsh_yyensure_buffer_stack
#define yy_flex_debug gmsh_yy_flex_debug
#define yyin gmsh_yyin
#define yyleng gmsh_yyleng
#define yylex gmsh_yylex
#define yylineno gmsh_yylineno
#define yyout gmsh_yyout
#define yyrestart gmsh_yyrestart
#define yytext gmsh_yytext
#define yywrap gmsh_yywrap
#define yyalloc gmsh_yyalloc
#define yyrealloc gmsh_yyrealloc
#define yyfree gmsh_yyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define gmsh_yy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer gmsh_yy_create_buffer
#endif

#ifdef yy_delete_buffer
#define gmsh_yy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer gmsh_yy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define gmsh_yy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer gmsh_yy_scan_buffer
#endif

#ifdef yy_scan_string
#define gmsh_yy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string gmsh_yy_scan_string
#endif

#ifdef yy_scan_bytes
#define gmsh_yy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes gmsh_yy_scan_bytes
#endif

#ifdef yy_init_buffer
#define gmsh_yy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer gmsh_yy_init_buffer
#endif

#ifdef yy_flush_buffer
#define gmsh_yy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer gmsh_yy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define gmsh_yy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state gmsh_yy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define gmsh_yy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer gmsh_yy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define gmsh_yypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state gmsh_yypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define gmsh_yypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state gmsh_yypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define gmsh_yyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack gmsh_yyensure_buffer_stack
#endif

#ifdef yylex
#define gmsh_yylex_ALREADY_DEFINED
#else
#define yylex gmsh_yylex
#endif

#ifdef yyrestart
#define gmsh_yyrestart_ALREADY_DEFINED
#else
#define yyrestart gmsh_yyrestart
#endif

#ifdef yylex_init
#define gmsh_yylex_init_ALREADY_DEFINED
#else
#define yylex_init gmsh_yylex_init
#endif

#ifdef yylex_init_extra
#define gmsh_yylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra gmsh_yylex_init_extra
#endif

#ifdef yylex_destroy
#define gmsh_yylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy gmsh_yylex_destroy
#endif

#ifdef yyget_debug
#define gmsh_yyget_debug_ALREADY_DEFINED
#else
#define yyget_debug gmsh_yyget_debug
#endif

#ifdef yyset_debug
#define gmsh_yyset_debug_ALREADY_DEFINED
#else
#define yyset_debug gmsh_yyset_debug
#endif

#ifdef yyget_extra
#define gmsh_yyget_extra_ALREADY_DEFINED
#else
#define yyget_extra gmsh_yyget_extra
#endif

#ifdef yyset_extra
#define gmsh_yyset_extra_ALREADY_DEFINED
#else
#define yyset_extra gmsh_yyset_extra
#endif

#ifdef yyget_in
#define gmsh_yyget_in_ALREADY_DEFINED
#else
#define yyget_in gmsh_yyget_in
#endif

#ifdef yyset_in
#define gmsh_yyset_in_ALREADY_DEFINED
#else
#define yyset_in gmsh_yyset_in
#endif

#ifdef yyget_out
#define gmsh_yyget_out_ALREADY_DEFINED
#else
#define yyget_out gmsh_yyget_out
#endif

#ifdef yyset_out
#define gmsh_yyset_out_ALREADY_DEFINED
#else
#define yyset_out gmsh_yyset_out
#endif

#ifdef yyget_leng
#define gmsh_yyget_leng_ALREADY_DEFINED
#else
#define yyget_leng gmsh_yyget_leng
#endif

#ifdef yyget_text
#define gmsh_yyget_text_ALREADY_DEFINED
#else
#define yyget_text gmsh_yyget_text
#endif

#ifdef yyget_lineno
#define gmsh_yyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno gmsh_yyget_lineno
#endif

#ifdef yyset_lineno
#define gmsh_yyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno gmsh_yyset_lineno
#endif

#ifdef yywrap
#define gmsh_yywrap_ALREADY_DEFINED
#else
#define yywrap gmsh_yywrap
#endif

#ifdef yyalloc
#define gmsh_yyalloc_ALREADY_DEFINED
#else
#define yyalloc gmsh_yyalloc
#endif

#ifdef yyrealloc
#define gmsh_yyrealloc_ALREADY_DEFINED
#else
#define yyrealloc gmsh_yyrealloc
#endif

#ifdef yyfree
#define gmsh_yyfree_ALREADY_DEFINED
#else
#define yyfree gmsh_yyfree
#endif

#ifdef yytext
#define gmsh_yytext_ALREADY_DEFINED
#else
#define yytext gmsh_yytext
#endif

#ifdef yyleng
#define gmsh_yyleng_ALREADY_DEFINED
#else
#define yyleng gmsh_yyleng
#endif

#ifdef yyin
#define gmsh_yyin_ALREADY_DEFINED
#else
#define yyin gmsh_yyin
#endif

#ifdef yyout
#define gmsh_yyout_ALREADY_DEFINED
#else
#define yyout gmsh_yyout
#endif

#ifdef yy_flex_debug
#define gmsh_yy_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug gmsh_yy_flex_debug
#endif

#ifdef yylineno
#define gmsh_yylineno_ALREADY_DEFINED
#else
#define yylineno gmsh_yylineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 283
#define YY_END_OF_BUFFER 284
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1472] =
    {   0,
        0,    0,  284,  282,    1,    1,  282,    5,  282,    6,
      282,  282,  282,  282,  282,  277,   22,    2,  282,   17,
      282,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  282,   30,   26,   20,   27,
       18,   28,   19,    0,  279,    3,    4,   21,  278,  277,
        0,   24,   34,   31,   29,   32,   33,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,

      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  148,  149,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  189,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  252,  253,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,   25,   23,    0,  278,    0,    0,  280,  281,
       36,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,   54,  281,  281,  281,  281,

      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,   86,   88,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      118,  281,  281,  281,  281,  281,  281,  281,  281,  128,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  159,  281,
      281,  281,  281,  281,  169,  281,  281,  174,  281,  176,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  215,  281,  281,  281,

      281,  281,  227,  281,  281,  281,  281,  281,  281,  281,
      237,  281,  281,  281,  281,  255,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,    0,  279,    0,    0,  278,  281,
      281,   38,  281,  281,  281,  281,  281,  281,  281,   48,
       49,  281,  281,  281,  281,  281,  281,   66,  281,  281,
       69,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,   83,  281,  281,   87,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  104,  105,  281,
      110,  281,  281,  281,  281,  281,  117,  281,  120,  281,

      281,  281,  124,  281,  281,  127,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  143,  144,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  156,  157,  281,
      281,  281,  281,  281,  167,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  198,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  226,  228,
      281,  281,  281,  281,  281,  235,  236,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  254,  256,

      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  276,   10,   16,    9,
        8,  281,   13,   15,    0,  278,   35,  281,  281,  281,
       41,  281,  281,  281,  281,   50,  281,   52,  281,   55,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,   79,  281,  281,  281,  281,  281,  281,
       94,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  113,  114,  281,  281,  281,  121,  281,  281,  281,
      126,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  146,  281,  281,  151,  281,  281,  281,  281,

      281,  160,  281,  281,  281,  281,  166,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  181,  281,  184,  281,
      281,  281,  281,  190,  281,  192,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      213,  214,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  229,  281,  281,  281,  233,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  261,  262,  281,  281,  281,
      281,  281,  281,  272,  281,  281,  275,   12,   11,  281,
       14,  281,  281,   40,  281,   44,   43,   45,   46,  281,

       53,  281,  281,  281,  281,  281,  281,  281,   73,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  100,  101,  281,  281,  281,  281,
      111,  112,  281,  116,  281,  281,  123,  281,  281,  281,
      281,  281,  134,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  152,  153,  281,  281,  281,  281,  281,  281,
      281,  281,  170,  281,  281,  175,  281,  281,  281,  180,
      281,  281,  186,  281,  281,  191,  281,  194,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  209,  281,  212,
      281,  281,  281,  281,  281,  281,  281,  219,  224,  281,

      281,  231,  232,  281,  238,  281,  240,  281,  242,  281,
      281,  281,  246,  281,  248,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  269,  281,  281,  273,
      281,    7,  281,  281,  281,   47,   51,  281,  281,  281,
      281,  281,   71,  281,  281,   75,  281,  281,  281,  281,
       81,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  103,  106,  281,  281,  281,  281,  119,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,

      281,  281,  281,  281,  281,  281,  195,  281,  281,  281,
      281,  281,  281,  281,  281,  211,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  234,  281,  241,  281,  281,
      281,  281,  249,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  274,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,   67,  281,
      281,  281,  281,   76,  281,  281,  281,   82,  281,  281,
      281,  281,  281,  281,   95,  281,  281,  281,  281,  281,
      107,  281,  109,  281,  281,  281,  129,  281,  281,  281,
      281,  281,  281,  281,  140,  281,  281,  145,  281,  281,

      154,  155,  281,  161,  281,  164,  165,  281,  281,  172,
      281,  281,  179,  281,  281,  281,  187,  188,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  230,  281,
      281,  281,  281,  281,  250,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,   39,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,   77,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  108,  115,
      281,  281,  281,  281,  281,  133,  135,  137,  138,  281,

      281,  281,  150,  281,  162,  281,  281,  281,  281,  281,
      281,  183,  281,  281,  281,  281,  281,  200,  201,  202,
      281,  281,  281,  281,  281,  281,  281,  281,  220,  221,
      281,  223,  281,  239,  243,  281,  281,  281,  251,  257,
      281,  281,  281,  281,  281,  281,  281,  267,  281,  281,
      271,  281,  281,  281,  281,   58,  281,  281,  281,  281,
      281,  281,  281,   68,  281,  281,  281,   78,   80,  281,
      281,  281,  281,   91,  281,  281,  281,  281,  281,  281,
      122,  281,  281,  281,  281,  281,  281,  281,  142,  281,
      281,  281,  281,  281,  281,  177,  281,  281,  185,  281,

      281,  281,  281,  281,  204,  281,  281,  281,  281,  281,
      217,  218,  281,  281,  281,  245,  281,  281,  259,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,   61,  281,  281,  281,   65,  281,  281,  281,
       84,   85,  281,  281,  281,  281,  281,  281,  281,   99,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      163,  281,  281,  281,  281,  281,  193,  281,  281,  281,
      281,  281,  281,  281,  210,  281,  281,  281,  244,  281,
      281,  281,  263,  281,  266,  281,  281,  281,   37,  281,
      281,  281,  281,  281,  281,  281,   64,   70,  281,  281,

      281,  281,  281,  281,  281,   97,   98,  102,  281,  281,
      281,  281,  136,  281,  281,  281,  158,  281,  281,  281,
      178,  182,  281,  281,  281,  281,  205,  281,  206,  281,
      222,  281,  247,  281,  260,  281,  281,  281,  281,  281,
      281,   57,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  171,  281,  281,  281,  281,  203,  281,  281,  281,
      225,  281,  265,  264,  281,  270,  281,  281,  281,  281,
      281,   63,   72,  281,   89,   90,  281,  281,   96,  281,
      281,  281,  281,  139,  281,  281,  281,  281,  281,  281,

      199,  281,  281,  216,  258,  281,  281,  281,  281,  281,
      281,  281,  281,   93,  125,  281,  281,  281,  281,  281,
      168,  281,  196,  281,  281,  281,  281,   42,   56,  281,
       60,  281,   74,   92,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  268,   59,  281,  281,  281,  281,  281,
      281,  281,  197,  281,  207,  281,  130,  131,  132,  141,
      281,  281,  281,   62,  281,  281,  281,  147,  173,  208,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    6,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   46,   46,
        1,    1,    1,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   46,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,   73,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[74] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1
    } ;

static const flex_int16_t yy_base[1473] =
    {   0,
        0,    0, 1601, 1602, 1602, 1602, 1579, 1602, 1593, 1602,
     1577,   65,   66,   64,   76,   78, 1579, 1602,   62, 1575,
       77,   51,   62,   70,   55,   69,   87,  103,   88,  111,
        0, 1535,  104,  120,  127,   46,  122, 1527,  137,  190,
      151,  130, 1532,  105, 1540, 1518, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1579,  203, 1602, 1602, 1602,  208,  251,
      260, 1602, 1602, 1602, 1602, 1602, 1602,    0,   47, 1528,
     1540, 1534, 1530, 1523, 1534, 1527, 1534, 1519,   24, 1519,
      126,  142,  113, 1531, 1514,  102,  228, 1510, 1524, 1511,
     1516,  156,  168, 1525,  126, 1521, 1507, 1520,  145, 1520,

      239, 1507, 1506, 1502, 1505, 1523,  136, 1498, 1514, 1510,
      170, 1498, 1517,    0, 1492, 1496, 1485,  171,  176,  189,
     1524,  230,  179, 1494, 1502, 1511, 1492, 1481, 1485, 1484,
     1495, 1495, 1481, 1480, 1472,    0,  215,  236, 1486, 1493,
     1480,  252,  184, 1481, 1502, 1489,   55,  186, 1476, 1479,
     1473,  243, 1469,  207, 1468,  225,    0,    0, 1496, 1470,
      241,  252,  253, 1481,  270, 1466, 1471, 1468, 1461, 1473,
     1459, 1453, 1602, 1602,  314,  323,  332,  338,  343, 1457,
     1459, 1454, 1456, 1461, 1468, 1463,  336, 1454, 1453, 1454,
     1445, 1454, 1459, 1450, 1447,    0, 1448,  263, 1447, 1438,

      303, 1453, 1437, 1436, 1448,  220, 1438,  314, 1446, 1433,
     1425, 1440,    0, 1446,  300, 1437, 1436, 1439, 1438, 1441,
     1452, 1451, 1429, 1416, 1428, 1431,  338, 1421, 1423,  267,
        0, 1416, 1414, 1420,  313, 1426, 1436, 1414, 1423,    0,
     1423, 1442, 1444,  345, 1415, 1411, 1416, 1415, 1405, 1404,
     1437, 1411, 1396, 1409, 1406, 1407,  273, 1392,  329, 1405,
     1409, 1391, 1389, 1389,    0, 1391, 1396,    0, 1383,    0,
     1397, 1413, 1388, 1397, 1387, 1392,  331, 1387, 1377, 1381,
     1386, 1379, 1390, 1377, 1385, 1384,  321, 1378, 1372, 1365,
     1367, 1363, 1377, 1380, 1367, 1374,    0, 1367,  365, 1368,

     1361, 1353, 1366, 1369, 1358, 1366, 1361, 1360, 1349, 1352,
      370, 1360, 1353, 1361, 1383, 1354, 1342, 1341, 1356, 1338,
     1356, 1336, 1354, 1341, 1348, 1336, 1336, 1345, 1336, 1328,
     1334, 1339, 1340,  359,  415,  425,  434,  439,  444, 1325,
     1332,    0, 1323, 1328, 1322, 1326, 1324, 1328, 1335,    0,
     1367, 1325, 1324, 1327, 1321, 1325, 1325,    0, 1315, 1307,
        0, 1321, 1319, 1323, 1312, 1304, 1316, 1331, 1302, 1306,
     1300, 1307, 1301,    0, 1310, 1323,    0, 1293, 1306, 1305,
     1296, 1295, 1294, 1287, 1286, 1303, 1302,    0,    0, 1287,
     1317, 1286, 1293, 1281, 1288, 1277,    0, 1275,    0, 1290,

     1313, 1287,    0, 1286, 1273,    0, 1270, 1288, 1274, 1273,
     1271, 1264, 1264, 1281, 1301, 1286,    0,    0, 1268, 1259,
     1284, 1259, 1257, 1257, 1254, 1261, 1256,    0, 1289, 1303,
     1253, 1250,  344, 1252,    0, 1256, 1247,  351, 1252,  355,
     1248, 1260, 1242, 1258, 1241, 1245, 1243, 1241, 1245, 1248,
     1243, 1232, 1233, 1230,  349,    0, 1236, 1246, 1229, 1232,
     1241, 1231, 1233, 1224, 1223, 1220, 1234, 1233, 1231, 1227,
     1233, 1232, 1212, 1230, 1211, 1228, 1215, 1222,    0,    0,
     1221, 1206, 1207,  339, 1210,    0,    0,  414, 1213, 1216,
     1203, 1214, 1198, 1204, 1213, 1214, 1209, 1225,    0,    0,

     1225, 1235, 1200, 1215, 1184, 1189, 1195, 1187, 1198, 1183,
     1191, 1184, 1193, 1187, 1189, 1192,    0, 1185,    0, 1184,
        0, 1189, 1182,    0,  450,  461,    0, 1172, 1203, 1185,
     1191, 1184, 1169, 1173, 1172,    0, 1171,    0, 1166,    0,
     1181, 1172, 1179, 1168, 1161, 1172, 1173, 1170, 1165, 1155,
     1171, 1166, 1156, 1174, 1155, 1147, 1157, 1150, 1159, 1150,
        0, 1158, 1156, 1155, 1154, 1153, 1145, 1144,  353, 1149,
     1137,    0,    0, 1149, 1134, 1147,    0, 1127, 1130, 1137,
        0, 1138,  387, 1127, 1124, 1127, 1131, 1125, 1130, 1117,
     1131, 1124,    0, 1146, 1118,    0, 1117, 1126, 1115, 1131,

     1114,    0, 1129, 1151, 1127, 1118,    0, 1103, 1101, 1113,
     1114, 1108, 1102, 1106, 1115, 1107,    0, 1115,    0, 1111,
     1096, 1110, 1110,    0, 1099,    0, 1117, 1104, 1092, 1099,
     1105, 1093, 1087, 1099, 1102, 1100, 1096, 1087, 1081, 1093,
        0,    0, 1110, 1095, 1092, 1071, 1081, 1075, 1074, 1083,
     1082, 1107,    0, 1079, 1081, 1080,    0, 1065, 1064, 1068,
     1066, 1067, 1066, 1073,  358, 1075, 1069, 1056, 1071, 1054,
     1058, 1066, 1051, 1075, 1063,    0,    0, 1079,  426, 1057,
     1060, 1055, 1085,    0, 1057, 1048,    0,    0,    0, 1053,
        0, 1040, 1053,    0, 1048,    0,    0,    0, 1088,   33,

        0,   91,  153,  173,  196,  297,  280,  314,    0,  341,
      336,  355,  373,  376,  387,  384,  385,  386,  402,  441,
      405,  420,  455,  417,    0,    0,  430,  433,  434,  431,
        0,    0,  432,    0,  437,  436,    0,  445,  433,  474,
      475,  443,    0,  450,  452,  446,  436,  452,  458,  453,
      471,  457,    0,    0,  458,  461,  451,  463,  466,  455,
      444,  480,    0,  464,  447,    0,  456,  480,  470,    0,
      500,  458,    0,  469,  478,    0,  465,    0,  472,  479,
      496,  477,  476,  498,  468,  483,  476,    0,  485,    0,
      490,  479,  475,  500,  494,  478,  489,    0,    0,  482,

      495,    0,    0,  495,    0,  493,    0,  499,    0,  498,
      505,  497,    0,  514,    0,  505,  494,  508,  492,  495,
      501,  513,  512,  526,  518,  507,    0,  502,  521,    0,
      516,    0,  519,  507,  507,    0,    0,  549,  522,  507,
      539,  528,    0,  531,  513,    0,  533,  536,  527,  542,
        0,  542,  546,  539,  544,  536,  572,  535,  540,  535,
      537,  556,  564,    0,    0,  541,  551,  558,  561,    0,
      545,  545,  552,  581,  578,  573,  550,  565,  566,  559,
      568,  571,  560,  552,  590,  575,  560,  575,  569,  577,
      565,  574,  580,  580,  573,  583,  569,  571,  580,  589,

      573,  577,  592,  585,  589,  622,    0,  598,  587,  590,
      581,  598,  599,  588,  587,  619,  590,  602,  596,  611,
      608,  605,  602,  602,  600,    0,  615,    0,  610,  601,
      620,  608,    0,  600,  620,  621,  610,  617,  610,  618,
      611,  619,  616,  615,  631,  639,  620,    0,  648,  632,
      633,  628,  634,  627,  632,  641,  636,  673,    0,  637,
      664,  636,  660,    0,  650,  649,  646,    0,  639,  645,
      646,  646,  653,  654,    0,  651,  653,  649,  648,  653,
        0,  665,    0,  657,  652,  663,    0,  683,  684,  697,
      652,  673,  661,  672,    0,  660,  676,    0,  706,  664,

        0,    0,  703,    0,  680,    0,    0,  702,  670,  707,
      686,  673,    0,  672,  679,  684,    0,    0,  689,  691,
      682,  678,  693,  694,  695,  683,  714,  715,  716,  700,
      687,  702,  691,  702,  693,  692,  705,  701,    0,  709,
      692,  707,  714,  729,    0,  708,  709,  712,  713,  714,
      710,  724,  717,  715,  723,  751,  721,  726,  731,    0,
      743,  726,  716,  730,  736,  721,  721,  738,  733,  729,
      732,  744,  737,  727,    0,  724,  744,  745,  738,  740,
      739,  737,  744,  738,  755,  749,  754,  759,    0,    0,
      743,  741,  770,  771,  782,    0,  772,    0,  770,  749,

      751,  775,    0,  762,  788,  760,  765,  758,  757,  768,
      769,    0,  776,  763,  777,  793,  778,  796,    0,    0,
      777,  781,  782,  783,  771,  803,  787,  768,    0,    0,
      784,    0,  813,    0,    0,  774,  791,  796,    0,    0,
      796,  795,  786,  784,  798,  784,  816,    0,  791,  794,
        0,  789,  794,  805,  799,    0,  806,  806,  809,  810,
      797,  803,  795,    0,  801,  802,  804,    0,    0,  804,
      805,  819,  814,  821,  822,  809,  824,  817,  827,  829,
        0,  828,  834,  835,  836,  818,  837,  838,    0,  856,
      830,  829,  838,  825,  831,    0,  833,  833,    0,  843,

      852,  845,  834,  847,    0,  835,  836,  837,  848,  856,
        0,    0,  844,  850,  855,    0,  849,  842,    0,  850,
      840,  870,  861,  862,  855,  865,  862,  852,  855,  860,
      870,  864,    0,  860,  869,  866,    0,  862,  862,  876,
        0,    0,  864,  870,  882,  897,  886,  871,  883,    0,
      886,  901,  896,  897,  898,  879,  886,  896,  909,  895,
        0,  884,  894,  891,  897,  892,    0,  901,  885,  907,
      891,  902,  903,  904,    0,  889,  901,  904,    0,  911,
      898,  900,    0,  902,    0,  902,  903,  908,    0,  914,
      919,  912,  909,  922,  910,  915,    0,    0,  921,  930,

      915,  926,  915,  934,  923,    0,    0,    0,  936,  958,
      959,  960,    0,  921,  931,  954,    0,  925,  933,  969,
        0,    0,  930,  951,  938,  942,    0,  971,    0,  947,
        0,  948,    0,  949,    0,  946,  948,  938,  936,  945,
      948,    0,  957,  950,  959,  952,  963,  964,  944,  945,
      956,  959,  954,  955,  982,  983,  984,  973,  974,  980,
      972,    0,  968,  964,  979,  967,    0,  975,  973,  971,
        0,  971,    0,    0,  989,    0,  978,  989,  980,  975,
      992,    0,    0,  991,    0,    0,  980,  993,    0,  991,
     1006, 1007, 1008,    0, 1014, 1010, 1004,  986,  989,  991,

        0, 1004, 1006,    0,    0,  998,  994, 1008, 1011,  997,
      997,  999,  994,    0,    0, 1035, 1036, 1037, 1021, 1045,
        0, 1011,    0, 1006, 1014, 1022, 1009,    0,    0, 1024,
        0, 1021,    0,    0, 1041, 1042, 1043, 1022, 1052, 1032,
     1019, 1033, 1021,    0,    0, 1026, 1052, 1053, 1054, 1039,
     1065, 1045,    0, 1034,    0, 1035,    0,    0,    0,    0,
     1061, 1033, 1032,    0, 1072, 1029, 1036,    0,    0,    0,
     1602, 1100
    } ;

static const flex_int16_t yy_def[1473] =
    {   0,
     1471,    1, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1471, 1471, 1471, 1471, 1471, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1471, 1471, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
        0, 1471
    } ;

static const flex_int16_t yy_nxt[1676] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   16,   16,   16,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   45,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   46,   50,   54,   52,   55,   55,   55,   55,
       55,   63,   64,   56,  837,   51,   53,   57,   59,  191,
       60,   60,   60,   60,   60,  192,   58,   66,   67,   69,

       70,   71,   78,   72,   61,  131,   92,  180,   73,  132,
       93,  181,   74,   79,   75,   76,   77,   82,   94,   80,
      299,   83,   81,  300,   84,   85,   95,   86,   96,   61,
       87,   88,   97,   89,  100,   98,   90,  106,   99,  109,
       91,  126,  101,  110,  102,  103,  113,  104,  111,  203,
      838,  117,  169,  105,  107,  118,  170,  121,  112,  119,
      171,  108,  204,  114,  120,  157,  158,  122,  199,  133,
      115,  123,  200,  134,  127,  124,  135,  136,  128,  137,
      125,  159,  138,  225,  141,  139,  194,  129,  142,  165,
      226,  166,  195,  130,  167,  196,  243,  143,  160,  197,

      230,  244,  161,  144,  145,  162,  231,  198,  217,  218,
      232,  163,  839,  219,  164,   55,   55,   55,   55,   55,
      176,  176,  176,  176,  176,  220,  221,  248,  249,  175,
      255,  222,  223,  301,  177,  257,  840,  266,  256,  146,
      258,  147,  259,  267,  148,  149,  302,  150,  151,  294,
      295,  152,  153,  841,  175,  154,  155,  260,  310,  177,
      156,   59,  280,   60,   60,   60,   60,   60,  178,  178,
      311,  369,  179,  179,  179,  179,  179,   61,  205,  262,
      370,  281,  206,  313,  314,  207,  208,  209,  210,  211,
      234,  282,  212,  283,  263,  264,  235,  306,  236,  265,

      307,  287,   61,  321,  288,  317,  308,  319,  237,  289,
      318,  290,  291,  427,  359,  320,  322,  292,  323,  293,
      325,  360,  335,  335,  428,  326,  336,  336,  336,  336,
      336,  396,  397,  842,  327,  176,  176,  176,  176,  176,
      338,  338,  430,  843,  339,  339,  339,  339,  339,  337,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      347,  363,  372,  379,  401,  392,  364,  380,  393,  431,
      402,  410,  411,  610,  337,  373,  348,  349,  446,  844,
      412,  457,  447,  605,  606,  413,  458,  459,  414,  470,
      629,  611,  471,  845,  488,  613,  614,  489,  656,  472,

      473,  846,  474,  490,  657,  475,  476,  491,  518,  492,
      493,  519,  630,  847,  629,  811,  520,  729,  730,  812,
      521,  740,  522,  523,  741,  494,  524,  336,  336,  336,
      336,  336,  848,  849,  850,  851,  495,  336,  336,  336,
      336,  336,  525,  525,  852,  853,  526,  526,  526,  526,
      526,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  659,  526,  526,  526,  526,  526,  854,  660,  855,
      857,  858,  661,  526,  526,  526,  526,  526,  824,  859,
      862,  863,  856,  825,  864,  865,  868,  869,  870,  866,
      860,  871,  872,  873,  867,  861,  874,  876,  877,  878,

      879,  880,  881,  882,  875,  883,  884,  885,  886,  887,
      888,  889,  890,  891,  892,  893,  894,  895,  896,  897,
      898,  899,  900,  902,  903,  904,  905,  906,  907,  908,
      910,  911,  912,  913,  914,  915,  916,  917,  918,  901,
      919,  920,  921,  922,  923,  924,  925,  926,  927,  928,
      929,  909,  930,  908,  931,  932,  933,  934,  935,  936,
      937,  938,  939,  940,  941,  944,  945,  946,  947,  948,
      949,  950,  951,  952,  953,  958,  954,  959,  960,  955,
      961,  942,  962,  963,  964,  965,  943,  966,  941,  956,
      967,  957,  968,  969,  970,  971,  972,  973,  975,  974,

      976,  977,  978,  979,  980,  981,  982,  983,  984,  985,
      986,  987,  988,  989,  990,  991,  992,  993,  994,  995,
      996,  997,  998,  999, 1000, 1001, 1002, 1003, 1004, 1005,
     1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
     1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026,
     1027, 1028, 1029, 1030, 1031, 1032, 1033, 1021, 1034, 1035,
     1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1020,
     1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
     1055, 1021, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064,
     1065, 1067, 1068, 1066, 1063, 1069, 1070, 1071, 1072, 1073,

     1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
     1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
     1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
     1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
     1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
     1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
     1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
     1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
     1154, 1156, 1157, 1158, 1155, 1159, 1160, 1161, 1162, 1163,
     1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173,

     1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
     1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193,
     1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203,
     1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213,
     1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223,
     1224, 1225, 1202, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
     1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
     1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
     1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
     1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,

     1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
     1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1268,
     1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
     1302, 1303, 1304, 1305, 1306, 1284, 1307, 1308, 1309, 1310,
     1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,
     1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
     1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
     1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
     1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
     1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1370, 1371,

     1372, 1373, 1374, 1375, 1376, 1377, 1369, 1378, 1379, 1380,
     1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1365, 1389,
     1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
     1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
     1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
     1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
     1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
     1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
     1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
     1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,

     1470,   68,  836,  835,  834,  833,  832,  831,  830,  829,
      828,  827,  826,  823,  822,  821,  820,  819,  818,  817,
      816,  815,  814,  813,  810,  809,  808,  807,  806,  805,
      804,  803,  802,  801,  800,  799,  798,  797,  796,  795,
      794,  793,  792,  791,  790,  789,  788,  787,  786,  785,
      784,  783,  782,  781,  780,  779,  778,  777,  776,  775,
      774,  773,  772,  771,  770,  769,  768,  767,  766,  765,
      764,  763,  762,  761,  760,  759,  758,  757,  756,  755,
      754,  753,  752,  751,  750,  749,  748,  747,  746,  745,
      744,  743,  742,  739,  738,  737,  736,  735,  734,  733,

      732,  731,  728,  727,  726,  725,  724,  723,  722,  721,
      720,  719,  718,  717,  716,  715,  714,  713,  712,  711,
      710,  709,  708,  707,  706,  705,  704,  703,  702,  701,
      700,  699,  698,  697,  696,  695,  694,  693,  692,  691,
      690,  689,  688,  687,  686,  685,  684,  683,  682,  681,
      680,  679,  678,  677,  676,  675,  674,  673,  672,  671,
      670,  669,  668,  667,  666,  665,  664,  663,  662,  658,
      655,  654,  653,  652,  651,  650,  649,  648,  647,  646,
      645,  644,  643,  642,  641,  640,  639,  638,  637,  636,
      635,  634,  633,  632,  631,  628,  627,  626,  625,  624,

      623,  622,  621,  620,  619,  618,  617,  616,  615,  612,
      609,  608,  607,  604,  603,  602,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  592,  591,  590,  589,  588,
      587,  586,  585,  584,  583,  582,  581,  580,  579,  578,
      577,  576,  575,  574,  573,  572,  571,  570,  569,  568,
      567,  566,  565,  564,  563,  562,  561,  560,  559,  558,
      557,  556,  555,  554,  553,  552,  551,  550,  549,  548,
      547,  546,  545,  544,  543,  542,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  517,  516,  515,  514,  513,  512,  511,  510,  509,

      508,  507,  506,  505,  504,  503,  502,  501,  500,  499,
      498,  497,  496,  487,  486,  485,  484,  483,  482,  481,
      480,  479,  478,  477,  469,  468,  467,  466,  465,  464,
      463,  462,  461,  460,  456,  455,  454,  453,  452,  451,
      450,  449,  448,  445,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  429,  426,  425,
      424,  423,  422,  421,  420,  419,  418,  417,  416,  415,
      409,  408,  407,  406,  405,  404,  403,  400,  399,  398,
      395,  394,  391,  390,  389,  388,  387,  386,  385,  384,
      383,  382,  381,  378,  377,  376,  375,  374,  371,  368,

      367,  366,  365,  362,  361,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  346,  345,  344,  343,  342,  341,
      340,  334,  333,  332,  331,  330,  329,  328,  324,  316,
      315,  312,  309,  305,  304,  303,  298,  297,  296,  286,
      285,  284,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  261,  254,  253,  252,  251,  250,
      247,  246,  245,  242,  241,  240,  239,  238,  233,  229,
      228,  227,  224,  216,  215,  214,  213,  202,  201,  193,
      190,  189,  188,  187,  186,  185,  184,  183,  182,  174,
      173,  172,  168,  140,  116,   65,   62,   49,   48,   47,

     1471,    3, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471
    } ;

static const flex_int16_t yy_chk[1676] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   12,   14,   13,   14,   14,   14,   14,
       14,   19,   19,   15,  700,   12,   13,   15,   16,   79,
       16,   16,   16,   16,   16,   79,   15,   21,   21,   22,

       22,   22,   23,   22,   16,   36,   25,   69,   22,   36,
       25,   69,   22,   23,   22,   22,   22,   24,   25,   23,
      147,   24,   23,  147,   24,   24,   26,   24,   26,   16,
       24,   24,   26,   24,   27,   26,   24,   28,   26,   29,
       24,   35,   27,   29,   27,   27,   30,   27,   29,   86,
      702,   33,   44,   27,   28,   33,   44,   34,   29,   33,
       44,   28,   86,   30,   33,   41,   41,   34,   83,   37,
       30,   34,   83,   37,   35,   34,   37,   37,   35,   37,
       34,   41,   37,   95,   39,   37,   81,   35,   39,   42,
       95,   42,   81,   35,   42,   81,  107,   39,   41,   82,

       99,  107,   41,   39,   40,   41,   99,   82,   92,   92,
       99,   41,  703,   92,   41,   55,   55,   55,   55,   55,
       59,   59,   59,   59,   59,   93,   93,  111,  111,   55,
      118,   93,   93,  148,   59,  119,  704,  123,  118,   40,
      119,   40,  120,  123,   40,   40,  148,   40,   40,  143,
      143,   40,   40,  705,   55,   40,   40,  120,  154,   59,
       40,   60,  137,   60,   60,   60,   60,   60,   61,   61,
      154,  206,   61,   61,   61,   61,   61,   60,   87,  122,
      206,  137,   87,  156,  156,   87,   87,   87,   87,   87,
      101,  138,   87,  138,  122,  122,  101,  152,  101,  122,

      152,  142,   60,  163,  142,  161,  152,  162,  101,  142,
      161,  142,  142,  257,  198,  162,  163,  142,  163,  142,
      165,  198,  175,  175,  257,  165,  175,  175,  175,  175,
      175,  230,  230,  706,  165,  176,  176,  176,  176,  176,
      177,  177,  259,  707,  177,  177,  177,  177,  177,  176,
      178,  178,  178,  178,  178,  179,  179,  179,  179,  179,
      187,  201,  208,  215,  235,  227,  201,  215,  227,  259,
      235,  244,  244,  438,  176,  208,  187,  187,  277,  708,
      244,  287,  277,  433,  433,  244,  287,  287,  244,  299,
      455,  438,  299,  710,  311,  440,  440,  311,  484,  299,

      299,  711,  299,  311,  484,  299,  299,  311,  334,  311,
      311,  334,  455,  712,  455,  665,  334,  569,  569,  665,
      334,  583,  334,  334,  583,  311,  334,  335,  335,  335,
      335,  335,  713,  714,  715,  716,  311,  336,  336,  336,
      336,  336,  337,  337,  717,  718,  337,  337,  337,  337,
      337,  338,  338,  338,  338,  338,  339,  339,  339,  339,
      339,  488,  525,  525,  525,  525,  525,  719,  488,  720,
      721,  722,  488,  526,  526,  526,  526,  526,  679,  723,
      724,  727,  720,  679,  728,  729,  730,  733,  735,  729,
      723,  736,  738,  739,  729,  723,  740,  741,  742,  744,

      745,  746,  747,  748,  740,  749,  750,  751,  752,  755,
      756,  757,  758,  759,  760,  761,  762,  764,  765,  767,
      768,  769,  771,  772,  774,  775,  777,  779,  780,  781,
      782,  783,  784,  785,  786,  787,  789,  791,  792,  771,
      793,  794,  795,  796,  797,  800,  801,  804,  806,  808,
      810,  781,  811,  781,  812,  814,  816,  817,  818,  819,
      820,  821,  822,  823,  824,  825,  826,  828,  829,  831,
      833,  834,  835,  838,  838,  839,  838,  840,  841,  838,
      842,  824,  844,  845,  847,  848,  824,  849,  824,  838,
      850,  838,  852,  853,  854,  855,  856,  857,  858,  857,

      859,  860,  861,  862,  863,  866,  867,  868,  869,  871,
      872,  873,  874,  875,  876,  877,  878,  879,  880,  881,
      882,  883,  884,  885,  886,  887,  888,  889,  890,  891,
      892,  893,  894,  895,  896,  897,  898,  899,  900,  901,
      902,  903,  904,  905,  906,  908,  909,  910,  911,  912,
      913,  914,  915,  916,  917,  918,  919,  906,  920,  921,
      922,  923,  924,  925,  927,  929,  930,  931,  932,  906,
      934,  935,  936,  937,  938,  939,  940,  941,  942,  943,
      944,  906,  945,  946,  947,  949,  950,  951,  952,  953,
      954,  955,  956,  954,  952,  957,  958,  960,  961,  962,

      963,  965,  966,  967,  969,  970,  971,  972,  973,  974,
      976,  977,  978,  979,  980,  982,  984,  985,  986,  988,
      989,  990,  991,  992,  993,  994,  996,  997,  999, 1000,
     1003, 1005, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016,
     1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
     1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
     1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050,
     1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061,
     1062, 1063, 1064, 1065, 1062, 1066, 1067, 1068, 1069, 1070,
     1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081,

     1082, 1083, 1084, 1085, 1086, 1087, 1088, 1091, 1092, 1093,
     1094, 1095, 1097, 1099, 1100, 1101, 1102, 1104, 1105, 1106,
     1107, 1108, 1109, 1110, 1111, 1113, 1114, 1115, 1116, 1117,
     1118, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1131,
     1133, 1136, 1137, 1138, 1141, 1142, 1143, 1144, 1145, 1146,
     1147, 1149, 1116, 1150, 1152, 1153, 1154, 1155, 1157, 1158,
     1159, 1160, 1161, 1162, 1163, 1165, 1166, 1167, 1170, 1171,
     1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182,
     1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193,
     1194, 1195, 1197, 1198, 1200, 1201, 1202, 1203, 1204, 1206,

     1207, 1208, 1209, 1210, 1213, 1214, 1215, 1217, 1218, 1220,
     1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1201,
     1230, 1231, 1232, 1234, 1235, 1236, 1238, 1239, 1240, 1243,
     1244, 1245, 1246, 1247, 1248, 1222, 1249, 1251, 1252, 1253,
     1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1264,
     1265, 1266, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1276,
     1277, 1278, 1280, 1281, 1282, 1284, 1286, 1287, 1288, 1290,
     1291, 1292, 1293, 1294, 1295, 1296, 1299, 1300, 1301, 1302,
     1303, 1304, 1305, 1309, 1310, 1311, 1312, 1314, 1315, 1316,
     1318, 1319, 1320, 1323, 1324, 1325, 1326, 1328, 1330, 1332,

     1334, 1336, 1337, 1338, 1339, 1340, 1328, 1341, 1343, 1344,
     1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1324, 1353,
     1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1363, 1364,
     1365, 1366, 1368, 1369, 1370, 1372, 1375, 1377, 1378, 1379,
     1380, 1381, 1384, 1387, 1388, 1390, 1391, 1392, 1393, 1395,
     1396, 1397, 1398, 1399, 1400, 1402, 1403, 1406, 1407, 1408,
     1409, 1410, 1411, 1412, 1413, 1416, 1417, 1418, 1419, 1420,
     1422, 1424, 1425, 1426, 1427, 1430, 1432, 1435, 1436, 1437,
     1438, 1439, 1440, 1441, 1442, 1443, 1446, 1447, 1448, 1449,
     1450, 1451, 1452, 1454, 1456, 1461, 1462, 1463, 1465, 1466,

     1467, 1472,  699,  695,  693,  692,  690,  686,  685,  683,
      682,  681,  680,  678,  675,  674,  673,  672,  671,  670,
      669,  668,  667,  666,  664,  663,  662,  661,  660,  659,
      658,  656,  655,  654,  652,  651,  650,  649,  648,  647,
      646,  645,  644,  643,  640,  639,  638,  637,  636,  635,
      634,  633,  632,  631,  630,  629,  628,  627,  625,  623,
      622,  621,  620,  618,  616,  615,  614,  613,  612,  611,
      610,  609,  608,  606,  605,  604,  603,  601,  600,  599,
      598,  597,  595,  594,  592,  591,  590,  589,  588,  587,
      586,  585,  584,  582,  580,  579,  578,  576,  575,  574,

      571,  570,  568,  567,  566,  565,  564,  563,  562,  560,
      559,  558,  557,  556,  555,  554,  553,  552,  551,  550,
      549,  548,  547,  546,  545,  544,  543,  542,  541,  539,
      537,  535,  534,  533,  532,  531,  530,  529,  528,  523,
      522,  520,  518,  516,  515,  514,  513,  512,  511,  510,
      509,  508,  507,  506,  505,  504,  503,  502,  501,  498,
      497,  496,  495,  494,  493,  492,  491,  490,  489,  485,
      483,  482,  481,  478,  477,  476,  475,  474,  473,  472,
      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  459,  458,  457,  454,  453,  452,  451,  450,

      449,  448,  447,  446,  445,  444,  443,  442,  441,  439,
      437,  436,  434,  432,  431,  430,  429,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  416,  415,  414,  413,
      412,  411,  410,  409,  408,  407,  405,  404,  402,  401,
      400,  398,  396,  395,  394,  393,  392,  391,  390,  387,
      386,  385,  384,  383,  382,  381,  380,  379,  378,  376,
      375,  373,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  360,  359,  357,  356,  355,  354,  353,
      352,  351,  349,  348,  347,  346,  345,  344,  343,  341,
      340,  333,  332,  331,  330,  329,  328,  327,  326,  325,

      324,  323,  322,  321,  320,  319,  318,  317,  316,  315,
      314,  313,  312,  310,  309,  308,  307,  306,  305,  304,
      303,  302,  301,  300,  298,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  276,  275,  274,  273,  272,  271,  269,
      267,  266,  264,  263,  262,  261,  260,  258,  256,  255,
      254,  253,  252,  251,  250,  249,  248,  247,  246,  245,
      243,  242,  241,  239,  238,  237,  236,  234,  233,  232,
      229,  228,  226,  225,  224,  223,  222,  221,  220,  219,
      218,  217,  216,  214,  212,  211,  210,  209,  207,  205,

      204,  203,  202,  200,  199,  197,  195,  194,  193,  192,
      191,  190,  189,  188,  186,  185,  184,  183,  182,  181,
      180,  172,  171,  170,  169,  168,  167,  166,  164,  160,
      159,  155,  153,  151,  150,  149,  146,  145,  144,  141,
      140,  139,  135,  134,  133,  132,  131,  130,  129,  128,
      127,  126,  125,  124,  121,  117,  116,  115,  113,  112,
      110,  109,  108,  106,  105,  104,  103,  102,  100,   98,
       97,   96,   94,   91,   90,   89,   88,   85,   84,   80,
       78,   77,   76,   75,   74,   73,   72,   71,   70,   54,
       46,   45,   43,   38,   32,   20,   17,   11,    9,    7,

        3, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "Gmsh.l"
#line 2 "Gmsh.l"
// Gmsh - Copyright (C) 1997-2025 C. Geuzaine, J.-F. Remacle
//
// See the LICENSE.txt file in the Gmsh root directory for license information.
// Please report all issues on https://gitlab.onelab.info/gmsh/gmsh/issues.

#include <algorithm>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "GmshConfig.h"
#include "GmshMessage.h"
#include "GModelIO_GEO.h"
#include "Geo.h" // for Shape, NEWPOINT(), etc.
#include "Parser.h"
#include "Gmsh.tab.hpp"

void   parsestring(char endchar);
char  *strsave(char *ptr);
void   skipcomments(void);
void   skipline(void);

#define YY_INPUT(buf,result,max_size)					\
  {									\
    int c = '*', n;							\
    for(n = 0; n < (int) max_size && (c = fgetc(yyin)) != EOF &&        \
           c != '\n' && c != '\r'; ++n)                                 \
      buf[n] = (char) c;                                                \
    if(c == '\n' || c == '\r') {                                        \
      buf[n++] = (char) c;                                              \
      if(c == '\n') yylineno++;                                         \
    }                                                                   \
    if(c == EOF && ferror(yyin))                                        \
      Msg::Error("Input in flex scanner failed");			\
    result = n;                                                         \
  }

#if defined(WIN32)
#define isatty(arg) -1
#define YY_NO_UNISTD_H
#endif

// undefine register for C++11 compatibility of files generated with old
// versions of flex/bison
#define register

#line 1604 "Gmsh.yy.cpp"
#line 1605 "Gmsh.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			yy_size_t yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 57 "Gmsh.l"


#line 1825 "Gmsh.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1472 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1602 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 59 "Gmsh.l"
/* none */;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "Gmsh.l"
return tEND;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 61 "Gmsh.l"
skipcomments();
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "Gmsh.l"
skipline();
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "Gmsh.l"
{ parsestring('\"'); return tBIGSTR; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 64 "Gmsh.l"
{ parsestring('\''); return tBIGSTR; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 65 "Gmsh.l"
{ gmsh_yylval.d = NEWREG(); return tDOUBLE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 66 "Gmsh.l"
{ gmsh_yylval.d = NEWPOINT(); return tDOUBLE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 67 "Gmsh.l"
{ gmsh_yylval.d = NEWCURVE(); return tDOUBLE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 68 "Gmsh.l"
{ gmsh_yylval.d = NEWCURVE(); return tDOUBLE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 69 "Gmsh.l"
{ gmsh_yylval.d = NEWCURVELOOP(); return tDOUBLE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 70 "Gmsh.l"
{ gmsh_yylval.d = NEWCURVELOOP(); return tDOUBLE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 71 "Gmsh.l"
{ gmsh_yylval.d = NEWSURFACE(); return tDOUBLE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 72 "Gmsh.l"
{ gmsh_yylval.d = NEWSURFACELOOP(); return tDOUBLE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 73 "Gmsh.l"
{ gmsh_yylval.d = NEWVOLUME(); return tDOUBLE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 74 "Gmsh.l"
{ gmsh_yylval.d = NEWFIELD(); return tDOUBLE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 75 "Gmsh.l"
return tAFFECT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 76 "Gmsh.l"
return tAFFECTPLUS;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 77 "Gmsh.l"
return tAFFECTMINUS;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 78 "Gmsh.l"
return tAFFECTTIMES;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 79 "Gmsh.l"
return tAFFECTDIVIDE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 80 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 81 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 82 "Gmsh.l"
return tSCOPE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 83 "Gmsh.l"
return tOR;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 84 "Gmsh.l"
return tAND;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 85 "Gmsh.l"
return tPLUSPLUS;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 86 "Gmsh.l"
return tMINUSMINUS;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 87 "Gmsh.l"
return tEQUAL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 88 "Gmsh.l"
return tNOTEQUAL;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 89 "Gmsh.l"
return tLESSOREQUAL;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 90 "Gmsh.l"
return tGREATEROREQUAL;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 91 "Gmsh.l"
return tGREATERGREATER;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 92 "Gmsh.l"
return tLESSLESS;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "Gmsh.l"
return tAbort;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "Gmsh.l"
return tAbs;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "Gmsh.l"
return tAbsolutePath;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "Gmsh.l"
return tAcos;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "Gmsh.l"
return tAdaptMesh;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "Gmsh.l"
return tAffine;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "Gmsh.l"
return tAlias;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "Gmsh.l"
return tAliasWithOptions;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "Gmsh.l"
return tAcos;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "Gmsh.l"
return tAppend;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "Gmsh.l"
return tAsin;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "Gmsh.l"
return tAtan;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "Gmsh.l"
return tAtan2;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "Gmsh.l"
return tAsin;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "Gmsh.l"
return tAtan;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "Gmsh.l"
return tAtan2;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "Gmsh.l"
return tBSpline;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "Gmsh.l"
return tBetti;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "Gmsh.l"
return tBezier;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "Gmsh.l"
return tBox;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "Gmsh.l"
return tBox;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "Gmsh.l"
return tBooleanFragments;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "Gmsh.l"
return tBooleanIntersection;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "Gmsh.l"
return tBooleanDifference;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "Gmsh.l"
return tBooleanDifference;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "Gmsh.l"
return tBooleanFragments;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "Gmsh.l"
return tBooleanUnion;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "Gmsh.l"
return tBooleanIntersection;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "Gmsh.l"
return tBooleanSection;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "Gmsh.l"
return tBooleanUnion;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "Gmsh.l"
return tBoundingBox;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "Gmsh.l"
return tCall;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "Gmsh.l"
return tCatenary;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "Gmsh.l"
return tSpline;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "Gmsh.l"
return tCeil;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "Gmsh.l"
return tCenterOfMass;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "Gmsh.l"
return tChamfer;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "Gmsh.l"
return tCharacteristic;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 134 "Gmsh.l"
return tCircle;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 135 "Gmsh.l"
return tClassifySurfaces;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 136 "Gmsh.l"
return tClosest;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 137 "Gmsh.l"
return tCodeName;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "Gmsh.l"
return tCoherence;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "Gmsh.l"
return tCohomology;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 140 "Gmsh.l"
return tColor;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "Gmsh.l"
return tColorTable;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "Gmsh.l"
return tCombine;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "Gmsh.l"
return tCompound;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 144 "Gmsh.l"
return tCone;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 145 "Gmsh.l"
return tCoordinates;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "Gmsh.l"
return tCopyOptions;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "Gmsh.l"
return tCos;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "Gmsh.l"
return tCosh;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "Gmsh.l"
return tCpu;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "Gmsh.l"
return tCreateGeometry;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "Gmsh.l"
return tCreateTopology;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "Gmsh.l"
return tCurrentDirectory;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "Gmsh.l"
return tCurrentDirectory;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 154 "Gmsh.l"
return tCurrentFileName;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 155 "Gmsh.l"
return tCurve;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 156 "Gmsh.l"
return tCylinder;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 158 "Gmsh.l"
return tDefineConstant;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 159 "Gmsh.l"
return tDefineNumber;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 160 "Gmsh.l"
return tDefineString;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 161 "Gmsh.l"
return tDegenerated;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 162 "Gmsh.l"
return tDelete;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 163 "Gmsh.l"
return tDilate;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 164 "Gmsh.l"
return tDimNameSpace;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 165 "Gmsh.l"
return tDirName;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 166 "Gmsh.l"
return tDisk;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 167 "Gmsh.l"
return tDraw;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 169 "Gmsh.l"
return tEllipse;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 170 "Gmsh.l"
return tEllipse;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 171 "Gmsh.l"
return tEllipsoid;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 172 "Gmsh.l"
return tElliptic;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 173 "Gmsh.l"
return tElse;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 174 "Gmsh.l"
return tElseIf;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 175 "Gmsh.l"
return tEndFor;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 176 "Gmsh.l"
return tEndIf;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 177 "Gmsh.l"
return tError;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 178 "Gmsh.l"
return tEuclidian;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 179 "Gmsh.l"
return tExists;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 180 "Gmsh.l"
return tExit;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 181 "Gmsh.l"
return tExp;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 182 "Gmsh.l"
return tExtrude;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 184 "Gmsh.l"
return tFabs;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 185 "Gmsh.l"
return tField;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 186 "Gmsh.l"
return tFileExists;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 187 "Gmsh.l"
return tFillet;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 188 "Gmsh.l"
return tFind;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 189 "Gmsh.l"
return tFixRelativePath;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 190 "Gmsh.l"
return tFloor;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 191 "Gmsh.l"
return tFmod;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 192 "Gmsh.l"
return tFor;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 193 "Gmsh.l"
return tMacro;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 195 "Gmsh.l"
return tGMSH_MAJOR_VERSION;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 196 "Gmsh.l"
return tGMSH_MINOR_VERSION;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 197 "Gmsh.l"
return tGMSH_PATCH_VERSION;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 198 "Gmsh.l"
return tGeoEntity;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 199 "Gmsh.l"
return tGetEnv;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 200 "Gmsh.l"
return tGetForced;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 201 "Gmsh.l"
return tGetForcedStr;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 202 "Gmsh.l"
return tGetNumber;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 203 "Gmsh.l"
return tGetString;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 204 "Gmsh.l"
return tGetStringValue;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 205 "Gmsh.l"
return tGetValue;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 206 "Gmsh.l"
return tGmshExecutableName;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 208 "Gmsh.l"
return tHealShapes;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 209 "Gmsh.l"
return tHide;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 210 "Gmsh.l"
return tHole;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 211 "Gmsh.l"
return tHomology;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 212 "Gmsh.l"
return tHypot;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 214 "Gmsh.l"
return tInterpolationScheme;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 215 "Gmsh.l"
return tIf;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 216 "Gmsh.l"
return tIn;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 217 "Gmsh.l"
return tIntersect;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 219 "Gmsh.l"
return tNurbsKnots;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 221 "Gmsh.l"
return tLayers;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 222 "Gmsh.l"
return tLength;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 223 "Gmsh.l"
return tLevelset;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 224 "Gmsh.l"
return tLinSpace;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 225 "Gmsh.l"
return tCurve;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 226 "Gmsh.l"
return tList;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 227 "Gmsh.l"
return tListFromFile;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 228 "Gmsh.l"
return tLog;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 229 "Gmsh.l"
return tLog10;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 230 "Gmsh.l"
return tLogSpace;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 231 "Gmsh.l"
return tLowerCase;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 232 "Gmsh.l"
return tLowerCaseIn;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 234 "Gmsh.l"
return tMPI_Rank;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 235 "Gmsh.l"
return tMPI_Size;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 236 "Gmsh.l"
return tMacro;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 237 "Gmsh.l"
return tMass;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 238 "Gmsh.l"
return tMatrixOfInertia;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 239 "Gmsh.l"
return tMax;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 240 "Gmsh.l"
return tMemory;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 241 "Gmsh.l"
return tMeshAlgorithm;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 242 "Gmsh.l"
return tMeshSize;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 243 "Gmsh.l"
return tMeshSizeFromBoundary;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 244 "Gmsh.l"
return tMin;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 245 "Gmsh.l"
return tModulo;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 247 "Gmsh.l"
return tNameToString;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 248 "Gmsh.l"
return tNameStruct;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 249 "Gmsh.l"
return tNameToString;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 250 "Gmsh.l"
return tNewModel;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 251 "Gmsh.l"
return tNormal;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 252 "Gmsh.l"
return tNurbs;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 254 "Gmsh.l"
return tOnelabAction;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 255 "Gmsh.l"
return tOnelabRun;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 256 "Gmsh.l"
return tNurbsOrder;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 258 "Gmsh.l"
return tParametric;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 259 "Gmsh.l"
return tParent;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 260 "Gmsh.l"
return tPeriodic;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 261 "Gmsh.l"
return tPhysical;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 262 "Gmsh.l"
return tPi;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 263 "Gmsh.l"
return tPlane;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 264 "Gmsh.l"
return tPlugin;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 265 "Gmsh.l"
return tPoint;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 266 "Gmsh.l"
return tPolarSphere;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 267 "Gmsh.l"
return tPrintf;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 269 "Gmsh.l"
return tQuadric;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 270 "Gmsh.l"
return tQuadTriAddVerts;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 271 "Gmsh.l"
return tQuadTriNoNewVerts;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 273 "Gmsh.l"
return tRand;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 274 "Gmsh.l"
return tRecombLaterals;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 275 "Gmsh.l"
return tRecombine;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 276 "Gmsh.l"
return tRectangle;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 277 "Gmsh.l"
return tRecursive;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 278 "Gmsh.l"
return tRecombineMesh;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 279 "Gmsh.l"
return tRefineMesh;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 280 "Gmsh.l"
return tRelocateMesh;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 281 "Gmsh.l"
return tReorientMesh;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 282 "Gmsh.l"
return tRenumberMeshNodes;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 283 "Gmsh.l"
return tRenumberMeshElements;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 284 "Gmsh.l"
return tReturn;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 285 "Gmsh.l"
return tReverseMesh;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 286 "Gmsh.l"
return tReverseMesh;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 287 "Gmsh.l"
return tRotate;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 288 "Gmsh.l"
return tRound;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 289 "Gmsh.l"
return tRuled;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 291 "Gmsh.l"
return tStringToName;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 292 "Gmsh.l"
return tScaleLast;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 293 "Gmsh.l"
return tSetChanged;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 294 "Gmsh.l"
return tSetFactory;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 295 "Gmsh.l"
return tSetTag;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 296 "Gmsh.l"
return tSetMaxTag;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 297 "Gmsh.l"
return tSetNumber;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 298 "Gmsh.l"
return tSetPartition;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 299 "Gmsh.l"
return tSetString;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 300 "Gmsh.l"
return tSewing;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 301 "Gmsh.l"
return tShapeFromFile;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 302 "Gmsh.l"
return tShow;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 303 "Gmsh.l"
return tSin;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 304 "Gmsh.l"
return tSinh;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 305 "Gmsh.l"
return tSlide;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 306 "Gmsh.l"
return tSmoother;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 307 "Gmsh.l"
return tSphere;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 308 "Gmsh.l"
return tSpline;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 309 "Gmsh.l"
return tSplit;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 310 "Gmsh.l"
return tSprintf;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 311 "Gmsh.l"
return tSqrt;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 312 "Gmsh.l"
return tStep;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 313 "Gmsh.l"
return tStr;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 314 "Gmsh.l"
return tStrCat;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 315 "Gmsh.l"
return tStrChoice;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 316 "Gmsh.l"
return tStrCmp;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 317 "Gmsh.l"
return tStrFind;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 318 "Gmsh.l"
return tStrLen;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 319 "Gmsh.l"
return tStrPrefix;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 320 "Gmsh.l"
return tStrRelative;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 321 "Gmsh.l"
return tStrReplace;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 322 "Gmsh.l"
return tStrSub;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 323 "Gmsh.l"
return tStringToName;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 324 "Gmsh.l"
return tDefineStruct;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 325 "Gmsh.l"
return tSurface;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 326 "Gmsh.l"
return tSymmetry;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 327 "Gmsh.l"
return tSyncModel;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 329 "Gmsh.l"
return tText2D;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 330 "Gmsh.l"
return tText3D;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 331 "Gmsh.l"
return tTime;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 332 "Gmsh.l"
return tTan;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 333 "Gmsh.l"
return tTanh;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 334 "Gmsh.l"
return tTestLevel;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 335 "Gmsh.l"
return tTextAttributes;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 336 "Gmsh.l"
return tThickSolid;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 337 "Gmsh.l"
return tThruSections;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 338 "Gmsh.l"
return tToday;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 339 "Gmsh.l"
return tTorus;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 340 "Gmsh.l"
return tTotalMemory;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 341 "Gmsh.l"
return tTransformMesh;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 342 "Gmsh.l"
return tTransfQuadTri;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 343 "Gmsh.l"
return tTransfinite;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 344 "Gmsh.l"
return tTranslate;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 346 "Gmsh.l"
return tUndefineConstant;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 347 "Gmsh.l"
return tUnique;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 348 "Gmsh.l"
return tUnsplitWindow;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 349 "Gmsh.l"
return tUpperCase;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 350 "Gmsh.l"
return tUsing;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 352 "Gmsh.l"
return tVolume;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 354 "Gmsh.l"
return tWarning;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 355 "Gmsh.l"
return tWedge;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 356 "Gmsh.l"
return tWire;
	YY_BREAK
case 277:
#line 359 "Gmsh.l"
case 278:
#line 360 "Gmsh.l"
case 279:
#line 361 "Gmsh.l"
case 280:
YY_RULE_SETUP
#line 361 "Gmsh.l"
{ gmsh_yylval.d = atof((char *)yytext); return tDOUBLE; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 363 "Gmsh.l"
{ gmsh_yylval.c = strsave((char*)yytext); return tSTRING; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 365 "Gmsh.l"
return yytext[0];
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 367 "Gmsh.l"
ECHO;
	YY_BREAK
#line 3289 "Gmsh.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1472 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1472 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1471);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 367 "Gmsh.l"


#undef gmsh_yywrap

int gmsh_yywrap() { return 1; }

void skipcomments(void)
{
  int c;

  while (1) {
    while ((c = yyinput()) != '*') {
      // Test on YY_END_OF_BUFFER_CHAR (0), not on feof(yyin) because whole line
      // in buffer
      if(c == '\0') {
	Msg::Error("End of file in commented region");
        return;
      }
    }
    if((c = yyinput()) == '/')
      return;
    unput(c);
  }
}

void parsestring(char endchar)
{
  int c;
  char tmp[1024];

  // Note that we keep special characters (end-of-line \n, tabs \t, etc.) "as
  // is" in the output string: see yyinput() above
  int i = 0;
  while ((c = yyinput()) != endchar) {
    // Test on YY_END_OF_BUFFER_CHAR (0), not on feof(yyin) because whole line
    // in buffer
    if(c == '\0') {
      Msg::Error("End of file in string");
      break;
    }
    else if(i >= (int)sizeof(tmp) - 1) {
      Msg::Error("String too long");
      break;
    }
    else{
      tmp[i++] = (char)c;
    }
  }
  tmp[i] = '\0';
  gmsh_yylval.c = strsave(tmp);
}

char *strsave(char *ptr)
{
  return((char*)strcpy((char*)malloc(strlen(ptr) + 1), ptr));
}

void skipline()
{
  int c;
  while ((c = yyinput()) != '\n' && c != '\0') {}
  // TODO: would be clever to skip the current buffer because whole line already
  // in it
}

static bool is_alpha(const int c)
{
  return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_';
}

void skip(const char *skip, const char *until)
{
  int i, nb_skip = 0;
  int l_skip, l_until, l_max, l;
  char chars[256];
  int c_next, c_next_skip, c_next_until, c_previous = 0;

  l_skip = skip ? strlen(skip) : 0;
  l_until = strlen(until);

  l_max = std::max(l_skip, l_until);
  if(l_max >= (int)sizeof(chars)) {
    Msg::Error("Search pattern too long in skip");
    return;
  }

  while(1) {
    while(1) {
      chars[0] = yyinput();
      // TOFIX: do another test
      if(feof(yyin)) {
	Msg::Error("Unexpected end of file");
	return;
      }
      if(chars[0] == '/') {
        c_next = yyinput();
        if     (c_next ==  '*') skipcomments();
        else if(c_next ==  '/') skipline();
        else unput(c_next);
      }
      if(chars[0] == '"') {
        parsestring('"');
      }
      if(chars[0] == '\'') {
        parsestring('\'');
      }
      if(!c_previous || !is_alpha(c_previous)) {
        if(chars[0] == until[0]) break;
        if(skip && chars[0] == skip[0]) break;
      }
      c_previous = chars[0];
    }

    l = l_max;

    for(i = 1; i < l; i++) {
      chars[i] = yyinput();
      if(feof(yyin)) {
	l = i;
	break;
      }
    }

    c_next = yyinput(); unput(c_next);
    c_next_skip = (l_skip < l) ? chars[l_skip] : c_next;
    c_next_until = (l_until < l) ? chars[l_until] : c_next;

    if(!strncmp(chars, until, l_until) && !is_alpha(c_next_until)) {
      if(!nb_skip) {
	return;
      }
      else{
	nb_skip--;
      }
    }
    else if(skip && !strncmp(chars, skip, l_skip) && !is_alpha(c_next_skip)) {
      nb_skip++;
      // Attention: unput(.) should be applied a number of times equal to
      // l-l_skip (always >0 for skip="For" and until="EndFor", or skip="If" and
      // until="EndIf"); in particular, because "If" is followed by a minimum of
      // 3 chars (e.g., '(1)'), with a total lenght thus exactly equal to the
      // one of "EndIf", one avoid an error when looking then for
      // "EndIf". (Patrick)
    }
    else{
      for(i = 1; i < l - 1; i++) {
	unput(chars[l - i]);
      }
    }

  }
}

void skipTest(const char *skip, const char *until,
              const char *until2, int l_until2_sub, int *type_until2)
{
  int i, nb_skip = 0;
  int l_skip, l_until, l_until2, l_max, l;
  char chars[256];
  int c_next, c_next_skip, c_next_until, c_next_until2, c_previous = 0;
  int flag_EOL_EOF = 0;

  l_skip = skip ? strlen(skip) : 0;
  l_until = strlen(until);
  l_until2 = until2 ? strlen(until2) : 0;

  l_max = std::max(l_skip, l_until);
  l_max = std::max(l_max, l_until2);
  if(l_max >= (int)sizeof(chars)) {
    Msg::Error("Search pattern too long in skipTest");
    return;
  }

  while(1) {
    while(1) {
      chars[0] = yyinput();
      if(feof(yyin)) {
	Msg::Error("Unexpected end of file");
	return;
      }
      if(chars[0] == '/') {
        c_next = yyinput();
        if     (c_next ==  '*') skipcomments();
        else if(c_next ==  '/') skipline();
        else unput(c_next);
      }
      if(chars[0] == '"'){
        parsestring('"');
      }
      if(chars[0] == '\''){
        parsestring('\'');
      }
      if(!c_previous || !is_alpha(c_previous)) {
        if(chars[0] == until[0]) break;
        if(skip && chars[0] == skip[0]) break;
        if(!nb_skip && until2 && chars[0] == until2[0]) break;
        // Useless to search for until2 if nb_skip!=0
      }
      c_previous = chars[0];
    }

    l = l_max;
    flag_EOL_EOF = 0;

    for(i = 1; i < l; i++) {
      chars[i] = yyinput();
      if(chars[i] == '\n') {
        unput(chars[i]); chars[i] = 0; l = i; flag_EOL_EOF = 1;
        break;
      }
      if(feof(yyin)) {
	l = i; flag_EOL_EOF = 1;
	break;
      }
    }

    if(!flag_EOL_EOF) {
      c_next = yyinput(); unput(c_next);
      c_next_skip = (l_skip < l) ? chars[l_skip] : c_next;
      c_next_until = (l_until < l) ? chars[l_until] : c_next;
      if(!nb_skip)
        c_next_until2 = (l_until2 < l) ? chars[l_until2] : c_next;
    }
    else{
      c_next = 0; c_next_skip = 0; c_next_until = 0; c_next_until2 = 0;
    }

    if(!nb_skip && !strncmp(chars, until2, l_until2) &&
       !is_alpha(c_next_until2)) {
      *type_until2 = 1; // Found word is full until2 (e.g., "ElseIf")
      for(int i = 1; i <= l; i++) { // Only correct if l == l_until2
        unput(chars[l - i]);
      } // New file position points "ElseIf", that will be then analysed by the parser
      return;
    }
    else if(!nb_skip && !strncmp(chars,until2,l_until2_sub) &&
            !is_alpha(chars[l_until2_sub])) {
      *type_until2 = 2; // Found word is subword from until2 (e.g., "Else")
      for(int i = 1; i <= l - l_until2_sub; i++) { // Only correct if l_until2_sub < l
        unput(chars[l - i]);
      }
      return;
    }
    else if(!strncmp(chars, until, l_until) && !is_alpha(c_next_until)) {
      for(int i = 1; i <= l - l_until; i++) {
        unput(chars[l - i]);
      }
      if(!nb_skip) {
	return;
      }
      else{
	nb_skip--;
      }
    }
    else if(skip && !strncmp(chars, skip, l_skip) && !is_alpha(c_next_skip)) {
      nb_skip++;
    }
    else{
      for(i = 1; i < l - 1; i++) {
	unput(chars[l - i]);
      }
    }

  }
}

void gmsh_yyflush() { YY_FLUSH_BUFFER; }

