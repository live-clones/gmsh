@c This file was generated by api/gen.py: do not edit manually!

@menu
* Namespace gmsh::
* Namespace gmsh/option::
* Namespace gmsh/model::
* Namespace gmsh/model/mesh::
* Namespace gmsh/model/mesh/field::
* Namespace gmsh/model/geo::
* Namespace gmsh/model/geo/mesh::
* Namespace gmsh/model/occ::
* Namespace gmsh/model/occ/mesh::
* Namespace gmsh/view::
* Namespace gmsh/view/option::
* Namespace gmsh/plugin::
* Namespace gmsh/graphics::
* Namespace gmsh/fltk::
* Namespace gmsh/parser::
* Namespace gmsh/onelab::
* Namespace gmsh/logger::
@end menu

@node Namespace gmsh, Namespace gmsh/option, , Gmsh application programming interface
@section Namespace @code{gmsh}: top-level functions

@ftable @code
@item gmsh/initialize
Initialize the Gmsh API. This must be called before any call to the other functions in the API. If @code{argc} and @code{argv} (or just @code{argv} in Python or Julia) are provided, they will be handled in the same way as the command line arguments in the Gmsh app. If @code{readConfigFiles} is set, read system Gmsh configuration files (gmshrc and gmsh-options). If @code{run} is set, run in the same way as the Gmsh app, either interactively or in batch mode depending on the command line arguments. If @code{run} is not set, initializing the API sets the options "General.AbortOnError" to 2 and "General.Terminal" to 1.

@table @asis
@item Input:
@code{(argc = 0)}, @code{argv = []} (command line arguments), @code{readConfigFiles = True} (boolean), @code{run = False} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L76,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L63,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L262,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L56,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t1.cpp#L18,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L17,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L15,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t4.cpp#L17,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L78,t5.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t1.py#L15,t1.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L15,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L13,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t4.py#L14,t4.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L13,t5.py}, ...)
@end table

@item gmsh/isInitialized
Return 1 if the Gmsh API is initialized, and 0 if not.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L83,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L69,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L293,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L72,Julia}
@end table

@item gmsh/finalize
Finalize the Gmsh API. This must be called when you are done using the Gmsh API.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L89,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L73,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L309,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L87,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t1.cpp#L174,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L170,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L147,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t4.cpp#L173,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L231,t5.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t1.py#L173,t1.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L163,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L134,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t4.py#L182,t4.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L225,t5.py}, ...)
@end table

@item gmsh/open
Open a file. Equivalent to the @code{File->Open} menu in the Gmsh app. Handling of the file depends on its extension and/or its contents: opening a file with model data will create a new model.

@table @asis
@item Input:
@code{fileName} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L96,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L78,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L324,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L106,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x1.cpp#L27,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x1.py#L24,x1.py}, @url{@value{GITLAB-PREFIX}/examples/api/explore.py#L9,explore.py}, @url{@value{GITLAB-PREFIX}/examples/api/flatten2.py#L13,flatten2.py}, @url{@value{GITLAB-PREFIX}/examples/api/flatten.py#L16,flatten.py}, @url{@value{GITLAB-PREFIX}/examples/api/heal.py#L6,heal.py}, ...)
@end table

@item gmsh/merge
Merge a file. Equivalent to the @code{File->Merge} menu in the Gmsh app. Handling of the file depends on its extension and/or its contents. Merging a file with model data will add the data to the current model.

@table @asis
@item Input:
@code{fileName} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L103,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L84,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L342,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L125,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t7.cpp#L21,t7.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t8.cpp#L37,t8.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t9.cpp#L29,t9.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L24,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t17.cpp#L33,t17.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t7.py#L20,t7.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t8.py#L35,t8.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t9.py#L26,t9.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L21,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t17.py#L32,t17.py}, ...)
@end table

@item gmsh/write
Write a file. The export format is determined by the file extension.

@table @asis
@item Input:
@code{fileName} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L108,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L88,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L360,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L142,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t1.cpp#L123,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L142,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L84,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t4.cpp#L167,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L225,t5.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t1.py#L122,t1.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L135,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L79,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t4.py#L176,t4.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L219,t5.py}, ...)
@end table

@item gmsh/clear
Clear all loaded models and post-processing data, and add a new empty model.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L113,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L93,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L376,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L156,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L20,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x1.cpp#L166,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L17,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L19,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x1.py#L127,x1.py}, @url{@value{GITLAB-PREFIX}/examples/api/x3d_export.py#L30,x3d_export.py})
@end table

@end ftable

@node Namespace gmsh/option, Namespace gmsh/model, Namespace gmsh, Gmsh application programming interface
@section Namespace @code{gmsh/option}: option handling functions

@ftable @code
@item gmsh/option/setNumber
Set a numerical option to @code{value}. @code{name} is of the form "Category.Option" or "Category[num].Option". Available categories and options are listed in the @url{https://gmsh.info/doc/texinfo/gmsh.html#Gmsh-options,"Gmsh options" chapter of the Gmsh reference manual}.

@table @asis
@item Input:
@code{name} (string), @code{value} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L123,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L99,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L396,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L186,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L90,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L206,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t6.cpp#L97,t6.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t7.cpp#L58,t7.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t8.cpp#L54,t8.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L84,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L201,t5.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t6.py#L98,t6.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t7.py#L51,t7.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t8.py#L47,t8.py}, ...)
@end table

@item gmsh/option/getNumber
Get the @code{value} of a numerical option. @code{name} is of the form "Category.Option" or "Category[num].Option". Available categories and options are listed in the @url{https://gmsh.info/doc/texinfo/gmsh.html#Gmsh-options,"Gmsh options" chapter of the Gmsh reference manual}.

@table @asis
@item Input:
@code{name} (string)
@item Output:
@code{value} (double)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L132,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L107,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L419,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L210,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t8.cpp#L139,t8.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t8.py#L140,t8.py}, @url{@value{GITLAB-PREFIX}/examples/api/test.py#L5,test.py})
@end table

@item gmsh/option/setString
Set a string option to @code{value}. @code{name} is of the form "Category.Option" or "Category[num].Option". Available categories and options are listed in the @url{https://gmsh.info/doc/texinfo/gmsh.html#Gmsh-options,"Gmsh options" chapter of the Gmsh reference manual}.

@table @asis
@item Input:
@code{name} (string), @code{value} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L141,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L115,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L446,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L233,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t4.cpp#L153,t4.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t4.py#L163,t4.py})
@end table

@item gmsh/option/getString
Get the @code{value} of a string option. @code{name} is of the form "Category.Option" or "Category[num].Option". Available categories and options are listed in the @url{https://gmsh.info/doc/texinfo/gmsh.html#Gmsh-options,"Gmsh options" chapter of the Gmsh reference manual}.

@table @asis
@item Input:
@code{name} (string)
@item Output:
@code{value} (string)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L150,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L123,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L469,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L257,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/test.py#L29,test.py})
@end table

@item gmsh/option/setColor
Set a color option to the RGBA value (@code{r}, @code{g}, @code{b}, @code{a}), where where @code{r}, @code{g}, @code{b} and @code{a} should be integers between 0 and 255. @code{name} is of the form "Category.Color.Option" or "Category[num].Color.Option". Available categories and options are listed in the @url{https://gmsh.info/doc/texinfo/gmsh.html#Gmsh-options,"Gmsh options" chapter of the Gmsh reference manual}. For conciseness "Color." can be ommitted in @code{name}.

@table @asis
@item Input:
@code{name} (string), @code{r} (integer), @code{g} (integer), @code{b} (integer), @code{a = 255} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L161,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L133,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L496,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L286,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L91,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t8.cpp#L61,t8.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L85,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t8.py#L58,t8.py})
@end table

@item gmsh/option/getColor
Get the @code{r}, @code{g}, @code{b}, @code{a} value of a color option. @code{name} is of the form "Category.Color.Option" or "Category[num].Color.Option". Available categories and options are listed in the @url{https://gmsh.info/doc/texinfo/gmsh.html#Gmsh-options,"Gmsh options" chapter of the Gmsh reference manual}. For conciseness "Color." can be ommitted in @code{name}.

@table @asis
@item Input:
@code{name} (string)
@item Output:
@code{r} (integer), @code{g} (integer), @code{b} (integer), @code{a} (integer)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L174,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L145,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L527,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L314,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L97,t3.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L90,t3.py})
@end table

@end ftable

@node Namespace gmsh/model, Namespace gmsh/model/mesh, Namespace gmsh/option, Gmsh application programming interface
@section Namespace @code{gmsh/model}: model functions

@ftable @code
@item gmsh/model/add
Add a new model, with name @code{name}, and set it as the current model.

@table @asis
@item Input:
@code{name} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L187,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L153,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L574,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L347,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t1.cpp#L22,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L19,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L21,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t4.cpp#L19,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t6.cpp#L16,t6.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t1.py#L19,t1.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L17,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L18,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t4.py#L16,t4.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L15,t5.py}, ...)
@end table

@item gmsh/model/remove
Remove the current model.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L192,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L157,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L591,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L361,Julia}
@end table

@item gmsh/model/list
List the names of all models.

@table @asis
@item Input:
-
@item Output:
@code{names} (vector of strings)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L197,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L160,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L604,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L380,Julia}
@end table

@item gmsh/model/getCurrent
Get the name of the current model.

@table @asis
@item Input:
-
@item Output:
@code{name} (string)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L202,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L164,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L625,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L403,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x1.cpp#L38,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x1.py#L32,x1.py}, @url{@value{GITLAB-PREFIX}/examples/api/explore.py#L11,explore.py})
@end table

@item gmsh/model/setCurrent
Set the current model to the model with name @code{name}. If several models have the same name, select the one that was added first.

@table @asis
@item Input:
@code{name} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L208,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L169,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L647,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L424,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/copy_mesh.py#L45,copy_mesh.py})
@end table

@item gmsh/model/getFileName
Get the file name (if any) associated with the current model. A file name is associated when a model is read from a file on disk.

@table @asis
@item Input:
-
@item Output:
@code{fileName} (string)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L214,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L174,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L666,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L445,Julia}
@end table

@item gmsh/model/setFileName
Set the file name associated with the current model.

@table @asis
@item Input:
@code{fileName} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L219,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L178,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L689,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L465,Julia}
@end table

@item gmsh/model/getEntities
Get all the entities in the current model. A model entity is represented by two integers: its dimension (dim == 0, 1, 2 or 3) and its tag (its unique, strictly positive identifier). If @code{dim} is >= 0, return only the entities of the specified dimension (e.g. points if @code{dim} == 0). The entities are returned as a vector of (dim, tag) pairs.

@table @asis
@item Input:
@code{dim = -1} (integer)
@item Output:
@code{dimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L228,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L186,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L707,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L490,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L74,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t16.cpp#L114,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t18.cpp#L31,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t20.cpp#L113,t20.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L46,t21.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L64,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t16.py#L97,t16.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t18.py#L29,t18.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t20.py#L91,t20.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L35,t21.py}, ...)
@end table

@item gmsh/model/setEntityName
Set the name of the entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{name} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L234,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L191,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L735,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L514,Julia}
@end table

@item gmsh/model/getEntityName
Get the name of the entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{name} (string)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L241,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L197,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L757,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L536,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x1.cpp#L96,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x1.py#L83,x1.py}, @url{@value{GITLAB-PREFIX}/examples/api/step_assembly.py#L23,step_assembly.py})
@end table

@item gmsh/model/removeEntityName
Remove the entity name @code{name} from the current model.

@table @asis
@item Input:
@code{name} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L248,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L203,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L783,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L556,Julia}
@end table

@item gmsh/model/getPhysicalGroups
Get all the physical groups in the current model. If @code{dim} is >= 0, return only the entities of the specified dimension (e.g. physical points if @code{dim} == 0). The entities are returned as a vector of (dim, tag) pairs.

@table @asis
@item Input:
@code{dim = -1} (integer)
@item Output:
@code{dimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L255,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L209,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L801,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L579,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/poisson.py#L83,poisson.py})
@end table

@item gmsh/model/getEntitiesForPhysicalGroup
Get the tags of the model entities making up the physical group of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{tags} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L262,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L215,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L827,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L606,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/poisson.py#L88,poisson.py}, @url{@value{GITLAB-PREFIX}/examples/api/test.py#L24,test.py})
@end table

@item gmsh/model/getEntitiesForPhysicalName
Get the model entities (as a vector (dim, tag) pairs) making up the physical group with name @code{name}.

@table @asis
@item Input:
@code{name} (string)
@item Output:
@code{dimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L270,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L222,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L854,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L631,Julia}
@end table

@item gmsh/model/getPhysicalGroupsForEntity
Get the tags of the physical groups (if any) to which the model entity of dimension @code{dim} and tag @code{tag} belongs.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{physicalTags} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L277,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L228,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L879,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L658,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x1.cpp#L123,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x1.py#L100,x1.py})
@end table

@item gmsh/model/addPhysicalGroup
Add a physical group of dimension @code{dim}, grouping the model entities with tags @code{tags}. Return the tag of the physical group, equal to @code{tag} if @code{tag} is positive, or a new tag if @code{tag} < 0. Set the name of the physical group if @code{name} is not empty.

@table @asis
@item Input:
@code{dim} (integer), @code{tags} (vector of integers), @code{tag = -1} (integer), @code{name = ""} (string)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L287,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L237,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L906,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L687,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t1.cpp#L116,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L34,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L36,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L196,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t14.cpp#L76,t14.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t1.py#L115,t1.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L32,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L33,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L192,t5.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t14.py#L70,t14.py}, ...)
@end table

@item gmsh/model/removePhysicalGroups
Remove the physical groups @code{dimTags} (given as a vector of (dim, tag) pairs) from the current model. If @code{dimTags} is empty, remove all groups.

@table @asis
@item Input:
@code{dimTags = []} (vector of pairs of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L296,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L245,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L937,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L706,Julia}
@end table

@item gmsh/model/setPhysicalName
Set the name of the physical group of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{name} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L301,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L249,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L957,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L728,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/poisson.py#L49,poisson.py}, @url{@value{GITLAB-PREFIX}/examples/api/step_assembly.py#L38,step_assembly.py})
@end table

@item gmsh/model/getPhysicalName
Get the name of the physical group of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{name} (string)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L308,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L255,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L979,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L750,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x1.cpp#L128,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x1.py#L104,x1.py}, @url{@value{GITLAB-PREFIX}/examples/api/poisson.py#L87,poisson.py})
@end table

@item gmsh/model/removePhysicalName
Remove the physical name @code{name} from the current model.

@table @asis
@item Input:
@code{name} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L315,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L261,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1005,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L770,Julia}
@end table

@item gmsh/model/setTag
Set the tag of the entity of dimension @code{dim} and tag @code{tag} to the new value @code{newTag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{newTag} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L321,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L266,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1023,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L791,Julia}
@end table

@item gmsh/model/getBoundary
Get the boundary of the model entities @code{dimTags}, given as a vector of (dim, tag) pairs. Return in @code{outDimTags} the boundary of the individual entities (if @code{combined} is false) or the boundary of the combined geometrical shape formed by all input entities (if @code{combined} is true). Return tags multiplied by the sign of the boundary entity if @code{oriented} is true. Apply the boundary operator recursively down to dimension 0 (i.e. to points) if @code{recursive} is true.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{combined = True} (boolean), @code{oriented = True} (boolean), @code{recursive = False} (boolean)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L334,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L278,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1046,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L820,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t14.cpp#L88,t14.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t16.cpp#L118,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t18.cpp#L97,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t19.cpp#L50,t19.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L174,t21.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t14.py#L80,t14.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t16.py#L100,t16.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t18.py#L88,t18.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t19.py#L46,t19.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L150,t21.py}, ...)
@end table

@item gmsh/model/getAdjacencies
Get the upward and downward adjacencies of the model entity of dimension @code{dim} and tag @code{tag}. The @code{upward} vector returns the tags of adjacent entities of dimension @code{dim} + 1; the @code{downward} vector returns the tags of adjacent entities of dimension @code{dim} - 1.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{upward} (vector of integers), @code{downward} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L346,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L289,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1083,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L852,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x1.cpp#L109,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x1.py#L93,x1.py})
@end table

@item gmsh/model/getEntitiesInBoundingBox
Get the model entities in the bounding box defined by the two points (@code{xmin}, @code{ymin}, @code{zmin}) and (@code{xmax}, @code{ymax}, @code{zmax}). If @code{dim} is >= 0, return only the entities of the specified dimension (e.g. points if @code{dim} == 0).

@table @asis
@item Input:
@code{xmin} (double), @code{ymin} (double), @code{zmin} (double), @code{xmax} (double), @code{ymax} (double), @code{zmax} (double), @code{dim = -1} (integer)
@item Output:
@code{dimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L357,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L299,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1117,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L887,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t16.cpp#L123,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t18.cpp#L86,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t20.cpp#L105,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t16.py#L105,t16.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t18.py#L80,t18.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t20.py#L86,t20.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_3d.py#L80,naca_boundary_layer_3d.py})
@end table

@item gmsh/model/getBoundingBox
Get the bounding box (@code{xmin}, @code{ymin}, @code{zmin}), (@code{xmax}, @code{ymax}, @code{zmax}) of the model entity of dimension @code{dim} and tag @code{tag}. If @code{dim} and @code{tag} are negative, get the bounding box of the whole model.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{xmin} (double), @code{ymin} (double), @code{zmin} (double), @code{xmax} (double), @code{ymax} (double), @code{zmax} (double)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L371,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L312,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1156,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L920,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t18.cpp#L113,t18.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t18.py#L103,t18.py})
@end table

@item gmsh/model/getDimension
Return the geometrical dimension of the current model.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L383,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L323,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1205,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L943,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x1.cpp#L39,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x1.py#L33,x1.py})
@end table

@item gmsh/model/addDiscreteEntity
Add a discrete model entity (defined by a mesh) of dimension @code{dim} in the current model. Return the tag of the new discrete entity, equal to @code{tag} if @code{tag} is positive, or a new tag if @code{tag} < 0. @code{boundary} specifies the tags of the entities on the boundary of the discrete entity, if any. Specifying @code{boundary} allows Gmsh to construct the topology of the overall model.

@table @asis
@item Input:
@code{dim} (integer), @code{tag = -1} (integer), @code{boundary = []} (vector of integers)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L392,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L330,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1222,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L969,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x2.cpp#L78,x2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x4.cpp#L24,x4.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x7.cpp#L71,x7.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x2.py#L74,x2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x4.py#L22,x4.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x7.py#L70,x7.py}, @url{@value{GITLAB-PREFIX}/examples/api/copy_mesh.py#L28,copy_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/discrete.py#L9,discrete.py}, ...)
@end table

@item gmsh/model/removeEntities
Remove the entities @code{dimTags} (given as a vector of (dim, tag) pairs) of the current model, provided that they are not on the boundary of (or embedded in) higher-dimensional entities. If @code{recursive} is true, remove all the entities on their boundaries, down to dimension 0.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{recursive = False} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L402,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L339,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1252,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L991,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t18.cpp#L92,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t20.cpp#L119,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t18.py#L84,t18.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t20.py#L94,t20.py}, @url{@value{GITLAB-PREFIX}/examples/api/spherical_surf.py#L16,spherical_surf.py})
@end table

@item gmsh/model/getType
Get the type of the entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{entityType} (string)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L408,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L344,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1276,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1015,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L164,t21.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x1.cpp#L94,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L147,t21.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x1.py#L82,x1.py}, @url{@value{GITLAB-PREFIX}/examples/api/explore.py#L17,explore.py}, @url{@value{GITLAB-PREFIX}/examples/api/partition.py#L44,partition.py})
@end table

@item gmsh/model/getParent
In a partitioned model, get the parent of the entity of dimension @code{dim} and tag @code{tag}, i.e. from which the entity is a part of, if any. @code{parentDim} and @code{parentTag} are set to -1 if the entity has no parent.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{parentDim} (integer), @code{parentTag} (integer)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L417,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L352,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1302,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1042,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L171,t21.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x1.cpp#L142,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L149,t21.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x1.py#L113,x1.py}, @url{@value{GITLAB-PREFIX}/examples/api/explore.py#L31,explore.py}, @url{@value{GITLAB-PREFIX}/examples/api/partition.py#L46,partition.py})
@end table

@item gmsh/model/getNumberOfPartitions
Return the number of partitions in the model.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L425,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L359,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1335,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1061,Julia}
@end table

@item gmsh/model/getPartitions
In a partitioned model, return the tags of the partition(s) to which the entity belongs.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{partitions} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L431,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L363,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1352,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1084,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L161,t21.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x1.cpp#L137,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L144,t21.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x1.py#L110,x1.py}, @url{@value{GITLAB-PREFIX}/examples/api/explore.py#L28,explore.py}, @url{@value{GITLAB-PREFIX}/examples/api/partition.py#L41,partition.py})
@end table

@item gmsh/model/getValue
Evaluate the parametrization of the entity of dimension @code{dim} and tag @code{tag} at the parametric coordinates @code{parametricCoord}. Only valid for @code{dim} equal to 0 (with empty @code{parametricCoord}), 1 (with @code{parametricCoord} containing parametric coordinates on the curve) or 2 (with @code{parametricCoord} containing u, v parametric coordinates on the surface, concatenated: [p1u, p1v, p2u, ...]). Return x, y, z coordinates in @code{coord}, concatenated: [p1x, p1y, p1z, p2x, ...].

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{parametricCoord} (vector of doubles)
@item Output:
@code{coord} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L444,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L375,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1379,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1115,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L90,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x5.cpp#L97,x5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L85,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x5.py#L82,x5.py}, @url{@value{GITLAB-PREFIX}/examples/api/reparamOnFace.py#L20,reparamOnFace.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain_stl.py#L35,terrain_stl.py})
@end table

@item gmsh/model/getDerivative
Evaluate the derivative of the parametrization of the entity of dimension @code{dim} and tag @code{tag} at the parametric coordinates @code{parametricCoord}. Only valid for @code{dim} equal to 1 (with @code{parametricCoord} containing parametric coordinates on the curve) or 2 (with @code{parametricCoord} containing u, v parametric coordinates on the surface, concatenated: [p1u, p1v, p2u, ...]). For @code{dim} equal to 1 return the x, y, z components of the derivative with respect to u [d1ux, d1uy, d1uz, d2ux, ...]; for @code{dim} equal to 2 return the x, y, z components of the derivative with respect to u and v: [d1ux, d1uy, d1uz, d1vx, d1vy, d1vz, d2ux, ...].

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{parametricCoord} (vector of doubles)
@item Output:
@code{derivatives} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L460,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L390,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1414,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1148,Julia}
@end table

@item gmsh/model/getSecondDerivative
Evaluate the second derivative of the parametrization of the entity of dimension @code{dim} and tag @code{tag} at the parametric coordinates @code{parametricCoord}. Only valid for @code{dim} equal to 1 (with @code{parametricCoord} containing parametric coordinates on the curve) or 2 (with @code{parametricCoord} containing u, v parametric coordinates on the surface, concatenated: [p1u, p1v, p2u, ...]). For @code{dim} equal to 1 return the x, y, z components of the second derivative with respect to u [d1uux, d1uuy, d1uuz, d2uux, ...]; for @code{dim} equal to 2 return the x, y, z components of the second derivative with respect to u and v, and the mixed derivative with respect to u and v: [d1uux, d1uuy, d1uuz, d1vvx, d1vvy, d1vvz, d1uvx, d1uvy, d1uvz, d2uux, ...].

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{parametricCoord} (vector of doubles)
@item Output:
@code{derivatives} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L477,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L407,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1451,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1183,Julia}
@end table

@item gmsh/model/getCurvature
Evaluate the (maximum) curvature of the entity of dimension @code{dim} and tag @code{tag} at the parametric coordinates @code{parametricCoord}. Only valid for @code{dim} equal to 1 (with @code{parametricCoord} containing parametric coordinates on the curve) or 2 (with @code{parametricCoord} containing u, v parametric coordinates on the surface, concatenated: [p1u, p1v, p2u, ...]).

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{parametricCoord} (vector of doubles)
@item Output:
@code{curvatures} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L489,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L418,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1490,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1213,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x5.cpp#L60,x5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x5.py#L50,x5.py}, @url{@value{GITLAB-PREFIX}/examples/api/normals.py#L28,normals.py})
@end table

@item gmsh/model/getPrincipalCurvatures
Evaluate the principal curvatures of the surface with tag @code{tag} at the parametric coordinates @code{parametricCoord}, as well as their respective directions. @code{parametricCoord} are given by pair of u and v coordinates, concatenated: [p1u, p1v, p2u, ...].

@table @asis
@item Input:
@code{tag} (integer), @code{parametricCoord} (vector of doubles)
@item Output:
@code{curvatureMax} (vector of doubles), @code{curvatureMin} (vector of doubles), @code{directionMax} (vector of doubles), @code{directionMin} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L500,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L428,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1523,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1244,Julia}
@end table

@item gmsh/model/getNormal
Get the normal to the surface with tag @code{tag} at the parametric coordinates @code{parametricCoord}. The @code{parametricCoord} vector should contain u and v coordinates, concatenated: [p1u, p1v, p2u, ...]. @code{normals} are returned as a vector of x, y, z components, concatenated: [n1x, n1y, n1z, n2x, ...].

@table @asis
@item Input:
@code{tag} (integer), @code{parametricCoord} (vector of doubles)
@item Output:
@code{normals} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L513,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L440,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1566,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1281,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x5.cpp#L56,x5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x5.py#L47,x5.py}, @url{@value{GITLAB-PREFIX}/examples/api/normals.py#L26,normals.py})
@end table

@item gmsh/model/getParametrization
Get the parametric coordinates @code{parametricCoord} for the points @code{coord} on the entity of dimension @code{dim} and tag @code{tag}. @code{coord} are given as x, y, z coordinates, concatenated: [p1x, p1y, p1z, p2x, ...]. @code{parametricCoord} returns the parametric coordinates t on the curve (if @code{dim} = 1) or u and v coordinates concatenated on the surface (if @code{dim} == 2), i.e. [p1t, p2t, ...] or [p1u, p1v, p2u, ...].

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{coord} (vector of doubles)
@item Output:
@code{parametricCoord} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L525,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L451,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1596,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1312,Julia}
@end table

@item gmsh/model/getParametrizationBounds
Get the @code{min} and @code{max} bounds of the parametric coordinates for the entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{min} (vector of doubles), @code{max} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L534,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L459,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1630,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1339,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x5.cpp#L93,x5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x5.py#L79,x5.py}, @url{@value{GITLAB-PREFIX}/examples/api/reparamOnFace.py#L17,reparamOnFace.py})
@end table

@item gmsh/model/isInside
Check if the coordinates (or the parametric coordinates if @code{parametric} is set) provided in @code{coord} correspond to points inside the entity of dimension @code{dim} and tag @code{tag}, and return the number of points inside. This feature is only available for a subset of entities, depending on the underlying geometrical representation.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{coord} (vector of doubles), @code{parametric = False} (boolean)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L546,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L470,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1662,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1372,Julia}
@end table

@item gmsh/model/getClosestPoint
Get the points @code{closestCoord} on the entity of dimension @code{dim} and tag @code{tag} to the points @code{coord}, by orthogonal projection. @code{coord} and @code{closestCoord} are given as x, y, z coordinates, concatenated: [p1x, p1y, p1z, p2x, ...]. @code{parametricCoord} returns the parametric coordinates t on the curve (if @code{dim} == 1) or u and v coordinates concatenated on the surface (if @code{dim} = 2), i.e. [p1t, p2t, ...] or [p1u, p1v, p2u, ...].

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{coord} (vector of doubles)
@item Output:
@code{closestCoord} (vector of doubles), @code{parametricCoord} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L559,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L482,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1694,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1401,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/closest_point.py#L11,closest_point.py})
@end table

@item gmsh/model/reparametrizeOnSurface
Reparametrize the boundary entity (point or curve, i.e. with @code{dim} == 0 or @code{dim} == 1) of tag @code{tag} on the surface @code{surfaceTag}. If @code{dim} == 1, reparametrize all the points corresponding to the parametric coordinates @code{parametricCoord}. Multiple matches in case of periodic surfaces can be selected with @code{which}. This feature is only available for a subset of entities, depending on the underlying geometrical representation.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{parametricCoord} (vector of doubles), @code{surfaceTag} (integer), @code{which = 0} (integer)
@item Output:
@code{surfaceParametricCoord} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L573,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L495,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1733,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1437,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x5.cpp#L102,x5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x5.py#L86,x5.py}, @url{@value{GITLAB-PREFIX}/examples/api/reparamOnFace.py#L19,reparamOnFace.py})
@end table

@item gmsh/model/setVisibility
Set the visibility of the model entities @code{dimTags} (given as a vector of (dim, tag) pairs) to @code{value}. Apply the visibility setting recursively if @code{recursive} is true.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{value} (integer), @code{recursive = False} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L585,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L506,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1771,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1462,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/gui.py#L33,gui.py}, @url{@value{GITLAB-PREFIX}/examples/api/hybrid_order.py#L16,hybrid_order.py})
@end table

@item gmsh/model/getVisibility
Get the visibility of the model entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{value} (integer)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L592,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L512,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1796,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1486,Julia}
@end table

@item gmsh/model/setVisibilityPerWindow
Set the global visibility of the model per window to @code{value}, where @code{windowIndex} identifies the window in the window list.

@table @asis
@item Input:
@code{value} (integer), @code{windowIndex = 0} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L600,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L519,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1822,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1507,Julia}
@end table

@item gmsh/model/setColor
Set the color of the model entities @code{dimTags} (given as a vector of (dim, tag) pairs) to the RGBA value (@code{r}, @code{g}, @code{b}, @code{a}), where @code{r}, @code{g}, @code{b} and @code{a} should be integers between 0 and 255. Apply the color setting recursively if @code{recursive} is true.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{r} (integer), @code{g} (integer), @code{b} (integer), @code{a = 255} (integer), @code{recursive = False} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L609,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L527,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1843,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1533,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t4.cpp#L158,t4.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t4.py#L169,t4.py}, @url{@value{GITLAB-PREFIX}/examples/api/gui.py#L35,gui.py})
@end table

@item gmsh/model/getColor
Get the color of the model entity of dimension @code{dim} and tag @code{tag}. If no color is specified for the entity, return fully transparent blue, i.e. (0, 0, 255, 0).

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{r} (integer), @code{g} (integer), @code{b} (integer), @code{a} (integer)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L621,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L538,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1875,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1561,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/step_boundary_colors.py#L10,step_boundary_colors.py})
@end table

@item gmsh/model/setCoordinates
Set the @code{x}, @code{y}, @code{z} coordinates of a geometrical point.

@table @asis
@item Input:
@code{tag} (integer), @code{x} (double), @code{y} (double), @code{z} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L631,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L547,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1916,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1586,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x2.cpp#L79,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x2.py#L75,x2.py}, @url{@value{GITLAB-PREFIX}/examples/api/reparamOnFace.py#L23,reparamOnFace.py})
@end table

@item gmsh/model/setAttribute
Set the values of the attribute with name @code{name}.

@table @asis
@item Input:
@code{name} (string), @code{values} (vector of strings)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L639,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L554,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1940,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1605,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/msh_attributes.py#L6,msh_attributes.py})
@end table

@item gmsh/model/getAttribute
Get the values of the attribute with name @code{name}.

@table @asis
@item Input:
@code{name} (string)
@item Output:
@code{values} (vector of strings)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L645,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L559,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1961,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1626,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/msh_attributes.py#L14,msh_attributes.py})
@end table

@item gmsh/model/getAttributeNames
Get the names of any optional attributes stored in the model.

@table @asis
@item Input:
-
@item Output:
@code{names} (vector of strings)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L651,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L564,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1985,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1650,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/msh_attributes.py#L13,msh_attributes.py})
@end table

@item gmsh/model/removeAttribute
Remove the attribute with name @code{name}.

@table @asis
@item Input:
@code{name} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L656,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L568,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2007,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1672,Julia}
@end table

@end ftable

@node Namespace gmsh/model/mesh, Namespace gmsh/model/mesh/field, Namespace gmsh/model, Gmsh application programming interface
@section Namespace @code{gmsh/model/mesh}: mesh functions

@ftable @code
@item gmsh/model/mesh/generate
Generate a mesh of the current model, up to dimension @code{dim} (0, 1, 2 or 3).

@table @asis
@item Input:
@code{dim = 3} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L664,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L572,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2031,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1699,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t1.cpp#L120,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L141,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L83,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t4.cpp#L165,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L224,t5.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t1.py#L119,t1.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L134,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L78,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t4.py#L174,t4.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L218,t5.py}, ...)
@end table

@item gmsh/model/mesh/partition
Partition the mesh of the current model into @code{numPart} partitions. Optionally, @code{elementTags} and @code{partitions} can be provided to specify the partition of each element explicitly.

@table @asis
@item Input:
@code{numPart} (integer), @code{elementTags = []} (vector of sizes), @code{partitions = []} (vector of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L671,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L578,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2048,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1720,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L136,t21.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L124,t21.py}, @url{@value{GITLAB-PREFIX}/examples/api/partition.py#L26,partition.py})
@end table

@item gmsh/model/mesh/unpartition
Unpartition the mesh of the current model.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L678,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L584,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2073,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1734,Julia}
@end table

@item gmsh/model/mesh/optimize
Optimize the mesh of the current model using @code{method} (empty for default tetrahedral mesh optimizer, "Netgen" for Netgen optimizer, "HighOrder" for direct high-order mesh optimizer, "HighOrderElastic" for high-order elastic smoother, "HighOrderFastCurving" for fast curving algorithm, "Laplace2D" for Laplace smoothing, "Relocate2D" and "Relocate3D" for node relocation, "QuadQuasiStructured" for quad mesh optimization, "UntangleMeshGeometry" for untangling). If @code{force} is set apply the optimization also to discrete entities. If @code{dimTags} (given as a vector of (dim, tag) pairs) is given, only apply the optimizer to the given entities.

@table @asis
@item Input:
@code{method = ""} (string), @code{force = False} (boolean), @code{niter = 1} (integer), @code{dimTags = []} (vector of pairs of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L692,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L595,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2086,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1762,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_2d.py#L140,naca_boundary_layer_2d.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_3d.py#L167,naca_boundary_layer_3d.py}, @url{@value{GITLAB-PREFIX}/examples/api/opt.py#L12,opt.py}, @url{@value{GITLAB-PREFIX}/examples/api/tube_boundary_layer.py#L53,tube_boundary_layer.py})
@end table

@item gmsh/model/mesh/recombine
Recombine the mesh of the current model.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L700,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L602,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2118,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1778,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/stl_to_mesh.py#L29,stl_to_mesh.py})
@end table

@item gmsh/model/mesh/refine
Refine the mesh of the current model by uniformly splitting the elements.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L705,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L605,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2131,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1792,Julia}
@end table

@item gmsh/model/mesh/setOrder
Set the order of the elements in the mesh of the current model to @code{order}.

@table @asis
@item Input:
@code{order} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L710,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L608,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2144,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1809,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x6.cpp#L27,x6.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x6.py#L27,x6.py}, @url{@value{GITLAB-PREFIX}/examples/api/hybrid_order.py#L18,hybrid_order.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_2d.py#L139,naca_boundary_layer_2d.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_3d.py#L166,naca_boundary_layer_3d.py}, @url{@value{GITLAB-PREFIX}/examples/api/tube_boundary_layer.py#L52,tube_boundary_layer.py})
@end table

@item gmsh/model/mesh/getLastEntityError
Get the last entities @code{dimTags} (as a vector of (dim, tag) pairs) where a meshing error occurred. Currently only populated by the new 3D meshing algorithms.

@table @asis
@item Input:
-
@item Output:
@code{dimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L717,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L614,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2162,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1831,Julia}
@end table

@item gmsh/model/mesh/getLastNodeError
Get the last node tags @code{nodeTags} where a meshing error occurred. Currently only populated by the new 3D meshing algorithms.

@table @asis
@item Input:
-
@item Output:
@code{nodeTags} (vector of sizes)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L723,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L619,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2186,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1856,Julia}
@end table

@item gmsh/model/mesh/clear
Clear the mesh, i.e. delete all the nodes and elements, for the entities @code{dimTags}, given as a vector of (dim, tag) pairs. If @code{dimTags} is empty, clear the whole mesh. Note that the mesh of an entity can only be cleared if this entity is not on the boundary of another entity with a non-empty mesh.

@table @asis
@item Input:
@code{dimTags = []} (vector of pairs of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L732,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L627,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2209,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1880,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/copy_mesh.py#L53,copy_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/flatten.py#L32,flatten.py})
@end table

@item gmsh/model/mesh/reverse
Reverse the orientation of the elements in the entities @code{dimTags}, given as a vector of (dim, tag) pairs. If @code{dimTags} is empty, reverse the orientation of the elements in the whole mesh.

@table @asis
@item Input:
@code{dimTags = []} (vector of pairs of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L739,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L633,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2231,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1901,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/mirror_mesh.py#L47,mirror_mesh.py})
@end table

@item gmsh/model/mesh/reverseElements
Reverse the orientation of the elements with tags @code{elementTags}.

@table @asis
@item Input:
@code{elementTags} (vector of sizes)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L744,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L637,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2251,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1920,Julia}
@end table

@item gmsh/model/mesh/affineTransform
Apply the affine transformation @code{affineTransform} (16 entries of a 4x4 matrix, by row; only the 12 first can be provided for convenience) to the coordinates of the nodes classified on the entities @code{dimTags}, given as a vector of (dim, tag) pairs. If @code{dimTags} is empty, transform all the nodes in the mesh.

@table @asis
@item Input:
@code{affineTransform} (vector of doubles), @code{dimTags = []} (vector of pairs of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L753,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L645,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2270,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1942,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/flatten2.py#L15,flatten2.py})
@end table

@item gmsh/model/mesh/getNodes
Get the nodes classified on the entity of dimension @code{dim} and tag @code{tag}. If @code{tag} < 0, get the nodes for all entities of dimension @code{dim}. If @code{dim} and @code{tag} are negative, get all the nodes in the mesh. @code{nodeTags} contains the node tags (their unique, strictly positive identification numbers). @code{coord} is a vector of length 3 times the length of @code{nodeTags} that contains the x, y, z coordinates of the nodes, concatenated: [n1x, n1y, n1z, n2x, ...]. If @code{dim} >= 0 and @code{returnParamtricCoord} is set, @code{parametricCoord} contains the parametric coordinates ([u1, u2, ...] or [u1, v1, u2, ...]) of the nodes, if available. The length of @code{parametricCoord} can be 0 or @code{dim} times the length of @code{nodeTags}. If @code{includeBoundary} is set, also return the nodes classified on the boundary of the entity (which will be reparametrized on the entity if @code{dim} >= 0 in order to compute their parametric coordinates).

@table @asis
@item Input:
@code{dim = -1} (integer), @code{tag = -1} (integer), @code{includeBoundary = False} (boolean), @code{returnParametricCoord = True} (boolean)
@item Output:
@code{nodeTags} (vector of sizes), @code{coord} (vector of doubles), @code{parametricCoord} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L771,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L662,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2296,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1981,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x1.cpp#L79,x1.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x4.cpp#L65,x4.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x5.cpp#L51,x5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x1.py#L70,x1.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x4.py#L61,x4.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x5.py#L43,x5.py}, @url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L15,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/copy_mesh.py#L20,copy_mesh.py}, ...)
@end table

@item gmsh/model/mesh/getNodesByElementType
Get the nodes classified on the entity of tag @code{tag}, for all the elements of type @code{elementType}. The other arguments are treated as in @code{getNodes}.

@table @asis
@item Input:
@code{elementType} (integer), @code{tag = -1} (integer), @code{returnParametricCoord = True} (boolean)
@item Output:
@code{nodeTags} (vector of sizes), @code{coord} (vector of doubles), @code{parametricCoord} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L783,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L673,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2347,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2016,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/stl_to_brep.py#L19,stl_to_brep.py})
@end table

@item gmsh/model/mesh/getNode
Get the coordinates and the parametric coordinates (if any) of the node with tag @code{tag}, as well as the dimension @code{dim} and tag @code{tag} of the entity on which the node is classified. This function relies on an internal cache (a vector in case of dense node numbering, a map otherwise); for large meshes accessing nodes in bulk is often preferable.

@table @asis
@item Input:
@code{nodeTag} (size)
@item Output:
@code{coord} (vector of doubles), @code{parametricCoord} (vector of doubles), @code{dim} (integer), @code{tag} (integer)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L797,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L686,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2385,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2053,Julia}
@end table

@item gmsh/model/mesh/setNode
Set the coordinates and the parametric coordinates (if any) of the node with tag @code{tag}. This function relies on an internal cache (a vector in case of dense node numbering, a map otherwise); for large meshes accessing nodes in bulk is often preferable.

@table @asis
@item Input:
@code{nodeTag} (size), @code{coord} (vector of doubles), @code{parametricCoord} (vector of doubles)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L809,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L697,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2426,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2084,Julia}
@end table

@item gmsh/model/mesh/rebuildNodeCache
Rebuild the node cache.

@table @asis
@item Input:
@code{onlyIfNecessary = True} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L816,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L703,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2453,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2102,Julia}
@end table

@item gmsh/model/mesh/rebuildElementCache
Rebuild the element cache.

@table @asis
@item Input:
@code{onlyIfNecessary = True} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L821,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L707,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2471,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2120,Julia}
@end table

@item gmsh/model/mesh/getNodesForPhysicalGroup
Get the nodes from all the elements belonging to the physical group of dimension @code{dim} and tag @code{tag}. @code{nodeTags} contains the node tags; @code{coord} is a vector of length 3 times the length of @code{nodeTags} that contains the x, y, z coordinates of the nodes, concatenated: [n1x, n1y, n1z, n2x, ...].

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{nodeTags} (vector of sizes), @code{coord} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L829,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L714,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2489,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2146,Julia}
@end table

@item gmsh/model/mesh/getMaxNodeTag
Get the maximum tag @code{maxTag} of a node in the mesh.

@table @asis
@item Input:
-
@item Output:
@code{maxTag} (size)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L837,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L721,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2523,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2172,Julia}
@end table

@item gmsh/model/mesh/addNodes
Add nodes classified on the model entity of dimension @code{dim} and tag @code{tag}. @code{nodeTags} contains the node tags (their unique, strictly positive identification numbers). @code{coord} is a vector of length 3 times the length of @code{nodeTags} that contains the x, y, z coordinates of the nodes, concatenated: [n1x, n1y, n1z, n2x, ...]. The optional @code{parametricCoord} vector contains the parametric coordinates of the nodes, if any. The length of @code{parametricCoord} can be 0 or @code{dim} times the length of @code{nodeTags}. If the @code{nodeTags} vector is empty, new tags are automatically assigned to the nodes.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{nodeTags} (vector of sizes), @code{coord} (vector of doubles), @code{parametricCoord = []} (vector of doubles)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L850,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L733,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2545,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2202,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x2.cpp#L92,x2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x4.cpp#L27,x4.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x2.py#L88,x2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x4.py#L25,x4.py}, @url{@value{GITLAB-PREFIX}/examples/api/copy_mesh.py#L29,copy_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/discrete.py#L12,discrete.py}, @url{@value{GITLAB-PREFIX}/examples/api/flatten.py#L38,flatten.py}, ...)
@end table

@item gmsh/model/mesh/reclassifyNodes
Reclassify all nodes on their associated model entity, based on the elements. Can be used when importing nodes in bulk (e.g. by associating them all to a single volume), to reclassify them correctly on model surfaces, curves, etc. after the elements have been set.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L862,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L744,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2582,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2220,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x2.cpp#L107,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x2.py#L102,x2.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain.py#L66,terrain.py})
@end table

@item gmsh/model/mesh/relocateNodes
Relocate the nodes classified on the entity of dimension @code{dim} and tag @code{tag} using their parametric coordinates. If @code{tag} < 0, relocate the nodes for all entities of dimension @code{dim}. If @code{dim} and @code{tag} are negative, relocate all the nodes in the mesh.

@table @asis
@item Input:
@code{dim = -1} (integer), @code{tag = -1} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L870,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L750,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2599,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2242,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/relocate_nodes.py#L48,relocate_nodes.py})
@end table

@item gmsh/model/mesh/getElements
Get the elements classified on the entity of dimension @code{dim} and tag @code{tag}. If @code{tag} < 0, get the elements for all entities of dimension @code{dim}. If @code{dim} and @code{tag} are negative, get all the elements in the mesh. @code{elementTypes} contains the MSH types of the elements (e.g. @code{2} for 3-node triangles: see @code{getElementProperties} to obtain the properties for a given element type). @code{elementTags} is a vector of the same length as @code{elementTypes}; each entry is a vector containing the tags (unique, strictly positive identifiers) of the elements of the corresponding type. @code{nodeTags} is also a vector of the same length as @code{elementTypes}; each entry is a vector of length equal to the number of elements of the given type times the number N of nodes for this type of element, that contains the node tags of all the elements of the given type, concatenated: [e1n1, e1n2, ..., e1nN, e2n1, ...].

@table @asis
@item Input:
@code{dim = -1} (integer), @code{tag = -1} (integer)
@item Output:
@code{elementTypes} (vector of integers), @code{elementTags} (vector of vectors of sizes), @code{nodeTags} (vector of vectors of sizes)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L888,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L767,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2622,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2277,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x1.cpp#L84,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x1.py#L73,x1.py}, @url{@value{GITLAB-PREFIX}/examples/api/copy_mesh.py#L21,copy_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/explore.py#L21,explore.py}, @url{@value{GITLAB-PREFIX}/examples/api/flatten.py#L29,flatten.py}, @url{@value{GITLAB-PREFIX}/examples/api/mesh_quality.py#L11,mesh_quality.py}, ...)
@end table

@item gmsh/model/mesh/getElement
Get the type and node tags of the element with tag @code{tag}, as well as the dimension @code{dim} and tag @code{tag} of the entity on which the element is classified. This function relies on an internal cache (a vector in case of dense element numbering, a map otherwise); for large meshes accessing elements in bulk is often preferable.

@table @asis
@item Input:
@code{elementTag} (size)
@item Output:
@code{elementType} (integer), @code{nodeTags} (vector of sizes), @code{dim} (integer), @code{tag} (integer)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L901,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L779,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2669,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2320,Julia}
@end table

@item gmsh/model/mesh/getElementByCoordinates
Search the mesh for an element located at coordinates (@code{x}, @code{y}, @code{z}). This function performs a search in a spatial octree. If an element is found, return its tag, type and node tags, as well as the local coordinates (@code{u}, @code{v}, @code{w}) within the reference element corresponding to search location. If @code{dim} is >= 0, only search for elements of the given dimension. If @code{strict} is not set, use a tolerance to find elements near the search location.

@table @asis
@item Input:
@code{x} (double), @code{y} (double), @code{z} (double), @code{dim = -1} (integer), @code{strict = False} (boolean)
@item Output:
@code{elementTag} (size), @code{elementType} (integer), @code{nodeTags} (vector of sizes), @code{u} (double), @code{v} (double), @code{w} (double)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L916,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L792,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2710,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2361,Julia}
@end table

@item gmsh/model/mesh/getElementsByCoordinates
Search the mesh for element(s) located at coordinates (@code{x}, @code{y}, @code{z}). This function performs a search in a spatial octree. Return the tags of all found elements in @code{elementTags}. Additional information about the elements can be accessed through @code{getElement} and @code{getLocalCoordinatesInElement}. If @code{dim} is >= 0, only search for elements of the given dimension. If @code{strict} is not set, use a tolerance to find elements near the search location.

@table @asis
@item Input:
@code{x} (double), @code{y} (double), @code{z} (double), @code{dim = -1} (integer), @code{strict = False} (boolean)
@item Output:
@code{elementTags} (vector of sizes)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L937,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L811,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2768,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2399,Julia}
@end table

@item gmsh/model/mesh/getLocalCoordinatesInElement
Return the local coordinates (@code{u}, @code{v}, @code{w}) within the element @code{elementTag} corresponding to the model coordinates (@code{x}, @code{y}, @code{z}). This function relies on an internal cache (a vector in case of dense element numbering, a map otherwise); for large meshes accessing elements in bulk is often preferable.

@table @asis
@item Input:
@code{elementTag} (size), @code{x} (double), @code{y} (double), @code{z} (double)
@item Output:
@code{u} (double), @code{v} (double), @code{w} (double)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L951,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L824,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2805,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2431,Julia}
@end table

@item gmsh/model/mesh/getElementTypes
Get the types of elements in the entity of dimension @code{dim} and tag @code{tag}. If @code{tag} < 0, get the types for all entities of dimension @code{dim}. If @code{dim} and @code{tag} are negative, get all the types in the mesh.

@table @asis
@item Input:
@code{dim = -1} (integer), @code{tag = -1} (integer)
@item Output:
@code{elementTypes} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L964,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L836,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2848,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2458,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x6.cpp#L38,x6.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x6.py#L33,x6.py}, @url{@value{GITLAB-PREFIX}/examples/api/poisson.py#L92,poisson.py})
@end table

@item gmsh/model/mesh/getElementType
Return an element type given its family name @code{familyName} ("Point", "Line", "Triangle", "Quadrangle", "Tetrahedron", "Pyramid", "Prism", "Hexahedron") and polynomial order @code{order}. If @code{serendip} is true, return the corresponding serendip element type (element without interior nodes).

@table @asis
@item Input:
@code{familyName} (string), @code{order} (integer), @code{serendip = False} (boolean)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L974,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L845,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2876,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2486,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x7.cpp#L32,x7.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x7.py#L29,x7.py})
@end table

@item gmsh/model/mesh/getElementProperties
Get the properties of an element of type @code{elementType}: its name (@code{elementName}), dimension (@code{dim}), order (@code{order}), number of nodes (@code{numNodes}), local coordinates of the nodes in the reference element (@code{localNodeCoord} vector, of length @code{dim} times @code{numNodes}) and number of primary (first order) nodes (@code{numPrimaryNodes}).

@table @asis
@item Input:
@code{elementType} (integer)
@item Output:
@code{elementName} (string), @code{dim} (integer), @code{order} (integer), @code{numNodes} (integer), @code{localNodeCoord} (vector of doubles), @code{numPrimaryNodes} (integer)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L985,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L855,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2904,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2516,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x1.cpp#L152,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x1.py#L117,x1.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x6.py#L38,x6.py}, @url{@value{GITLAB-PREFIX}/examples/api/explore.py#L33,explore.py}, @url{@value{GITLAB-PREFIX}/examples/api/poisson.py#L111,poisson.py})
@end table

@item gmsh/model/mesh/getElementsByType
Get the elements of type @code{elementType} classified on the entity of tag @code{tag}. If @code{tag} < 0, get the elements for all entities. @code{elementTags} is a vector containing the tags (unique, strictly positive identifiers) of the elements of the corresponding type. @code{nodeTags} is a vector of length equal to the number of elements of the given type times the number N of nodes for this type of element, that contains the node tags of all the elements of the given type, concatenated: [e1n1, e1n2, ..., e1nN, e2n1, ...]. If @code{numTasks} > 1, only compute and return the part of the data indexed by @code{task} (for C++ only; output vectors must be preallocated).

@table @asis
@item Input:
@code{elementType} (integer), @code{tag = -1} (integer), @code{task = 0} (size), @code{numTasks = 1} (size)
@item Output:
@code{elementTags} (vector of sizes), @code{nodeTags} (vector of sizes)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1004,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L873,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2953,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2558,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x7.cpp#L58,x7.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x7.py#L50,x7.py}, @url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L18,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/neighbors.py#L15,neighbors.py}, @url{@value{GITLAB-PREFIX}/examples/api/poisson.py#L95,poisson.py}, @url{@value{GITLAB-PREFIX}/examples/api/stl_to_brep.py#L18,stl_to_brep.py})
@end table

@item gmsh/model/mesh/getMaxElementTag
Get the maximum tag @code{maxTag} of an element in the mesh.

@table @asis
@item Input:
-
@item Output:
@code{maxTag} (size)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1014,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L882,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2996,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2584,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x7.cpp#L78,x7.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x7.py#L74,x7.py})
@end table

@item gmsh/model/mesh/preallocateElementsByType
Preallocate data before calling @code{getElementsByType} with @code{numTasks} > 1. For C++ only.

@table @asis
@item Input:
@code{elementType} (integer), @code{elementTag} (boolean), @code{nodeTag} (boolean), @code{tag = -1} (integer)
@item Output:
@code{elementTags} (vector of sizes), @code{nodeTags} (vector of sizes)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1020,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L887,C}
@end table

@item gmsh/model/mesh/getElementQualities
Get the quality @code{elementQualities} of the elements with tags @code{elementTags}. @code{qualityType} is the requested quality measure: "minDetJac" and "maxDetJac" for the adaptively computed minimal and maximal Jacobian determinant, "minSJ" for the sampled minimal scaled jacobien, "minSICN" for the sampled minimal signed inverted condition number, "minSIGE" for the sampled signed inverted gradient error, "gamma" for the ratio of the inscribed to circumcribed sphere radius, "innerRadius" for the inner radius, "outerRadius" for the outerRadius, "minIsotropy" for the minimum isotropy measure, "angleShape" for the angle shape measure, "minEdge" for the minimum straight edge length, "maxEdge" for the maximum straight edge length, "volume" for the volume. If @code{numTasks} > 1, only compute and return the part of the data indexed by @code{task} (for C++ only; output vector must be preallocated).

@table @asis
@item Input:
@code{elementTags} (vector of sizes), @code{qualityName = "minSICN"} (string), @code{task = 0} (size), @code{numTasks = 1} (size)
@item Output:
@code{elementsQuality} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1042,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L908,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3018,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2620,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/mesh_quality.py#L12,mesh_quality.py}, @url{@value{GITLAB-PREFIX}/examples/api/view_element_size.py#L16,view_element_size.py})
@end table

@item gmsh/model/mesh/addElements
Add elements classified on the entity of dimension @code{dim} and tag @code{tag}. @code{types} contains the MSH types of the elements (e.g. @code{2} for 3-node triangles: see the Gmsh reference manual). @code{elementTags} is a vector of the same length as @code{types}; each entry is a vector containing the tags (unique, strictly positive identifiers) of the elements of the corresponding type. @code{nodeTags} is also a vector of the same length as @code{types}; each entry is a vector of length equal to the number of elements of the given type times the number N of nodes per element, that contains the node tags of all the elements of the given type, concatenated: [e1n1, e1n2, ..., e1nN, e2n1, ...].

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{elementTypes} (vector of integers), @code{elementTags} (vector of vectors of integers (size)), @code{nodeTags} (vector of vectors of integers (size))
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1060,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L925,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3061,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2653,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/copy_mesh.py#L30,copy_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/discrete.py#L32,discrete.py}, @url{@value{GITLAB-PREFIX}/examples/api/flatten.py#L39,flatten.py}, @url{@value{GITLAB-PREFIX}/examples/api/mesh_from_discrete_curve.py#L21,mesh_from_discrete_curve.py}, @url{@value{GITLAB-PREFIX}/examples/api/mirror_mesh.py#L43,mirror_mesh.py}, ...)
@end table

@item gmsh/model/mesh/addElementsByType
Add elements of type @code{elementType} classified on the entity of tag @code{tag}. @code{elementTags} contains the tags (unique, strictly positive identifiers) of the elements of the corresponding type. @code{nodeTags} is a vector of length equal to the number of elements times the number N of nodes per element, that contains the node tags of all the elements, concatenated: [e1n1, e1n2, ..., e1nN, e2n1, ...]. If the @code{elementTag} vector is empty, new tags are automatically assigned to the elements.

@table @asis
@item Input:
@code{tag} (integer), @code{elementType} (integer), @code{elementTags} (vector of sizes), @code{nodeTags} (vector of sizes)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1075,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L939,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3099,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2682,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x2.cpp#L98,x2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x4.cpp#L29,x4.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x7.cpp#L89,x7.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x2.py#L94,x2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x4.py#L27,x4.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x7.py#L86,x7.py}, @url{@value{GITLAB-PREFIX}/examples/api/import_perf.py#L70,import_perf.py}, @url{@value{GITLAB-PREFIX}/examples/api/raw_tetrahedralization.py#L21,raw_tetrahedralization.py}, ...)
@end table

@item gmsh/model/mesh/getIntegrationPoints
Get the numerical quadrature information for the given element type @code{elementType} and integration rule @code{integrationType}, where @code{integrationType} concatenates the integration rule family name with the desired order (e.g. "Gauss4" for a quadrature suited for integrating 4th order polynomials). The "CompositeGauss" family uses tensor-product rules based the 1D Gauss-Legendre rule; the "Gauss" family uses an economic scheme when available (i.e. with a minimal number of points), and falls back to "CompositeGauss" otherwise. Note that integration points for the "Gauss" family can fall outside of the reference element for high-order rules. @code{localCoord} contains the u, v, w coordinates of the G integration points in the reference element: [g1u, g1v, g1w, ..., gGu, gGv, gGw]. @code{weights} contains the associated weights: [g1q, ..., gGq].

@table @asis
@item Input:
@code{elementType} (integer), @code{integrationType} (string)
@item Output:
@code{localCoord} (vector of doubles), @code{weights} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1094,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L957,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3131,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2715,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x6.py#L46,x6.py}, @url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L30,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/poisson.py#L112,poisson.py})
@end table

@item gmsh/model/mesh/getJacobians
Get the Jacobians of all the elements of type @code{elementType} classified on the entity of tag @code{tag}, at the G evaluation points @code{localCoord} given as concatenated u, v, w coordinates in the reference element [g1u, g1v, g1w, ..., gGu, gGv, gGw]. Data is returned by element, with elements in the same order as in @code{getElements} and @code{getElementsByType}. @code{jacobians} contains for each element the 9 entries of the 3x3 Jacobian matrix at each evaluation point. The matrix is returned by column: [e1g1Jxu, e1g1Jyu, e1g1Jzu, e1g1Jxv, ..., e1g1Jzw, e1g2Jxu, ..., e1gGJzw, e2g1Jxu, ...], with Jxu = dx/du, Jyu = dy/du, etc. @code{determinants} contains for each element the determinant of the Jacobian matrix at each evaluation point: [e1g1, e1g2, ... e1gG, e2g1, ...]. @code{coord} contains for each element the x, y, z coordinates of the evaluation points. If @code{tag} < 0, get the Jacobian data for all entities. If @code{numTasks} > 1, only compute and return the part of the data indexed by @code{task} (for C++ only; output vectors must be preallocated).

@table @asis
@item Input:
@code{elementType} (integer), @code{localCoord} (vector of doubles), @code{tag = -1} (integer), @code{task = 0} (size), @code{numTasks = 1} (size)
@item Output:
@code{jacobians} (vector of doubles), @code{determinants} (vector of doubles), @code{coord} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1116,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L978,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3173,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2761,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x6.py#L67,x6.py}, @url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L31,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/poisson.py#L131,poisson.py})
@end table

@item gmsh/model/mesh/preallocateJacobians
Preallocate data before calling @code{getJacobians} with @code{numTasks} > 1. For C++ only.

@table @asis
@item Input:
@code{elementType} (integer), @code{numEvaluationPoints} (integer), @code{allocateJacobians} (boolean), @code{allocateDeterminants} (boolean), @code{allocateCoord} (boolean), @code{tag = -1} (integer)
@item Output:
@code{jacobians} (vector of doubles), @code{determinants} (vector of doubles), @code{coord} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1129,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L990,C}
@end table

@item gmsh/model/mesh/getJacobian
Get the Jacobian for a single element @code{elementTag}, at the G evaluation points @code{localCoord} given as concatenated u, v, w coordinates in the reference element [g1u, g1v, g1w, ..., gGu, gGv, gGw]. @code{jacobians} contains the 9 entries of the 3x3 Jacobian matrix at each evaluation point. The matrix is returned by column: [e1g1Jxu, e1g1Jyu, e1g1Jzu, e1g1Jxv, ..., e1g1Jzw, e1g2Jxu, ..., e1gGJzw, e2g1Jxu, ...], with Jxu = dx/du, Jyu = dy/du, etc. @code{determinants} contains the determinant of the Jacobian matrix at each evaluation point. @code{coord} contains the x, y, z coordinates of the evaluation points. This function relies on an internal cache (a vector in case of dense element numbering, a map otherwise); for large meshes accessing Jacobians in bulk is often preferable.

@table @asis
@item Input:
@code{elementTag} (size), @code{localCoord} (vector of doubles)
@item Output:
@code{jacobians} (vector of doubles), @code{determinants} (vector of doubles), @code{coord} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1152,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1012,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3229,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2803,Julia}
@end table

@item gmsh/model/mesh/getBasisFunctions
Get the basis functions of the element of type @code{elementType} at the evaluation points @code{localCoord} (given as concatenated u, v, w coordinates in the reference element [g1u, g1v, g1w, ..., gGu, gGv, gGw]), for the function space @code{functionSpaceType}. Currently supported function spaces include "Lagrange" and "GradLagrange" for isoparametric Lagrange basis functions and their gradient in the u, v, w coordinates of the reference element; "LagrangeN" and "GradLagrangeN", with N = 1, 2, ..., for N-th order Lagrange basis functions; "H1LegendreN" and "GradH1LegendreN", with N = 1, 2, ..., for N-th order hierarchical H1 Legendre functions; "HcurlLegendreN" and "CurlHcurlLegendreN", with N = 1, 2, ..., for N-th order curl-conforming basis functions. @code{numComponents} returns the number C of components of a basis function (e.g. 1 for scalar functions and 3 for vector functions). @code{basisFunctions} returns the value of the N basis functions at the evaluation points, i.e. [g1f1, g1f2, ..., g1fN, g2f1, ...] when C == 1 or [g1f1u, g1f1v, g1f1w, g1f2u, ..., g1fNw, g2f1u, ...] when C == 3. For basis functions that depend on the orientation of the elements, all values for the first orientation are returned first, followed by values for the second, etc. @code{numOrientations} returns the overall number of orientations. If the @code{wantedOrientations} vector is not empty, only return the values for the desired orientation indices.

@table @asis
@item Input:
@code{elementType} (integer), @code{localCoord} (vector of doubles), @code{functionSpaceType} (string), @code{wantedOrientations = []} (vector of integers)
@item Output:
@code{numComponents} (integer), @code{basisFunctions} (vector of doubles), @code{numOrientations} (integer)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1180,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1039,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3275,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2856,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x6.py#L57,x6.py}, @url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L32,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/poisson.py#L114,poisson.py})
@end table

@item gmsh/model/mesh/getBasisFunctionsOrientation
Get the orientation index of the elements of type @code{elementType} in the entity of tag @code{tag}. The arguments have the same meaning as in @code{getBasisFunctions}. @code{basisFunctionsOrientation} is a vector giving for each element the orientation index in the values returned by @code{getBasisFunctions}. For Lagrange basis functions the call is superfluous as it will return a vector of zeros. If @code{numTasks} > 1, only compute and return the part of the data indexed by @code{task} (for C++ only; output vector must be preallocated).

@table @asis
@item Input:
@code{elementType} (integer), @code{functionSpaceType} (string), @code{tag = -1} (integer), @code{task = 0} (size), @code{numTasks = 1} (size)
@item Output:
@code{basisFunctionsOrientation} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1198,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1056,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3335,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2892,Julia}
@end table

@item gmsh/model/mesh/getBasisFunctionsOrientation@-ForElement
Get the orientation of a single element @code{elementTag}.

@table @asis
@item Input:
@code{elementTag} (size), @code{functionSpaceType} (string)
@item Output:
@code{basisFunctionsOrientation} (integer)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1208,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1065,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3374,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2917,Julia}
@end table

@item gmsh/model/mesh/getNumberOfOrientations
Get the number of possible orientations for elements of type @code{elementType} and function space named @code{functionSpaceType}.

@table @asis
@item Input:
@code{elementType} (integer), @code{functionSpaceType} (string)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1216,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1072,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3400,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2940,Julia}
@end table

@item gmsh/model/mesh/preallocateBasisFunctions@-Orientation
Preallocate data before calling @code{getBasisFunctionsOrientation} with @code{numTasks} > 1. For C++ only.

@table @asis
@item Input:
@code{elementType} (integer), @code{tag = -1} (integer)
@item Output:
@code{basisFunctionsOrientation} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1223,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1078,C}
@end table

@item gmsh/model/mesh/getEdges
Get the global unique mesh edge identifiers @code{edgeTags} and orientations @code{edgeOrientation} for an input list of node tag pairs defining these edges, concatenated in the vector @code{nodeTags}. Mesh edges are created e.g. by @code{createEdges()}, @code{getKeys()} or @code{addEdges()}. The reference positive orientation is n1 < n2, where n1 and n2 are the tags of the two edge nodes, which corresponds to the local orientation of edge-based basis functions as well.

@table @asis
@item Input:
@code{nodeTags} (vector of sizes)
@item Output:
@code{edgeTags} (vector of sizes), @code{edgeOrientations} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1236,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1090,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3424,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2967,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x7.cpp#L51,x7.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x7.py#L44,x7.py})
@end table

@item gmsh/model/mesh/getFaces
Get the global unique mesh face identifiers @code{faceTags} and orientations @code{faceOrientations} for an input list of a multiple of three (if @code{faceType} == 3) or four (if @code{faceType} == 4) node tags defining these faces, concatenated in the vector @code{nodeTags}. Mesh faces are created e.g. by @code{createFaces()}, @code{getKeys()} or @code{addFaces()}.

@table @asis
@item Input:
@code{faceType} (integer), @code{nodeTags} (vector of sizes)
@item Output:
@code{faceTags} (vector of sizes), @code{faceOrientations} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1247,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1100,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3460,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3000,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x7.cpp#L52,x7.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x7.py#L45,x7.py})
@end table

@item gmsh/model/mesh/createEdges
Create unique mesh edges for the entities @code{dimTags}, given as a vector of (dim, tag) pairs.

@table @asis
@item Input:
@code{dimTags = []} (vector of pairs of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1256,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1108,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3496,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3025,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x7.cpp#L45,x7.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x7.py#L40,x7.py})
@end table

@item gmsh/model/mesh/createFaces
Create unique mesh faces for the entities @code{dimTags}, given as a vector of (dim, tag) pairs.

@table @asis
@item Input:
@code{dimTags = []} (vector of pairs of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1262,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1113,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3516,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3046,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x7.cpp#L46,x7.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x7.py#L41,x7.py})
@end table

@item gmsh/model/mesh/getAllEdges
Get the global unique identifiers @code{edgeTags} and the nodes @code{edgeNodes} of the edges in the mesh. Mesh edges are created e.g. by @code{createEdges()}, @code{getKeys()} or addEdges().

@table @asis
@item Input:
-
@item Output:
@code{edgeTags} (vector of sizes), @code{edgeNodes} (vector of sizes)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1269,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1119,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3536,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3071,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x7.cpp#L103,x7.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x7.py#L98,x7.py})
@end table

@item gmsh/model/mesh/getAllFaces
Get the global unique identifiers @code{faceTags} and the nodes @code{faceNodes} of the faces of type @code{faceType} in the mesh. Mesh faces are created e.g. by @code{createFaces()}, @code{getKeys()} or addFaces().

@table @asis
@item Input:
@code{faceType} (integer)
@item Output:
@code{faceTags} (vector of sizes), @code{faceNodes} (vector of sizes)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1277,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1126,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3565,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3101,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x7.cpp#L104,x7.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x7.py#L99,x7.py})
@end table

@item gmsh/model/mesh/addEdges
Add mesh edges defined by their global unique identifiers @code{edgeTags} and their nodes @code{edgeNodes}.

@table @asis
@item Input:
@code{edgeTags} (vector of sizes), @code{edgeNodes} (vector of sizes)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1285,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1133,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3596,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3127,Julia}
@end table

@item gmsh/model/mesh/addFaces
Add mesh faces of type @code{faceType} defined by their global unique identifiers @code{faceTags} and their nodes @code{faceNodes}.

@table @asis
@item Input:
@code{faceType} (integer), @code{faceTags} (vector of sizes), @code{faceNodes} (vector of sizes)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1292,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1139,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3619,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3148,Julia}
@end table

@item gmsh/model/mesh/getKeys
Generate the pair of keys for the elements of type @code{elementType} in the entity of tag @code{tag}, for the @code{functionSpaceType} function space. Each pair (@code{typeKey}, @code{entityKey}) uniquely identifies a basis function in the function space. If @code{returnCoord} is set, the @code{coord} vector contains the x, y, z coordinates locating basis functions for sorting purposes. Warning: this is an experimental feature and will probably change in a future release.

@table @asis
@item Input:
@code{elementType} (integer), @code{functionSpaceType} (string), @code{tag = -1} (integer), @code{returnCoord = True} (boolean)
@item Output:
@code{typeKeys} (vector of integers), @code{entityKeys} (vector of sizes), @code{coord} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1305,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1151,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3644,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3179,Julia}
@end table

@item gmsh/model/mesh/getKeysForElement
Get the pair of keys for a single element @code{elementTag}.

@table @asis
@item Input:
@code{elementTag} (size), @code{functionSpaceType} (string), @code{returnCoord = True} (boolean)
@item Output:
@code{typeKeys} (vector of integers), @code{entityKeys} (vector of sizes), @code{coord} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1316,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1161,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3689,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3213,Julia}
@end table

@item gmsh/model/mesh/getNumberOfKeys
Get the number of keys by elements of type @code{elementType} for function space named @code{functionSpaceType}.

@table @asis
@item Input:
@code{elementType} (integer), @code{functionSpaceType} (string)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1327,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1171,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3726,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3244,Julia}
@end table

@item gmsh/model/mesh/getKeysInformation
Get information about the pair of @code{keys}. @code{infoKeys} returns information about the functions associated with the pairs (@code{typeKeys}, @code{entityKey}). @code{infoKeys[0].first} describes the type of function (0 for  vertex function, 1 for edge function, 2 for face function and 3 for bubble function). @code{infoKeys[0].second} gives the order of the function associated with the key. Warning: this is an experimental feature and will probably change in a future release.

@table @asis
@item Input:
@code{typeKeys} (vector of integers), @code{entityKeys} (vector of sizes), @code{elementType} (integer), @code{functionSpaceType} (string)
@item Output:
@code{infoKeys} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1339,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1182,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3750,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3274,Julia}
@end table

@item gmsh/model/mesh/getBarycenters
Get the barycenters of all elements of type @code{elementType} classified on the entity of tag @code{tag}. If @code{primary} is set, only the primary nodes of the elements are taken into account for the barycenter calculation. If @code{fast} is set, the function returns the sum of the primary node coordinates (without normalizing by the number of nodes). If @code{tag} < 0, get the barycenters for all entities. If @code{numTasks} > 1, only compute and return the part of the data indexed by @code{task} (for C++ only; output vector must be preallocated).

@table @asis
@item Input:
@code{elementType} (integer), @code{tag} (integer), @code{fast} (boolean), @code{primary} (boolean), @code{task = 0} (size), @code{numTasks = 1} (size)
@item Output:
@code{barycenters} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1355,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1197,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3788,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3310,Julia}
@end table

@item gmsh/model/mesh/preallocateBarycenters
Preallocate data before calling @code{getBarycenters} with @code{numTasks} > 1. For C++ only.

@table @asis
@item Input:
@code{elementType} (integer), @code{tag = -1} (integer)
@item Output:
@code{barycenters} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1367,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1208,C}
@end table

@item gmsh/model/mesh/getElementEdgeNodes
Get the nodes on the edges of all elements of type @code{elementType} classified on the entity of tag @code{tag}. @code{nodeTags} contains the node tags of the edges for all the elements: [e1a1n1, e1a1n2, e1a2n1, ...]. Data is returned by element, with elements in the same order as in @code{getElements} and @code{getElementsByType}. If @code{primary} is set, only the primary (begin/end) nodes of the edges are returned. If @code{tag} < 0, get the edge nodes for all entities. If @code{numTasks} > 1, only compute and return the part of the data indexed by @code{task} (for C++ only; output vector must be preallocated).

@table @asis
@item Input:
@code{elementType} (integer), @code{tag = -1} (integer), @code{primary = False} (boolean), @code{task = 0} (size), @code{numTasks = 1} (size)
@item Output:
@code{nodeTags} (vector of sizes)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1381,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1221,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3829,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3345,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x7.cpp#L34,x7.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x7.py#L30,x7.py}, @url{@value{GITLAB-PREFIX}/examples/api/stl_to_brep.py#L20,stl_to_brep.py})
@end table

@item gmsh/model/mesh/getElementFaceNodes
Get the nodes on the faces of type @code{faceType} (3 for triangular faces, 4 for quadrangular faces) of all elements of type @code{elementType} classified on the entity of tag @code{tag}. @code{nodeTags} contains the node tags of the faces for all elements: [e1f1n1, ..., e1f1nFaceType, e1f2n1, ...]. Data is returned by element, with elements in the same order as in @code{getElements} and @code{getElementsByType}. If @code{primary} is set, only the primary (corner) nodes of the faces are returned. If @code{tag} < 0, get the face nodes for all entities. If @code{numTasks} > 1, only compute and return the part of the data indexed by @code{task} (for C++ only; output vector must be preallocated).

@table @asis
@item Input:
@code{elementType} (integer), @code{faceType} (integer), @code{tag = -1} (integer), @code{primary = False} (boolean), @code{task = 0} (size), @code{numTasks = 1} (size)
@item Output:
@code{nodeTags} (vector of sizes)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1399,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1238,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3868,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3382,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x7.cpp#L35,x7.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x7.py#L31,x7.py}, @url{@value{GITLAB-PREFIX}/examples/api/neighbors.py#L16,neighbors.py})
@end table

@item gmsh/model/mesh/getGhostElements
Get the ghost elements @code{elementTags} and their associated @code{partitions} stored in the ghost entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{elementTags} (vector of sizes), @code{partitions} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1411,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1249,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3910,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3409,Julia}
@end table

@item gmsh/model/mesh/setSize
Set a mesh size constraint on the model entities @code{dimTags}, given as a vector of (dim, tag) pairs. Currently only entities of dimension 0 (points) are handled.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{size} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1421,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1258,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3942,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3435,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t16.cpp#L115,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t18.cpp#L32,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L47,t21.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t16.py#L97,t16.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t18.py#L29,t18.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L35,t21.py}, @url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L80,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/extend_field.py#L18,extend_field.py}, ...)
@end table

@item gmsh/model/mesh/getSizes
Get the mesh size constraints (if any) associated with the model entities @code{dimTags}, given as a vector of (dim, tag) pairs. A zero entry in the output @code{sizes} vector indicates that no size constraint is specified on the corresponding entity.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers)
@item Output:
@code{sizes} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1430,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1266,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3965,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3461,Julia}
@end table

@item gmsh/model/mesh/setSizeAtParametricPoints
Set mesh size constraints at the given parametric points @code{parametricCoord} on the model entity of dimension @code{dim} and tag @code{tag}. Currently only entities of dimension 1 (lines) are handled.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{parametricCoord} (vector of doubles), @code{sizes} (vector of doubles)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1438,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1273,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3993,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3489,Julia}
@end table

@item gmsh/model/mesh/setSizeCallback
Set a mesh size callback for the current model. The callback function should take six arguments as input (@code{dim}, @code{tag}, @code{x}, @code{y}, @code{z} and @code{lc}). The first two integer arguments correspond to the dimension @code{dim} and tag @code{tag} of the entity being meshed. The next four double precision arguments correspond to the coordinates @code{x}, @code{y} and @code{z} around which to prescribe the mesh size and to the mesh size @code{lc} that would be prescribed if the callback had not been called. The callback function should return a double precision number specifying the desired mesh size; returning @code{lc} is equivalent to a no-op.

@table @asis
@item Input:
@code{callback} ()
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1454,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1288,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4021,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3514,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t10.cpp#L117,t10.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t10.py#L109,t10.py})
@end table

@item gmsh/model/mesh/removeSizeCallback
Remove the mesh size callback from the current model.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1459,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1292,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4051,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3531,Julia}
@end table

@item gmsh/model/mesh/setTransfiniteCurve
Set a transfinite meshing constraint on the curve @code{tag}, with @code{numNodes} nodes distributed according to @code{meshType} and @code{coef}. Currently supported types are "Progression" (geometrical progression with power @code{coef}), "Bump" (refinement toward both extremities of the curve) and "Beta" (beta law).

@table @asis
@item Input:
@code{tag} (integer), @code{numNodes} (integer), @code{meshType = "Progression"} (string), @code{coef = 1.} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1468,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1298,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4065,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3555,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x2.cpp#L155,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x2.py#L151,x2.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain.py#L149,terrain.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain_bspline.py#L43,terrain_bspline.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain_stl.py#L78,terrain_stl.py})
@end table

@item gmsh/model/mesh/setTransfiniteSurface
Set a transfinite meshing constraint on the surface @code{tag}. @code{arrangement} describes the arrangement of the triangles when the surface is not flagged as recombined: currently supported values are "Left", "Right", "AlternateLeft" and "AlternateRight". @code{cornerTags} can be used to specify the (3 or 4) corners of the transfinite interpolation explicitly; specifying the corners explicitly is mandatory if the surface has more that 3 or 4 points on its boundary.

@table @asis
@item Input:
@code{tag} (integer), @code{arrangement = "Left"} (string), @code{cornerTags = []} (vector of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1482,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1311,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4092,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3580,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x2.cpp#L158,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x2.py#L153,x2.py}, @url{@value{GITLAB-PREFIX}/examples/api/get_data_perf.py#L11,get_data_perf.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain.py#L151,terrain.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain_bspline.py#L45,terrain_bspline.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain_stl.py#L80,terrain_stl.py})
@end table

@item gmsh/model/mesh/setTransfiniteVolume
Set a transfinite meshing constraint on the surface @code{tag}. @code{cornerTags} can be used to specify the (6 or 8) corners of the transfinite interpolation explicitly.

@table @asis
@item Input:
@code{tag} (integer), @code{cornerTags = []} (vector of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1491,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1319,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4121,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3601,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x2.cpp#L162,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x2.py#L156,x2.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain.py#L154,terrain.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain_bspline.py#L48,terrain_bspline.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain_stl.py#L83,terrain_stl.py})
@end table

@item gmsh/model/mesh/setTransfiniteAutomatic
Set transfinite meshing constraints on the model entities in @code{dimTags}, given as a vector of (dim, tag) pairs. Transfinite meshing constraints are added to the curves of the quadrangular surfaces and to the faces of 6-sided volumes. Quadragular faces with a corner angle superior to @code{cornerAngle} (in radians) are ignored. The number of points is automatically determined from the sizing constraints. If @code{dimTag} is empty, the constraints are applied to all entities in the model. If @code{recombine} is true, the recombine flag is automatically set on the transfinite surfaces.  

@table @asis
@item Input:
@code{dimTags = []} (vector of pairs of integers), @code{cornerAngle = 2.35} (double), @code{recombine = True} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1505,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1331,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4144,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3628,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x2.cpp#L169,x2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x6.cpp#L22,x6.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x2.py#L162,x2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x6.py#L21,x6.py})
@end table

@item gmsh/model/mesh/setRecombine
Set a recombination meshing constraint on the model entity of dimension @code{dim} and tag @code{tag}. Currently only entities of dimension 2 (to recombine triangles into quadrangles) are supported; @code{angle} specifies the threshold angle for the simple recombination algorithm..

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{angle = 45.} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1515,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1340,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4174,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3653,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t11.cpp#L44,t11.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x2.cpp#L159,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t11.py#L42,t11.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x2.py#L154,x2.py}, @url{@value{GITLAB-PREFIX}/examples/api/poisson.py#L238,poisson.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain.py#L152,terrain.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain_bspline.py#L46,terrain_bspline.py}, ...)
@end table

@item gmsh/model/mesh/setSmoothing
Set a smoothing meshing constraint on the model entity of dimension @code{dim} and tag @code{tag}. @code{val} iterations of a Laplace smoother are applied.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{val} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1523,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1347,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4199,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3674,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x2.cpp#L160,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x2.py#L155,x2.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain.py#L153,terrain.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain_bspline.py#L47,terrain_bspline.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain_stl.py#L82,terrain_stl.py})
@end table

@item gmsh/model/mesh/setReverse
Set a reverse meshing constraint on the model entity of dimension @code{dim} and tag @code{tag}. If @code{val} is true, the mesh orientation will be reversed with respect to the natural mesh orientation (i.e. the orientation consistent with the orientation of the geometry). If @code{val} is false, the mesh is left as-is.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{val = True} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1534,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1357,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4222,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3697,Julia}
@end table

@item gmsh/model/mesh/setAlgorithm
Set the meshing algorithm on the model entity of dimension @code{dim} and tag @code{tag}. Supported values are those of the @code{Mesh.Algorithm} option, as listed in the Gmsh reference manual. Currently only supported for @code{dim} == 2.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{val} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1544,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1365,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4248,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3719,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L211,t5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L205,t5.py})
@end table

@item gmsh/model/mesh/setSizeFromBoundary
Force the mesh size to be extended from the boundary, or not, for the model entity of dimension @code{dim} and tag @code{tag}. Currently only supported for @code{dim} == 2.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{val} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1553,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1373,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4272,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3741,Julia}
@end table

@item gmsh/model/mesh/setCompound
Set a compound meshing constraint on the model entities of dimension @code{dim} and tags @code{tags}. During meshing, compound entities are treated as a single discrete entity, which is automatically reparametrized.

@table @asis
@item Input:
@code{dim} (integer), @code{tags} (vector of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1562,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1381,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4296,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3762,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t12.cpp#L83,t12.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t12.py#L79,t12.py})
@end table

@item gmsh/model/mesh/setOutwardOrientation
Set meshing constraints on the bounding surfaces of the volume of tag @code{tag} so that all surfaces are oriented with outward pointing normals; and if a mesh already exists, reorient it. Currently only available with the OpenCASCADE kernel, as it relies on the STL triangulation.

@table @asis
@item Input:
@code{tag} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1571,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1389,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4319,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3783,Julia}
@end table

@item gmsh/model/mesh/removeConstraints
Remove all meshing constraints from the model entities @code{dimTags}, given as a vector of (dim, tag) pairs. If @code{dimTags} is empty, remove all constraings.

@table @asis
@item Input:
@code{dimTags = []} (vector of pairs of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1578,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1395,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4340,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3802,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/terrain_bspline.py#L51,terrain_bspline.py})
@end table

@item gmsh/model/mesh/embed
Embed the model entities of dimension @code{dim} and tags @code{tags} in the (@code{inDim}, @code{inTag}) model entity. The dimension @code{dim} can 0, 1 or 2 and must be strictly smaller than @code{inDim}, which must be either 2 or 3. The embedded entities should not intersect each other or be part of the boundary of the entity @code{inTag}, whose mesh will conform to the mesh of the embedded entities. With the OpenCASCADE kernel, if the @code{fragment} operation is applied to entities of different dimensions, the lower dimensional entities will be automatically embedded in the higher dimensional entities if they are not on their boundary.

@table @asis
@item Input:
@code{dim} (integer), @code{tags} (vector of integers), @code{inDim} (integer), @code{inTag} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1591,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1407,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4361,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3832,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t15.cpp#L51,t15.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t15.py#L47,t15.py})
@end table

@item gmsh/model/mesh/removeEmbedded
Remove embedded entities from the model entities @code{dimTags}, given as a vector of (dim, tag) pairs. if @code{dim} is >= 0, only remove embedded entities of the given dimension (e.g. embedded points if @code{dim} == 0).

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{dim = -1} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1601,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1416,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4393,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3852,Julia}
@end table

@item gmsh/model/mesh/getEmbedded
Get the entities (if any) embedded in the model entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{dimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1608,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1422,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4416,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3877,Julia}
@end table

@item gmsh/model/mesh/reorderElements
Reorder the elements of type @code{elementType} classified on the entity of tag @code{tag} according to the @code{ordering} vector.

@table @asis
@item Input:
@code{elementType} (integer), @code{tag} (integer), @code{ordering} (vector of sizes)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1616,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1429,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4443,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3902,Julia}
@end table

@item gmsh/model/mesh/computeRenumbering
Compute a renumbering vector @code{newTags} corresponding to the input tags @code{oldTags} for a given list of element tags @code{elementTags}. If @code{elementTags} is empty, compute the renumbering on the full mesh. If @code{method} is equal to "RCMK", compute a node renumering with Reverse Cuthill McKee. If @code{method} is equal to "Hilbert", compute a node renumering along a Hilbert curve. If @code{method} is equal to "Metis", compute a node renumering using Metis. Element renumbering is not available yet.

@table @asis
@item Input:
@code{method = "RCMK"} (string), @code{elementTags = []} (vector of sizes)
@item Output:
@code{oldTags} (vector of sizes), @code{newTags} (vector of sizes)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1629,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1441,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4467,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3931,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/renumbering.py#L16,renumbering.py})
@end table

@item gmsh/model/mesh/renumberNodes
Renumber the node tags. If no explicit renumbering is provided through the @code{oldTags} and @code{newTags} vectors, renumber the nodes in a continuous sequence, taking into account the subset of elements to be saved later on if the option "Mesh.SaveAll" is not set.

@table @asis
@item Input:
@code{oldTags = []} (vector of sizes), @code{newTags = []} (vector of sizes)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1640,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1451,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4505,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3959,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/renumbering.py#L17,renumbering.py}, @url{@value{GITLAB-PREFIX}/examples/api/view_renumbering.py#L31,view_renumbering.py})
@end table

@item gmsh/model/mesh/renumberElements
Renumber the element tags in a continuous sequence. If no explicit renumbering is provided through the @code{oldTags} and @code{newTags} vectors, renumber the elements in a continuous sequence, taking into account the subset of elements to be saved later on if the option "Mesh.SaveAll" is not set.

@table @asis
@item Input:
@code{oldTags = []} (vector of sizes), @code{newTags = []} (vector of sizes)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1650,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1460,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4530,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3981,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/view_renumbering.py#L32,view_renumbering.py})
@end table

@item gmsh/model/mesh/setPeriodic
Set the meshes of the entities of dimension @code{dim} and tag @code{tags} as periodic copies of the meshes of entities @code{tagsMaster}, using the affine transformation specified in @code{affineTransformation} (16 entries of a 4x4 matrix, by row). If used after meshing, generate the periodic node correspondence information assuming the meshes of entities @code{tags} effectively match the meshes of entities @code{tagsMaster} (useful for structured and extruded meshes). Currently only available for @code{dim} == 1 and @code{dim} == 2.

@table @asis
@item Input:
@code{dim} (integer), @code{tags} (vector of integers), @code{tagsMaster} (vector of integers), @code{affineTransform} (vector of doubles)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1663,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1472,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4556,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4008,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t18.cpp#L40,t18.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t18.py#L36,t18.py}, @url{@value{GITLAB-PREFIX}/examples/api/periodic.py#L13,periodic.py})
@end table

@item gmsh/model/mesh/getPeriodic
Get master entities @code{tagsMaster} for the entities of dimension @code{dim} and tags @code{tags}.

@table @asis
@item Input:
@code{dim} (integer), @code{tags} (vector of integers)
@item Output:
@code{tagMaster} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1672,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1480,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4590,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4031,Julia}
@end table

@item gmsh/model/mesh/getPeriodicNodes
Get the master entity @code{tagMaster}, the node tags @code{nodeTags} and their corresponding master node tags @code{nodeTagsMaster}, and the affine transform @code{affineTransform} for the entity of dimension @code{dim} and tag @code{tag}. If @code{includeHighOrderNodes} is set, include high-order nodes in the returned data.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{includeHighOrderNodes = False} (boolean)
@item Output:
@code{tagMaster} (integer), @code{nodeTags} (vector of sizes), @code{nodeTagsMaster} (vector of sizes), @code{affineTransform} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1683,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1490,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4618,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4063,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/periodic.py#L19,periodic.py})
@end table

@item gmsh/model/mesh/getPeriodicKeys
Get the master entity @code{tagMaster} and the key pairs (@code{typeKeyMaster}, @code{entityKeyMaster}) corresponding to the entity @code{tag} and the key pairs (@code{typeKey}, @code{entityKey}) for the elements of type @code{elementType} and function space type @code{functionSpaceType}. If @code{returnCoord} is set, the @code{coord} and @code{coordMaster} vectors contain the x, y, z coordinates locating basis functions for sorting purposes.

@table @asis
@item Input:
@code{elementType} (integer), @code{functionSpaceType} (string), @code{tag} (integer), @code{returnCoord = True} (boolean)
@item Output:
@code{tagMaster} (integer), @code{typeKeys} (vector of integers), @code{typeKeysMaster} (vector of integers), @code{entityKeys} (vector of sizes), @code{entityKeysMaster} (vector of sizes), @code{coord} (vector of doubles), @code{coordMaster} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1699,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1505,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4663,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4108,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/periodic.py#L23,periodic.py})
@end table

@item gmsh/model/mesh/importStl
Import the model STL representation (if available) as the current mesh.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1714,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1519,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4723,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4142,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/stl_to_mesh.py#L20,stl_to_mesh.py})
@end table

@item gmsh/model/mesh/getDuplicateNodes
Get the @code{tags} of any duplicate nodes in the mesh of the entities @code{dimTags}, given as a vector of (dim, tag) pairs. If @code{dimTags} is empty, consider the whole mesh.

@table @asis
@item Input:
@code{dimTags = []} (vector of pairs of integers)
@item Output:
@code{tags} (vector of sizes)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1721,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1524,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4737,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4165,Julia}
@end table

@item gmsh/model/mesh/removeDuplicateNodes
Remove duplicate nodes in the mesh of the entities @code{dimTags}, given as a vector of (dim, tag) pairs. If @code{dimTags} is empty, consider the whole mesh.

@table @asis
@item Input:
@code{dimTags = []} (vector of pairs of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1729,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1530,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4764,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4189,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/glue_and_remesh_stl.py#L15,glue_and_remesh_stl.py}, @url{@value{GITLAB-PREFIX}/examples/api/mirror_mesh.py#L55,mirror_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/stl_to_mesh.py#L21,stl_to_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/view_adaptive_to_mesh.py#L74,view_adaptive_to_mesh.py})
@end table

@item gmsh/model/mesh/removeDuplicateElements
Remove duplicate elements (defined by the same nodes, in the same entity) in the mesh of the entities @code{dimTags}, given as a vector of (dim, tag) pairs. If @code{dimTags} is empty, consider the whole mesh.

@table @asis
@item Input:
@code{dimTags = []} (vector of pairs of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1736,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1536,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4784,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4211,Julia}
@end table

@item gmsh/model/mesh/splitQuadrangles
Split (into two triangles) all quadrangles in surface @code{tag} whose quality is lower than @code{quality}. If @code{tag} < 0, split quadrangles in all surfaces.

@table @asis
@item Input:
@code{quality = 1.} (double), @code{tag = -1} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1742,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1541,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4805,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4233,Julia}
@end table

@item gmsh/model/mesh/setVisibility
Set the visibility of the elements of tags @code{elementTags} to @code{value}.

@table @asis
@item Input:
@code{elementTags} (vector of sizes), @code{value} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1748,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1546,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4826,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4252,Julia}
@end table

@item gmsh/model/mesh/getVisibility
Get the visibility of the elements of tags @code{elementTags}.

@table @asis
@item Input:
@code{elementTags} (vector of sizes)
@item Output:
@code{values} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1754,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1551,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4847,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4273,Julia}
@end table

@item gmsh/model/mesh/classifySurfaces
Classify ("color") the surface mesh based on the angle threshold @code{angle} (in radians), and create new discrete surfaces, curves and points accordingly. If @code{boundary} is set, also create discrete curves on the boundary if the surface is open. If @code{forReparametrization} is set, create curves and surfaces that can be reparametrized using a single map. If @code{curveAngle} is less than Pi, also force curves to be split according to @code{curveAngle}. If @code{exportDiscrete} is set, clear any built-in CAD kernel entities and export the discrete entities in the built-in CAD kernel.

@table @asis
@item Input:
@code{angle} (double), @code{boundary = True} (boolean), @code{forReparametrization = False} (boolean), @code{curveAngle = pi} (double), @code{exportDiscrete = True} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1767,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1563,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4872,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4305,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L53,t13.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L44,t13.py}, @url{@value{GITLAB-PREFIX}/examples/api/aneurysm.py#L12,aneurysm.py}, @url{@value{GITLAB-PREFIX}/examples/api/glue_and_remesh_stl.py#L19,glue_and_remesh_stl.py}, @url{@value{GITLAB-PREFIX}/examples/api/remesh_stl.py#L22,remesh_stl.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain_stl.py#L16,terrain_stl.py})
@end table

@item gmsh/model/mesh/createGeometry
Create a geometry for the discrete entities @code{dimTags} (given as a vector of (dim, tag) pairs) represented solely by a mesh (without an underlying CAD description), i.e. create a parametrization for discrete curves and surfaces, assuming that each can be parametrized with a single map. If @code{dimTags} is empty, create a geometry for all the discrete entities.

@table @asis
@item Input:
@code{dimTags = []} (vector of pairs of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1780,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1575,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4905,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4327,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L59,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x2.cpp#L111,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L50,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x2.py#L106,x2.py}, @url{@value{GITLAB-PREFIX}/examples/api/aneurysm.py#L13,aneurysm.py}, @url{@value{GITLAB-PREFIX}/examples/api/glue_and_remesh_stl.py#L32,glue_and_remesh_stl.py}, @url{@value{GITLAB-PREFIX}/examples/api/remesh_stl.py#L26,remesh_stl.py}, ...)
@end table

@item gmsh/model/mesh/createTopology
Create a boundary representation from the mesh if the model does not have one (e.g. when imported from mesh file formats with no BRep representation of the underlying model). If @code{makeSimplyConnected} is set, enforce simply connected discrete surfaces and volumes. If @code{exportDiscrete} is set, clear any built-in CAD kernel entities and export the discrete entities in the built-in CAD kernel.

@table @asis
@item Input:
@code{makeSimplyConnected = True} (boolean), @code{exportDiscrete = True} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1790,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1584,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4928,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4352,Julia}
@end table

@item gmsh/model/mesh/addHomologyRequest
Add a request to compute a basis representation for homology spaces (if @code{type} == "Homology") or cohomology spaces (if @code{type} == "Cohomology"). The computation domain is given in a list of physical group tags @code{domainTags}; if empty, the whole mesh is the domain. The computation subdomain for relative (co)homology computation is given in a list of physical group tags @code{subdomainTags}; if empty, absolute (co)homology is computed. The dimensions of the (co)homology bases to be computed are given in the list @code{dim}; if empty, all bases are computed. Resulting basis representation (co)chains are stored as physical groups in the mesh. If the request is added before mesh generation, the computation will be performed at the end of the meshing pipeline.

@table @asis
@item Input:
@code{type = "Homology"} (string), @code{domainTags = []} (vector of integers), @code{subdomainTags = []} (vector of integers), @code{dims = []} (vector of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1806,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1599,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4953,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4382,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t14.cpp#L112,t14.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t14.py#L101,t14.py})
@end table

@item gmsh/model/mesh/clearHomologyRequests
Clear all (co)homology computation requests.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1814,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1606,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4990,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4397,Julia}
@end table

@item gmsh/model/mesh/computeHomology
Perform the (co)homology computations requested by addHomologyRequest(). The newly created physical groups are returned in @code{dimTags} as a vector of (dim, tag) pairs.

@table @asis
@item Input:
-
@item Output:
@code{dimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1821,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1611,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5004,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4419,Julia}
@end table

@item gmsh/model/mesh/computeCrossField
Compute a cross field for the current mesh. The function creates 3 views: the H function, the Theta function and cross directions. Return the tags of the views.

@table @asis
@item Input:
-
@item Output:
@code{viewTags} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1828,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1617,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5028,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4444,Julia}
@end table

@item gmsh/model/mesh/generateMesh
Generate a mesh on one single mode entity of dimension @code{dim} and of tag @code{tag}. User can give a set of points in parameter coordinates in the @code{coord} vector. Parameter @code{refine} is set to 1 if additional points must be added by the mesher using standard gmsh algorithms.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{refine} (boolean), @code{coord} (vector of doubles), @code{nodeTags} (vector of sizes)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1836,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1624,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5052,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4472,Julia}
@end table

@item gmsh/model/mesh/triangulate
Triangulate the points given in the @code{coord} vector as pairs of u, v coordinates, and return the node tags (with numbering starting at 1) of the resulting triangles in @code{tri}. If specified, @code{edges} contains constrained edges in the mesh, given as pairs of nodes.

@table @asis
@item Input:
@code{coord} (vector of doubles), @code{edges} (vector of sizes)
@item Output:
@code{tri} (vector of sizes)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1848,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1635,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5083,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4497,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/raw_triangulation.py#L14,raw_triangulation.py})
@end table

@item gmsh/model/mesh/tetrahedralize
Tetrahedralize the points given in the @code{coord} vector as x, y, z coordinates, concatenated, and return the node tags (with numbering starting at 1) of the resulting tetrahedra in @code{tetra}.

@table @asis
@item Input:
@code{coord} (vector of doubles)
@item Output:
@code{tetra} (vector of sizes)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1857,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1643,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5113,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4522,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/raw_tetrahedralization.py#L16,raw_tetrahedralization.py})
@end table

@item gmsh/model/mesh/constrainedDelaunayRefinement
Apply a Delaunay refinement on entity of dimension @code{dim} and tag @code{tag}. @code{elementTags} contains a vector of the tags of the elements that need to be refined. @code{constrainedEdges} is a vector of size m*2 containing the edges that need to stay in the mesh, in the form of 2 successive nodes. @code{sizeField} is a vector containing the size at the nodes referenced by @code{nodeTags}. @code{minRadius} is the minimum allowed circumradius of elements in the mesh. An element that has a circumradius which is smaller than this value will not be refined. Return newly added nodes and corresponding size field, as well as the updated list of constrained edges and elements within the refinement.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{elementTags} (vector of sizes), @code{constrainedEdges} (vector of sizes), @code{nodeTags} (vector of sizes), @code{sizeField} (vector of doubles), @code{minRadius} (double), @code{minQuality} (double)
@item Output:
@code{newNodeTags} (vector of sizes), @code{newCoords} (vector of doubles), @code{newSizeField} (vector of doubles), @code{newConstrainedEdges} (vector of vectors of sizes), @code{newElementsInRefinement} (vector of sizes)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1872,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1657,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5139,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4564,Julia}
@end table

@item gmsh/model/mesh/alphaShape
alpha shape on the mesh of entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{alpha} (double), @code{nodeTags} (vector of sizes), @code{sizeAtNodes} (vector of doubles)
@item Output:
@code{elementTags} (vector of vectors of sizes), @code{edges} (vector of vectors of sizes)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1889,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1673,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5207,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4608,Julia}
@end table

@item gmsh/model/mesh/computeAlphaShape
Compute the alpha shape of the set of points on the discrete entity defined by the first tag of @code{alphaShapeTags}, with the second tag its boundary. The alpha shape is computed with respect to a constant mean mesh size @code{hMean} (if @code{hMean} > 0) or to the size field defined by @code{sizeFieldCallback}. If desired, also refine the elements in the alpha shape so as to respect the size field defined by @code{sizeFieldCallback}. The new mesh will be stored in the discrete entities with tags @code{alphaShapeTags} = [alphaShapeTag, alphaShapeBoundaryTag]. If the alpha shape entity already contains elements and no new mesh should be generated, triangulate should be 0.

@table @asis
@item Input:
@code{dim} (integer), @code{alphaShapeTags} (vector of integers), @code{alpha} (double), @code{hMean} (double), @code{sizeFieldCallback} (), @code{triangulate} (integer), @code{refine} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1909,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1691,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5246,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4652,Julia}
@end table

@item gmsh/model/mesh/computeAlphaShapeBis
Compute the alpha shape - improved function

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{bndTag} (integer), @code{boundaryModel} (string), @code{alpha} (double), @code{alphaShapeSizeField} (integer), @code{refineSizeField} (integer), @code{usePreviousMesh} (boolean), @code{boundaryTolerance = 1e-6} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1920,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1701,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5289,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4680,Julia}
@end table

@item gmsh/model/mesh/decimateTriangulation
Decimate a triangulation

@table @asis
@item Input:
@code{faceTag} (integer), @code{distanceThreshold} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1933,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1713,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5323,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4699,Julia}
@end table

@item gmsh/model/mesh/conformAlphaShapeToBoundary
Conform alpha shape mesh to solid boundaries

@table @asis
@item Input:
@code{alphaShapeTags} (vector of integers), @code{internalBoundaryTags} (vector of integers), @code{externalBoundaryTags} (vector of integers), @code{sizeFieldCallback} ()
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1939,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1718,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5343,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4720,Julia}
@end table

@end ftable

@node Namespace gmsh/model/mesh/field, Namespace gmsh/model/geo, Namespace gmsh/model/mesh, Gmsh application programming interface
@section Namespace @code{gmsh/model/mesh/field}: mesh size field functions

@ftable @code
@item gmsh/model/mesh/field/add
Add a new mesh size field of type @code{fieldType}. If @code{tag} is positive, assign the tag explicitly; otherwise a new tag is assigned automatically. Return the field tag. Available field types are listed in the @url{https://gmsh.info/doc/texinfo/gmsh.html#Gmsh-mesh-size-fields,"Gmsh mesh size fields" chapter of the Gmsh reference manual}.

@table @asis
@item Input:
@code{fieldType} (string), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1953,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1729,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5380,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4756,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t7.cpp#L50,t7.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t10.cpp#L47,t10.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t11.cpp#L38,t11.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L83,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t17.cpp#L41,t17.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t7.py#L43,t7.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t10.py#L43,t10.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L71,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t17.py#L35,t17.py}, @url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L114,adapt_mesh.py}, ...)
@end table

@item gmsh/model/mesh/field/remove
Remove the field with tag @code{tag}.

@table @asis
@item Input:
@code{tag} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1959,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1734,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5406,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4773,Julia}
@end table

@item gmsh/model/mesh/field/list
Get the list of all fields.

@table @asis
@item Input:
-
@item Output:
@code{tags} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1964,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1738,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5423,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4792,Julia}
@end table

@item gmsh/model/mesh/field/getType
Get the type @code{fieldType} of the field with tag @code{tag}.

@table @asis
@item Input:
@code{tag} (integer)
@item Output:
@code{fileType} (string)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1969,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1742,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5444,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4815,Julia}
@end table

@item gmsh/model/mesh/field/setNumber
Set the numerical option @code{option} to value @code{value} for field @code{tag}.

@table @asis
@item Input:
@code{tag} (integer), @code{option} (string), @code{value} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1975,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1747,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5468,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4837,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t7.cpp#L51,t7.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t10.cpp#L50,t10.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t17.cpp#L42,t17.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t7.py#L44,t7.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t10.py#L46,t10.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t17.py#L36,t17.py}, @url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L115,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/copy_mesh.py#L47,copy_mesh.py}, ...)
@end table

@item gmsh/model/mesh/field/getNumber
Get the value of the numerical option @code{option} for field @code{tag}.

@table @asis
@item Input:
@code{tag} (integer), @code{option} (string)
@item Output:
@code{value} (double)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1982,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1753,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5490,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4859,Julia}
@end table

@item gmsh/model/mesh/field/setString
Set the string option @code{option} to value @code{value} for field @code{tag}.

@table @asis
@item Input:
@code{tag} (integer), @code{option} (string), @code{value} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1989,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1759,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5516,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4880,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t10.cpp#L74,t10.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t11.cpp#L39,t11.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L86,t13.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t10.py#L69,t10.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L73,t13.py})
@end table

@item gmsh/model/mesh/field/getString
Get the value of the string option @code{option} for field @code{tag}.

@table @asis
@item Input:
@code{tag} (integer), @code{option} (string)
@item Output:
@code{value} (string)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1996,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1765,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5538,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4902,Julia}
@end table

@item gmsh/model/mesh/field/setNumbers
Set the numerical list option @code{option} to value @code{values} for field @code{tag}.

@table @asis
@item Input:
@code{tag} (integer), @code{option} (string), @code{values} (vector of doubles)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2004,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1771,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5564,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4924,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t10.cpp#L48,t10.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t10.py#L44,t10.py}, @url{@value{GITLAB-PREFIX}/examples/api/extend_field.py#L23,extend_field.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_2d.py#L122,naca_boundary_layer_2d.py}, @url{@value{GITLAB-PREFIX}/examples/api/ocean.py#L4544,ocean.py})
@end table

@item gmsh/model/mesh/field/getNumbers
Get the value of the numerical list option @code{option} for field @code{tag}.

@table @asis
@item Input:
@code{tag} (integer), @code{option} (string)
@item Output:
@code{values} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2011,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1777,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5587,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4946,Julia}
@end table

@item gmsh/model/mesh/field/setAsBackgroundMesh
Set the field @code{tag} as the background mesh size field.

@table @asis
@item Input:
@code{tag} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2018,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1783,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5613,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4967,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t7.cpp#L54,t7.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t10.cpp#L109,t10.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t11.cpp#L41,t11.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L89,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t17.cpp#L43,t17.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t7.py#L47,t7.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t10.py#L102,t10.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L76,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t17.py#L37,t17.py}, @url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L116,adapt_mesh.py}, ...)
@end table

@item gmsh/model/mesh/field/setAsBoundaryLayer
Set the field @code{tag} as a boundary layer size field.

@table @asis
@item Input:
@code{tag} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2023,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1787,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5631,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4985,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_2d.py#L132,naca_boundary_layer_2d.py})
@end table

@end ftable

@node Namespace gmsh/model/geo, Namespace gmsh/model/geo/mesh, Namespace gmsh/model/mesh/field, Gmsh application programming interface
@section Namespace @code{gmsh/model/geo}: built-in CAD kernel functions

@ftable @code
@item gmsh/model/geo/addPoint
Add a geometrical point in the built-in CAD representation, at coordinates (@code{x}, @code{y}, @code{z}). If @code{meshSize} is > 0, add a meshing constraint at that point. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the point. (Note that the point will be added in the current model only after @code{synchronize} is called. This behavior holds for all the entities added in the geo module.)

@table @asis
@item Input:
@code{x} (double), @code{y} (double), @code{z} (double), @code{meshSize = 0.} (double), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2039,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1796,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5655,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5027,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t1.cpp#L36,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L23,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L25,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L19,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t6.cpp#L20,t6.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t1.py#L33,t1.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L21,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L22,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L45,t5.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t6.py#L19,t6.py}, ...)
@end table

@item gmsh/model/geo/addLine
Add a straight line segment in the built-in CAD representation, between the two points with tags @code{startTag} and @code{endTag}. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the line.

@table @asis
@item Input:
@code{startTag} (integer), @code{endTag} (integer), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2051,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1807,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5689,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5052,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t1.cpp#L67,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L27,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L29,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L125,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t6.cpp#L24,t6.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t1.py#L69,t1.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L25,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L26,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L60,t5.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t6.py#L23,t6.py}, ...)
@end table

@item gmsh/model/geo/addCircleArc
Add a circle arc (strictly smaller than Pi) in the built-in CAD representation, between the two points with tags @code{startTag} and @code{endTag}, and with center @code{centerTag}. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. If (@code{nx}, @code{ny}, @code{nz}) != (0, 0, 0), explicitly set the plane of the circle arc. Return the tag of the circle arc.

@table @asis
@item Input:
@code{startTag} (integer), @code{centerTag} (integer), @code{endTag} (integer), @code{tag = -1} (integer), @code{nx = 0.} (double), @code{ny = 0.} (double), @code{nz = 0.} (double)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2063,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1818,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5717,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5082,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L27,t5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L119,t5.py})
@end table

@item gmsh/model/geo/addEllipseArc
Add an ellipse arc (strictly smaller than Pi) in the built-in CAD representation, between the two points @code{startTag} and @code{endTag}, and with center @code{centerTag} and major axis point @code{majorTag}. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. If (@code{nx}, @code{ny}, @code{nz}) != (0, 0, 0), explicitly set the plane of the circle arc. Return the tag of the ellipse arc.

@table @asis
@item Input:
@code{startTag} (integer), @code{centerTag} (integer), @code{majorTag} (integer), @code{endTag} (integer), @code{tag = -1} (integer), @code{nx = 0.} (double), @code{ny = 0.} (double), @code{nz = 0.} (double)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2079,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1833,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5755,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5114,Julia}
@end table

@item gmsh/model/geo/addSpline
Add a spline (Catmull-Rom) curve in the built-in CAD representation, going through the points @code{pointTags}. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Create a periodic curve if the first and last points are the same. Return the tag of the spline curve.

@table @asis
@item Input:
@code{pointTags} (vector of integers), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2095,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1848,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5795,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5138,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t12.cpp#L67,t12.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t12.py#L63,t12.py})
@end table

@item gmsh/model/geo/addBSpline
Add a cubic b-spline curve in the built-in CAD representation, with @code{pointTags} control points. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Creates a periodic curve if the first and last points are the same. Return the tag of the b-spline curve.

@table @asis
@item Input:
@code{pointTags} (vector of integers), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2105,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1857,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5823,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5162,Julia}
@end table

@item gmsh/model/geo/addBezier
Add a Bezier curve in the built-in CAD representation, with @code{pointTags} control points. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically.  Return the tag of the Bezier curve.

@table @asis
@item Input:
@code{pointTags} (vector of integers), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2113,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1864,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5851,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5185,Julia}
@end table

@item gmsh/model/geo/addPolyline
Add a polyline curve in the built-in CAD representation, going through the points @code{pointTags}. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Create a periodic curve if the first and last points are the same. Return the tag of the polyline curve.

@table @asis
@item Input:
@code{pointTags} (vector of integers), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2123,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1872,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5877,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5209,Julia}
@end table

@item gmsh/model/geo/addCompoundSpline
Add a spline (Catmull-Rom) curve in the built-in CAD representation, going through points sampling the curves in @code{curveTags}. The density of sampling points on each curve is governed by @code{numIntervals}. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the spline.

@table @asis
@item Input:
@code{curveTags} (vector of integers), @code{numIntervals = 5} (integer), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2133,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1881,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5904,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5235,Julia}
@end table

@item gmsh/model/geo/addCompoundBSpline
Add a b-spline curve in the built-in CAD representation, with control points sampling the curves in @code{curveTags}. The density of sampling points on each curve is governed by @code{numIntervals}. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the b-spline.

@table @asis
@item Input:
@code{curveTags} (vector of integers), @code{numIntervals = 20} (integer), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2144,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1891,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5934,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5260,Julia}
@end table

@item gmsh/model/geo/addCurveLoop
Add a curve loop (a closed wire) in the built-in CAD representation, formed by the curves @code{curveTags}. @code{curveTags} should contain (signed) tags of model entities of dimension 1 forming a closed loop: a negative tag signifies that the underlying curve is considered with reversed orientation. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. If @code{reorient} is set, automatically reorient the curves if necessary. Return the tag of the curve loop.

@table @asis
@item Input:
@code{curveTags} (vector of integers), @code{tag = -1} (integer), @code{reorient = False} (boolean)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2157,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1903,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5964,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5288,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t1.cpp#L80,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L31,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L33,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L40,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t6.cpp#L28,t6.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t1.py#L81,t1.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L29,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L30,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L82,t5.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t6.py#L27,t6.py}, ...)
@end table

@item gmsh/model/geo/addCurveLoops
Add curve loops in the built-in CAD representation based on the curves @code{curveTags}. Return the @code{tags} of found curve loops, if any.

@table @asis
@item Input:
@code{curveTags} (vector of integers)
@item Output:
@code{tags} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2165,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1910,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5996,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5310,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/aneurysm.py#L42,aneurysm.py}, @url{@value{GITLAB-PREFIX}/examples/api/tube_boundary_layer.py#L39,tube_boundary_layer.py})
@end table

@item gmsh/model/geo/addPlaneSurface
Add a plane surface in the built-in CAD representation, defined by one or more curve loops @code{wireTags}. The first curve loop defines the exterior contour; additional curve loop define holes. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the surface.

@table @asis
@item Input:
@code{wireTags} (vector of integers), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2175,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1919,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6022,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5338,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t1.cpp#L85,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L32,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L34,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L148,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t6.cpp#L29,t6.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t1.py#L86,t1.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L30,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L31,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L83,t5.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t6.py#L28,t6.py}, ...)
@end table

@item gmsh/model/geo/addSurfaceFilling
Add a surface in the built-in CAD representation, filling the curve loops in @code{wireTags} using transfinite interpolation. Currently only a single curve loop is supported; this curve loop should be composed by 3 or 4 curves only. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the surface.

@table @asis
@item Input:
@code{wireTags} (vector of integers), @code{tag = -1} (integer), @code{sphereCenterTag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2185,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1928,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6050,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5364,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L61,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t12.cpp#L71,t12.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L153,t5.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t12.py#L67,t12.py})
@end table

@item gmsh/model/geo/addSurfaceLoop
Add a surface loop (a closed shell) formed by @code{surfaceTags} in the built-in CAD representation.  If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the shell.

@table @asis
@item Input:
@code{surfaceTags} (vector of integers), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2195,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1936,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6080,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5387,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L113,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L70,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L77,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x2.cpp#L143,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L108,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L103,t5.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L65,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x2.py#L139,x2.py}, @url{@value{GITLAB-PREFIX}/examples/api/aneurysm.py#L47,aneurysm.py}, ...)
@end table

@item gmsh/model/geo/addVolume
Add a volume (a region) in the built-in CAD representation, defined by one or more shells @code{shellTags}. The first surface loop defines the exterior boundary; additional surface loop define holes. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the volume.

@table @asis
@item Input:
@code{shellTags} (vector of integers), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2205,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1945,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6106,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5412,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L114,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L71,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L78,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x2.cpp#L144,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L109,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L163,t5.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L66,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x2.py#L140,x2.py}, @url{@value{GITLAB-PREFIX}/examples/api/aneurysm.py#L47,aneurysm.py}, ...)
@end table

@item gmsh/model/geo/addGeometry
Add a @code{geometry} in the built-in CAD representation. @code{geometry} can currently be one of "Sphere" or "PolarSphere" (where @code{numbers} should contain the x, y, z coordinates of the center, followed by the radius), or "Parametric" (where @code{strings} should contains three expression evaluating to the x, y and z coordinates. If @code{tag} is positive, set the tag of the geometry explicitly; otherwise a new tag is selected automatically. Return the tag of the geometry.

@table @asis
@item Input:
@code{geometry} (string), @code{numbers = []} (vector of doubles), @code{strings = []} (vector of strings), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2217,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1956,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6134,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5440,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/ocean.py#L9,ocean.py})
@end table

@item gmsh/model/geo/addPointOnGeometry
Add a point in the built-in CAD representation, at coordinates (@code{x}, @code{y}, @code{z}) on the geometry @code{geometryTag}. If @code{meshSize} is > 0, add a meshing constraint at that point. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the point. For surface geometries, only the @code{x} and @code{y} coordinates are used.

@table @asis
@item Input:
@code{geometryTag} (integer), @code{x} (double), @code{y} (double), @code{z = 0.} (double), @code{meshSize = 0.} (double), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2229,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1967,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6169,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5469,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/ocean.py#L11,ocean.py})
@end table

@item gmsh/model/geo/extrude
Extrude the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the built-in CAD representation, using a translation along (@code{dx}, @code{dy}, @code{dz}). Return extruded entities in @code{outDimTags}. If the @code{numElements} vector is not empty, also extrude the mesh: the entries in @code{numElements} give the number of elements in each layer. If the @code{height} vector is not empty, it provides the (cumulative) height of the different layers, normalized to 1. If @code{recombine} is set, recombine the mesh in the layers.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{dx} (double), @code{dy} (double), @code{dz} (double), @code{numElements = []} (vector of integers), @code{heights = []} (vector of doubles), @code{recombine = False} (boolean)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2245,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1982,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6204,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5502,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L124,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L48,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t14.cpp#L65,t14.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t15.cpp#L63,t15.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L118,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L44,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t14.py#L59,t14.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t15.py#L59,t15.py}, @url{@value{GITLAB-PREFIX}/examples/api/hex.py#L8,hex.py})
@end table

@item gmsh/model/geo/revolve
Extrude the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the built-in CAD representation, using a rotation of @code{angle} radians around the axis of revolution defined by the point (@code{x}, @code{y}, @code{z}) and the direction (@code{ax}, @code{ay}, @code{az}). The angle should be strictly smaller than Pi. Return extruded entities in @code{outDimTags}. If the @code{numElements} vector is not empty, also extrude the mesh: the entries in @code{numElements} give the number of elements in each layer. If the @code{height} vector is not empty, it provides the (cumulative) height of the different layers, normalized to 1. If @code{recombine} is set, recombine the mesh in the layers.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{x} (double), @code{y} (double), @code{z} (double), @code{ax} (double), @code{ay} (double), @code{az} (double), @code{angle} (double), @code{numElements = []} (vector of integers), @code{heights = []} (vector of doubles), @code{recombine = False} (boolean)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2265,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2001,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6248,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5546,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L55,t3.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L51,t3.py})
@end table

@item gmsh/model/geo/twist
Extrude the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the built-in CAD representation, using a combined translation and rotation of @code{angle} radians, along (@code{dx}, @code{dy}, @code{dz}) and around the axis of revolution defined by the point (@code{x}, @code{y}, @code{z}) and the direction (@code{ax}, @code{ay}, @code{az}). The angle should be strictly smaller than Pi. Return extruded entities in @code{outDimTags}. If the @code{numElements} vector is not empty, also extrude the mesh: the entries in @code{numElements} give the number of elements in each layer. If the @code{height} vector is not empty, it provides the (cumulative) height of the different layers, normalized to 1. If @code{recombine} is set, recombine the mesh in the layers.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{x} (double), @code{y} (double), @code{z} (double), @code{dx} (double), @code{dy} (double), @code{dz} (double), @code{ax} (double), @code{ay} (double), @code{az} (double), @code{angle} (double), @code{numElements = []} (vector of integers), @code{heights = []} (vector of doubles), @code{recombine = False} (boolean)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2290,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2025,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6302,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5594,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L70,t3.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L65,t3.py})
@end table

@item gmsh/model/geo/extrudeBoundaryLayer
Extrude the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the built-in CAD representation along the normals of the mesh, creating discrete boundary layer entities. Return extruded entities in @code{outDimTags}. The entries in @code{numElements} give the number of elements in each layer. If the @code{height} vector is not empty, it provides the (cumulative) height of the different layers. If @code{recombine} is set, recombine the mesh in the layers. A second boundary layer can be created from the same entities if @code{second} is set. If @code{viewIndex} is >= 0, use the corresponding view to either specify the normals (if the view contains a vector field) or scale the normals (if the view is scalar).

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{numElements = [1]} (vector of integers), @code{heights = []} (vector of doubles), @code{recombine = False} (boolean), @code{second = False} (boolean), @code{viewIndex = -1} (integer)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2318,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2052,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6363,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5634,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/aneurysm.py#L25,aneurysm.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_2d.py#L86,naca_boundary_layer_2d.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_3d.py#L106,naca_boundary_layer_3d.py}, @url{@value{GITLAB-PREFIX}/examples/api/tube_boundary_layer.py#L26,tube_boundary_layer.py})
@end table

@item gmsh/model/geo/translate
Translate the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the built-in CAD representation along (@code{dx}, @code{dy}, @code{dz}).

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{dx} (double), @code{dy} (double), @code{dz} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2330,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2063,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6409,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5662,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L48,t2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L45,t2.py})
@end table

@item gmsh/model/geo/rotate
Rotate the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the built-in CAD representation by @code{angle} radians around the axis of revolution defined by the point (@code{x}, @code{y}, @code{z}) and the direction (@code{ax}, @code{ay}, @code{az}).

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{x} (double), @code{y} (double), @code{z} (double), @code{ax} (double), @code{ay} (double), @code{az} (double), @code{angle} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2341,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2073,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6434,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5690,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L52,t2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L49,t2.py})
@end table

@item gmsh/model/geo/dilate
Scale the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the built-in CAD representation by factors @code{a}, @code{b} and @code{c} along the three coordinate axes; use (@code{x}, @code{y}, @code{z}) as the center of the homothetic transformation.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{x} (double), @code{y} (double), @code{z} (double), @code{a} (double), @code{b} (double), @code{c} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2356,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2087,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6469,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5718,Julia}
@end table

@item gmsh/model/geo/mirror
Mirror the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the built-in CAD representation, with respect to the plane of equation @code{a} * x + @code{b} * y + @code{c} * z + @code{d} = 0.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{a} (double), @code{b} (double), @code{c} (double), @code{d} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2369,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2099,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6502,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5743,Julia}
@end table

@item gmsh/model/geo/symmetrize
Mirror the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the built-in CAD representation, with respect to the plane of equation @code{a} * x + @code{b} * y + @code{c} * z + @code{d} = 0. (This is a synonym for @code{mirror}, which will be deprecated in a future release.)

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{a} (double), @code{b} (double), @code{c} (double), @code{d} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2381,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2110,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6530,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5769,Julia}
@end table

@item gmsh/model/geo/copy
Copy the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the built-in CAD representation; the new entities are returned in @code{outDimTags}.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2392,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2119,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6559,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5792,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L61,t2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L57,t2.py})
@end table

@item gmsh/model/geo/remove
Remove the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the built-in CAD representation, provided that they are not on the boundary of higher-dimensional entities. If @code{recursive} is true, remove all the entities on their boundaries, down to dimension 0.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{recursive = False} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2401,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2127,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6584,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5819,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t6.cpp#L32,t6.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t6.py#L31,t6.py})
@end table

@item gmsh/model/geo/removeAllDuplicates
Remove all duplicate entities in the built-in CAD representation (different entities at the same geometrical location).

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2408,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2133,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6607,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5836,Julia}
@end table

@item gmsh/model/geo/splitCurve
Split the curve of tag @code{tag} in the built-in CAD representation, on the specified control points @code{pointTags}. This feature is only available for lines, splines and b-splines. Return the tag(s) @code{curveTags} of the newly created curve(s).

@table @asis
@item Input:
@code{tag} (integer), @code{pointTags} (vector of integers)
@item Output:
@code{curveTags} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2416,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2139,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6622,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5861,Julia}
@end table

@item gmsh/model/geo/getMaxTag
Get the maximum tag of entities of dimension @code{dim} in the built-in CAD representation.

@table @asis
@item Input:
@code{dim} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2424,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2146,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6652,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5885,Julia}
@end table

@item gmsh/model/geo/setMaxTag
Set the maximum tag @code{maxTag} for entities of dimension @code{dim} in the built-in CAD representation.

@table @asis
@item Input:
@code{dim} (integer), @code{maxTag} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2430,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2151,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6674,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5905,Julia}
@end table

@item gmsh/model/geo/addPhysicalGroup
Add a physical group of dimension @code{dim}, grouping the entities with tags @code{tags} in the built-in CAD representation. Return the tag of the physical group, equal to @code{tag} if @code{tag} is positive, or a new tag if @code{tag} < 0. Set the name of the physical group if @code{name} is not empty.

@table @asis
@item Input:
@code{dim} (integer), @code{tags} (vector of integers), @code{tag = -1} (integer), @code{name = ""} (string)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2439,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2159,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6695,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5931,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L178,t5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L177,t5.py})
@end table

@item gmsh/model/geo/removePhysicalGroups
Remove the physical groups @code{dimTags} (given as a vector of (dim, tag) pairs) from the built-in CAD representation. If @code{dimTags} is empty, remove all groups.

@table @asis
@item Input:
@code{dimTags = []} (vector of pairs of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2449,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2168,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6726,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5950,Julia}
@end table

@item gmsh/model/geo/synchronize
Synchronize the built-in CAD representation with the current Gmsh model. This can be called at any time, but since it involves a non trivial amount of processing, the number of synchronization points should normally be minimized. Without synchronization the entities in the built-in CAD representation are not available to any function outside of the built-in CAD kernel functions.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2459,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2177,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6747,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5971,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t1.cpp#L96,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L33,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L35,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L188,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t6.cpp#L99,t6.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t1.py#L96,t1.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L31,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L32,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L184,t5.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t6.py#L94,t6.py}, ...)
@end table

@end ftable

@node Namespace gmsh/model/geo/mesh, Namespace gmsh/model/occ, Namespace gmsh/model/geo, Gmsh application programming interface
@section Namespace @code{gmsh/model/geo/mesh}: built-in CAD kernel meshing constraints

@ftable @code
@item gmsh/model/geo/mesh/setSize
Set a mesh size constraint on the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the built-in CAD kernel representation. Currently only entities of dimension 0 (points) are handled.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{size} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2468,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2182,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6771,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6000,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L128,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t15.cpp#L41,t15.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L122,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t15.py#L37,t15.py})
@end table

@item gmsh/model/geo/mesh/setTransfiniteCurve
Set a transfinite meshing constraint on the curve @code{tag} in the built-in CAD kernel representation, with @code{numNodes} nodes distributed according to @code{meshType} and @code{coef}. Currently supported types are "Progression" (geometrical progression with power @code{coef}) and "Bump" (refinement toward both extremities of the curve).

@table @asis
@item Input:
@code{tag} (integer), @code{nPoints} (integer), @code{meshType = "Progression"} (string), @code{coef = 1.} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2478,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2191,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6794,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6026,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t6.cpp#L48,t6.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t6.py#L47,t6.py})
@end table

@item gmsh/model/geo/mesh/setTransfiniteSurface
Set a transfinite meshing constraint on the surface @code{tag} in the built-in CAD kernel representation. @code{arrangement} describes the arrangement of the triangles when the surface is not flagged as recombined: currently supported values are "Left", "Right", "AlternateLeft" and "AlternateRight". @code{cornerTags} can be used to specify the (3 or 4) corners of the transfinite interpolation explicitly; specifying the corners explicitly is mandatory if the surface has more that 3 or 4 points on its boundary.

@table @asis
@item Input:
@code{tag} (integer), @code{arrangement = "Left"} (string), @code{cornerTags = []} (vector of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2493,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2204,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6822,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6052,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t6.cpp#L67,t6.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t6.py#L66,t6.py})
@end table

@item gmsh/model/geo/mesh/setTransfiniteVolume
Set a transfinite meshing constraint on the surface @code{tag} in the built-in CAD kernel representation. @code{cornerTags} can be used to specify the (6 or 8) corners of the transfinite interpolation explicitly.

@table @asis
@item Input:
@code{tag} (integer), @code{cornerTags = []} (vector of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2502,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2212,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6851,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6073,Julia}
@end table

@item gmsh/model/geo/mesh/setRecombine
Set a recombination meshing constraint on the entity of dimension @code{dim} and tag @code{tag} in the built-in CAD kernel representation. Currently only entities of dimension 2 (to recombine triangles into quadrangles) are supported; @code{angle} specifies the threshold angle for the simple recombination algorithm.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{angle = 45.} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2512,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2221,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6874,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6096,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t6.cpp#L71,t6.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t6.py#L70,t6.py})
@end table

@item gmsh/model/geo/mesh/setSmoothing
Set a smoothing meshing constraint on the entity of dimension @code{dim} and tag @code{tag} in the built-in CAD kernel representation. @code{val} iterations of a Laplace smoother are applied.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{val} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2521,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2229,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6900,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6118,Julia}
@end table

@item gmsh/model/geo/mesh/setReverse
Set a reverse meshing constraint on the entity of dimension @code{dim} and tag @code{tag} in the built-in CAD kernel representation. If @code{val} is true, the mesh orientation will be reversed with respect to the natural mesh orientation (i.e. the orientation consistent with the orientation of the geometry). If @code{val} is false, the mesh is left as-is.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{val = True} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2532,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2239,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6924,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6142,Julia}
@end table

@item gmsh/model/geo/mesh/setAlgorithm
Set the meshing algorithm on the entity of dimension @code{dim} and tag @code{tag} in the built-in CAD kernel representation. Currently only supported for @code{dim} == 2.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{val} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2541,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2247,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6950,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6163,Julia}
@end table

@item gmsh/model/geo/mesh/setSizeFromBoundary
Force the mesh size to be extended from the boundary, or not, for the entity of dimension @code{dim} and tag @code{tag} in the built-in CAD kernel representation. Currently only supported for @code{dim} == 2.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer), @code{val} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2550,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2255,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6974,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6185,Julia}
@end table

@end ftable

@node Namespace gmsh/model/occ, Namespace gmsh/model/occ/mesh, Namespace gmsh/model/geo/mesh, Gmsh application programming interface
@section Namespace @code{gmsh/model/occ}: OpenCASCADE CAD kernel functions

@ftable @code
@item gmsh/model/occ/addPoint
Add a geometrical point in the OpenCASCADE CAD representation, at coordinates (@code{x}, @code{y}, @code{z}). If @code{meshSize} is > 0, add a meshing constraint at that point. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the point. (Note that the point will be added in the current model only after @code{synchronize} is called. This behavior holds for all the entities added in the occ module.)

@table @asis
@item Input:
@code{x} (double), @code{y} (double), @code{z} (double), @code{meshSize = 0.} (double), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2569,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2266,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7004,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6227,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t19.cpp#L67,t19.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t19.py#L59,t19.py}, @url{@value{GITLAB-PREFIX}/examples/api/bspline_bezier_patches.py#L6,bspline_bezier_patches.py}, @url{@value{GITLAB-PREFIX}/examples/api/bspline_bezier_trimmed.py#L6,bspline_bezier_trimmed.py}, @url{@value{GITLAB-PREFIX}/examples/api/bspline_filling.py#L14,bspline_filling.py}, @url{@value{GITLAB-PREFIX}/examples/api/circle_arc.py#L4,circle_arc.py}, ...)
@end table

@item gmsh/model/occ/addLine
Add a straight line segment in the OpenCASCADE CAD representation, between the two points with tags @code{startTag} and @code{endTag}. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the line.

@table @asis
@item Input:
@code{startTag} (integer), @code{endTag} (integer), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2581,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2277,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7038,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6252,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/crack.py#L13,crack.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_2d.py#L67,naca_boundary_layer_2d.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_3d.py#L70,naca_boundary_layer_3d.py}, @url{@value{GITLAB-PREFIX}/examples/api/relocate_nodes.py#L10,relocate_nodes.py}, @url{@value{GITLAB-PREFIX}/examples/api/stl_to_brep.py#L41,stl_to_brep.py})
@end table

@item gmsh/model/occ/addCircleArc
Add a circle arc in the OpenCASCADE CAD representation, between the two points with tags @code{startTag} and @code{endTag}, with middle point @code{middleTag}. If @code{center} is true, the middle point is the center of the circle; otherwise the circle goes through the middle point. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the circle arc.

@table @asis
@item Input:
@code{startTag} (integer), @code{middleTag} (integer), @code{endTag} (integer), @code{tag = -1} (integer), @code{center = True} (boolean)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2593,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2288,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7066,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6280,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/circle_arc.py#L8,circle_arc.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_2d.py#L64,naca_boundary_layer_2d.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_3d.py#L60,naca_boundary_layer_3d.py})
@end table

@item gmsh/model/occ/addCircle
Add a circle of center (@code{x}, @code{y}, @code{z}) and radius @code{r} in the OpenCASCADE CAD representation. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. If @code{angle1} and @code{angle2} are specified, create a circle arc between the two angles. If a vector @code{zAxis} of size 3 is provided, use it as the normal to the circle plane (z-axis). If a vector @code{xAxis} of size 3 is provided in addition to @code{zAxis}, use it to define the x-axis. Return the tag of the circle.

@table @asis
@item Input:
@code{x} (double), @code{y} (double), @code{z} (double), @code{r} (double), @code{tag = -1} (integer), @code{angle1 = 0.} (double), @code{angle2 = 2*pi} (double), @code{zAxis = []} (vector of doubles), @code{xAxis = []} (vector of doubles)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2608,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2302,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7100,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6314,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t19.cpp#L25,t19.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t19.py#L23,t19.py}, @url{@value{GITLAB-PREFIX}/examples/api/bspline_bezier_trimmed.py#L30,bspline_bezier_trimmed.py}, @url{@value{GITLAB-PREFIX}/examples/api/closest_point.py#L7,closest_point.py}, @url{@value{GITLAB-PREFIX}/examples/api/prim_axis.py#L6,prim_axis.py}, @url{@value{GITLAB-PREFIX}/examples/api/trimmed.py#L9,trimmed.py})
@end table

@item gmsh/model/occ/addEllipseArc
Add an ellipse arc in the OpenCASCADE CAD representation, between the two points @code{startTag} and @code{endTag}, and with center @code{centerTag} and major axis point @code{majorTag}. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the ellipse arc. Note that OpenCASCADE does not allow creating ellipse arcs with the major radius smaller than the minor radius.

@table @asis
@item Input:
@code{startTag} (integer), @code{centerTag} (integer), @code{majorTag} (integer), @code{endTag} (integer), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2626,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2319,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7145,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6343,Julia}
@end table

@item gmsh/model/occ/addEllipse
Add an ellipse of center (@code{x}, @code{y}, @code{z}) and radii @code{r1} and @code{r2} (with @code{r1} >= @code{r2}) along the x- and y-axes, respectively, in the OpenCASCADE CAD representation. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. If @code{angle1} and @code{angle2} are specified, create an ellipse arc between the two angles. If a vector @code{zAxis} of size 3 is provided, use it as the normal to the ellipse plane (z-axis). If a vector @code{xAxis} of size 3 is provided in addition to @code{zAxis}, use it to define the x-axis. Return the tag of the ellipse.

@table @asis
@item Input:
@code{x} (double), @code{y} (double), @code{z} (double), @code{r1} (double), @code{r2} (double), @code{tag = -1} (integer), @code{angle1 = 0.} (double), @code{angle2 = 2*pi} (double), @code{zAxis = []} (vector of doubles), @code{xAxis = []} (vector of doubles)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2642,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2334,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7179,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6379,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/prim_axis.py#L11,prim_axis.py})
@end table

@item gmsh/model/occ/addSpline
Add a spline (C2 b-spline) curve in the OpenCASCADE CAD representation, going through the points @code{pointTags}. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Create a periodic curve if the first and last points are the same. Return the tag of the spline curve. If the @code{tangents} vector contains 6 entries, use them as concatenated x, y, z components of the initial and final tangents of the b-spline; if it contains 3 times as many entries as the number of points, use them as concatenated x, y, z components of the tangents at each point, unless the norm of the tangent is zero.

@table @asis
@item Input:
@code{pointTags} (vector of integers), @code{tag = -1} (integer), @code{tangents = []} (vector of doubles)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2664,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2355,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7227,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6409,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t19.cpp#L71,t19.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t19.py#L62,t19.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_2d.py#L59,naca_boundary_layer_2d.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_3d.py#L56,naca_boundary_layer_3d.py}, @url{@value{GITLAB-PREFIX}/examples/api/pipe.py#L20,pipe.py}, @url{@value{GITLAB-PREFIX}/examples/api/spline.py#L12,spline.py}, ...)
@end table

@item gmsh/model/occ/addBSpline
Add a b-spline curve of degree @code{degree} in the OpenCASCADE CAD representation, with @code{pointTags} control points. If @code{weights}, @code{knots} or @code{multiplicities} are not provided, default parameters are computed automatically. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Create a periodic curve if the first and last points are the same. Return the tag of the b-spline curve.

@table @asis
@item Input:
@code{pointTags} (vector of integers), @code{tag = -1} (integer), @code{degree = 3} (integer), @code{weights = []} (vector of doubles), @code{knots = []} (vector of doubles), @code{multiplicities = []} (vector of integers)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2676,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2366,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7262,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6439,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/bspline_filling.py#L18,bspline_filling.py}, @url{@value{GITLAB-PREFIX}/examples/api/spline.py#L13,spline.py})
@end table

@item gmsh/model/occ/addBezier
Add a Bezier curve in the OpenCASCADE CAD representation, with @code{pointTags} control points. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the Bezier curve.

@table @asis
@item Input:
@code{pointTags} (vector of integers), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2688,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2377,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7302,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6462,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/spline.py#L14,spline.py})
@end table

@item gmsh/model/occ/addWire
Add a wire (open or closed) in the OpenCASCADE CAD representation, formed by the curves @code{curveTags}. Note that an OpenCASCADE wire can be made of curves that share geometrically identical (but topologically different) points. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the wire.

@table @asis
@item Input:
@code{curveTags} (vector of integers), @code{tag = -1} (integer), @code{checkClosed = False} (boolean)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2698,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2386,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7328,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6488,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t19.cpp#L74,t19.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t19.py#L65,t19.py}, @url{@value{GITLAB-PREFIX}/examples/api/bspline_bezier_trimmed.py#L31,bspline_bezier_trimmed.py}, @url{@value{GITLAB-PREFIX}/examples/api/bspline_filling.py#L36,bspline_filling.py}, @url{@value{GITLAB-PREFIX}/examples/api/pipe.py#L21,pipe.py}, @url{@value{GITLAB-PREFIX}/examples/api/trimmed.py#L10,trimmed.py})
@end table

@item gmsh/model/occ/addCurveLoop
Add a curve loop (a closed wire) in the OpenCASCADE CAD representation, formed by the curves @code{curveTags}. @code{curveTags} should contain tags of curves forming a closed loop. Negative tags can be specified for compatibility with the built-in kernel, but are simply ignored: the wire is oriented according to the orientation of its first curve. Note that an OpenCASCADE curve loop can be made of curves that share geometrically identical (but topologically different) points. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the curve loop.

@table @asis
@item Input:
@code{curveTags} (vector of integers), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2713,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2400,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7358,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6516,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t19.cpp#L26,t19.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t19.py#L24,t19.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_2d.py#L73,naca_boundary_layer_2d.py}, @url{@value{GITLAB-PREFIX}/examples/api/relocate_nodes.py#L15,relocate_nodes.py}, @url{@value{GITLAB-PREFIX}/examples/api/stl_to_brep.py#L46,stl_to_brep.py}, @url{@value{GITLAB-PREFIX}/examples/api/surface_filling.py#L16,surface_filling.py})
@end table

@item gmsh/model/occ/addRectangle
Add a rectangle in the OpenCASCADE CAD representation, with lower left corner at (@code{x}, @code{y}, @code{z}) and upper right corner at (@code{x} + @code{dx}, @code{y} + @code{dy}, @code{z}). If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Round the corners if @code{roundedRadius} is nonzero. Return the tag of the rectangle.

@table @asis
@item Input:
@code{x} (double), @code{y} (double), @code{z} (double), @code{dx} (double), @code{dy} (double), @code{tag = -1} (integer), @code{roundedRadius = 0.} (double)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2723,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2409,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7390,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6546,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t17.cpp#L28,t17.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t20.cpp#L62,t20.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L39,t21.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x6.cpp#L20,x6.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t17.py#L27,t17.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t20.py#L52,t20.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L31,t21.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x6.py#L19,x6.py}, @url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L75,adapt_mesh.py}, ...)
@end table

@item gmsh/model/occ/addDisk
Add a disk in the OpenCASCADE CAD representation, with center (@code{xc}, @code{yc}, @code{zc}) and radius @code{rx} along the x-axis and @code{ry} along the y-axis (@code{rx} >= @code{ry}). If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. If a vector @code{zAxis} of size 3 is provided, use it as the normal to the disk (z-axis). If a vector @code{xAxis} of size 3 is provided in addition to @code{zAxis}, use it to define the x-axis. Return the tag of the disk.

@table @asis
@item Input:
@code{xc} (double), @code{yc} (double), @code{zc} (double), @code{rx} (double), @code{ry} (double), @code{tag = -1} (integer), @code{zAxis = []} (vector of doubles), @code{xAxis = []} (vector of doubles)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2740,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2425,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7427,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6578,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t19.cpp#L77,t19.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t19.py#L68,t19.py}, @url{@value{GITLAB-PREFIX}/examples/api/pipe.py#L23,pipe.py}, @url{@value{GITLAB-PREFIX}/examples/api/poisson.py#L37,poisson.py}, @url{@value{GITLAB-PREFIX}/examples/api/prim_axis.py#L15,prim_axis.py})
@end table

@item gmsh/model/occ/addPlaneSurface
Add a plane surface in the OpenCASCADE CAD representation, defined by one or more curve loops (or closed wires) @code{wireTags}. The first curve loop defines the exterior contour; additional curve loop define holes. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the surface.

@table @asis
@item Input:
@code{wireTags} (vector of integers), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2756,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2440,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7470,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6603,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_2d.py#L118,naca_boundary_layer_2d.py}, @url{@value{GITLAB-PREFIX}/examples/api/stl_to_brep.py#L47,stl_to_brep.py})
@end table

@item gmsh/model/occ/addSurfaceFilling
Add a surface in the OpenCASCADE CAD representation, filling the curve loop @code{wireTag}. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the surface. If @code{pointTags} are provided, force the surface to pass through the given points. The other optional arguments are @code{degree} (the degree of the energy criterion to minimize for computing the deformation of the surface), @code{numPointsOnCurves} (the average number of points for discretisation of the bounding curves), @code{numIter} (the maximum number of iterations of the optimization process), @code{anisotropic} (improve performance when the ratio of the length along the two parametric coordinates of the surface is high), @code{tol2d} (tolerance to the constraints in the parametric plane of the surface), @code{tol3d} (the maximum distance allowed between the support surface and the constraints), @code{tolAng} (the maximum angle allowed between the normal of the surface and the constraints), @code{tolCurv} (the maximum difference of curvature allowed between the surface and the constraint), @code{maxDegree} (the highest degree which the polynomial defining the filling surface can have) and, @code{maxSegments} (the largest number of segments which the filling surface can have).

@table @asis
@item Input:
@code{wireTag} (integer), @code{tag = -1} (integer), @code{pointTags = []} (vector of integers), @code{degree = 3} (integer), @code{numPointsOnCurves = 15} (integer), @code{numIter = 2} (integer), @code{anisotropic = False} (boolean), @code{tol2d = 0.00001} (double), @code{tol3d = 0.0001} (double), @code{tolAng = 0.01} (double), @code{tolCurv = 0.1} (double), @code{maxDegree = 8} (integer), @code{maxSegments = 9} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2780,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2462,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7498,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6651,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/relocate_nodes.py#L21,relocate_nodes.py}, @url{@value{GITLAB-PREFIX}/examples/api/surface_filling.py#L19,surface_filling.py})
@end table

@item gmsh/model/occ/addBSplineFilling
Add a BSpline surface in the OpenCASCADE CAD representation, filling the curve loop @code{wireTag}. The curve loop should be made of 2, 3 or 4 curves. The optional @code{type} argument specifies the type of filling: "Stretch" creates the flattest patch, "Curved" (the default) creates the most rounded patch, and "Coons" creates a rounded patch with less depth than "Curved". If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the surface.

@table @asis
@item Input:
@code{wireTag} (integer), @code{tag = -1} (integer), @code{type = ""} (string)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2803,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2484,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7561,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6679,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/bspline_filling.py#L39,bspline_filling.py}, @url{@value{GITLAB-PREFIX}/examples/api/surface_filling.py#L22,surface_filling.py})
@end table

@item gmsh/model/occ/addBezierFilling
Add a Bezier surface in the OpenCASCADE CAD representation, filling the curve loop @code{wireTag}. The curve loop should be made of 2, 3 or 4 Bezier curves. The optional @code{type} argument specifies the type of filling: "Stretch" creates the flattest patch, "Curved" (the default) creates the most rounded patch, and "Coons" creates a rounded patch with less depth than "Curved". If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the surface.

@table @asis
@item Input:
@code{wireTag} (integer), @code{tag = -1} (integer), @code{type = ""} (string)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2816,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2496,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7592,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6707,Julia}
@end table

@item gmsh/model/occ/addBSplineSurface
Add a b-spline surface of degree @code{degreeU} x @code{degreeV} in the OpenCASCADE CAD representation, with @code{pointTags} control points given as a single vector [Pu1v1, ... Pu@code{numPointsU}v1, Pu1v2, ...]. If @code{weights}, @code{knotsU}, @code{knotsV}, @code{multiplicitiesU} or @code{multiplicitiesV} are not provided, default parameters are computed automatically. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. If @code{wireTags} is provided, trim the b-spline patch using the provided wires: the first wire defines the external contour, the others define holes. If @code{wire3D} is set, consider wire curves as 3D curves and project them on the b-spline surface; otherwise consider the wire curves as defined in the parametric space of the surface. Return the tag of the b-spline surface.

@table @asis
@item Input:
@code{pointTags} (vector of integers), @code{numPointsU} (integer), @code{tag = -1} (integer), @code{degreeU = 3} (integer), @code{degreeV = 3} (integer), @code{weights = []} (vector of doubles), @code{knotsU = []} (vector of doubles), @code{knotsV = []} (vector of doubles), @code{multiplicitiesU = []} (vector of integers), @code{multiplicitiesV = []} (vector of integers), @code{wireTags = []} (vector of integers), @code{wire3D = False} (boolean)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2833,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2512,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7623,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6748,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/bspline_bezier_patches.py#L55,bspline_bezier_patches.py}, @url{@value{GITLAB-PREFIX}/examples/api/bspline_bezier_trimmed.py#L41,bspline_bezier_trimmed.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain_bspline.py#L20,terrain_bspline.py})
@end table

@item gmsh/model/occ/addBezierSurface
Add a Bezier surface in the OpenCASCADE CAD representation, with @code{pointTags} control points given as a single vector [Pu1v1, ... Pu@code{numPointsU}v1, Pu1v2, ...]. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. If @code{wireTags} is provided, trim the Bezier patch using the provided wires: the first wire defines the external contour, the others define holes. If @code{wire3D} is set, consider wire curves as 3D curves and project them on the Bezier surface; otherwise consider the wire curves as defined in the parametric space of the surface. Return the tag of the Bezier surface.

@table @asis
@item Input:
@code{pointTags} (vector of integers), @code{numPointsU} (integer), @code{tag = -1} (integer), @code{wireTags = []} (vector of integers), @code{wire3D = False} (boolean)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2857,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2535,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7683,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6779,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/bspline_bezier_patches.py#L52,bspline_bezier_patches.py})
@end table

@item gmsh/model/occ/addTrimmedSurface
Trim the surface @code{surfaceTag} with the wires @code{wireTags}, replacing any existing trimming curves. The first wire defines the external contour, the others define holes. If @code{wire3D} is set, consider wire curves as 3D curves and project them on the surface; otherwise consider the wire curves as defined in the parametric space of the surface. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the trimmed surface.

@table @asis
@item Input:
@code{surfaceTag} (integer), @code{wireTags = []} (vector of integers), @code{wire3D = False} (boolean), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2872,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2549,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7722,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6807,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/trimmed.py#L24,trimmed.py})
@end table

@item gmsh/model/occ/addSurfaceLoop
Add a surface loop (a closed shell) in the OpenCASCADE CAD representation, formed by @code{surfaceTags}.  If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the surface loop. Setting @code{sewing} allows one to build a shell made of surfaces that share geometrically identical (but topologically different) curves.

@table @asis
@item Input:
@code{surfaceTags} (vector of integers), @code{tag = -1} (integer), @code{sewing = False} (boolean)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2885,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2560,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7756,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6833,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/stl_to_brep.py#L56,stl_to_brep.py})
@end table

@item gmsh/model/occ/addVolume
Add a volume (a region) in the OpenCASCADE CAD representation, defined by one or more surface loops @code{shellTags}. The first surface loop defines the exterior boundary; additional surface loop define holes. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the volume.

@table @asis
@item Input:
@code{shellTags} (vector of integers), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2896,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2570,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7786,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6858,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/stl_to_brep.py#L57,stl_to_brep.py})
@end table

@item gmsh/model/occ/addSphere
Add a sphere of center (@code{xc}, @code{yc}, @code{zc}) and radius @code{r} in the OpenCASCADE CAD representation. The optional @code{angle1} and @code{angle2} arguments define the polar angle opening (from -Pi/2 to Pi/2). The optional @code{angle3} argument defines the azimuthal opening (from 0 to 2*Pi). If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the sphere.

@table @asis
@item Input:
@code{xc} (double), @code{yc} (double), @code{zc} (double), @code{radius} (double), @code{tag = -1} (integer), @code{angle1 = -pi/2} (double), @code{angle2 = pi/2} (double), @code{angle3 = 2*pi} (double)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2907,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2580,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7814,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6890,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t16.cpp#L53,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t18.cpp#L61,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x5.cpp#L23,x5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t16.py#L47,t16.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t18.py#L59,t18.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x5.py#L20,x5.py}, @url{@value{GITLAB-PREFIX}/examples/api/boolean.py#L21,boolean.py}, @url{@value{GITLAB-PREFIX}/examples/api/extend_field.py#L6,extend_field.py}, ...)
@end table

@item gmsh/model/occ/addBox
Add a parallelepipedic box in the OpenCASCADE CAD representation, defined by a point (@code{x}, @code{y}, @code{z}) and the extents along the x-, y- and z-axes. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the box.

@table @asis
@item Input:
@code{x} (double), @code{y} (double), @code{z} (double), @code{dx} (double), @code{dy} (double), @code{dz} (double), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2922,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2594,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7854,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6919,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t16.cpp#L31,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t18.cpp#L27,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x4.cpp#L58,x4.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x5.cpp#L24,x5.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x7.cpp#L24,x7.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t16.py#L28,t16.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t18.py#L26,t18.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x4.py#L56,x4.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x5.py#L21,x5.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x7.py#L21,x7.py}, ...)
@end table

@item gmsh/model/occ/addCylinder
Add a cylinder in the OpenCASCADE CAD representation, defined by the center (@code{x}, @code{y}, @code{z}) of its first circular face, the 3 components (@code{dx}, @code{dy}, @code{dz}) of the vector defining its axis and its radius @code{r}. The optional @code{angle} argument defines the angular opening (from 0 to 2*Pi). If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the cylinder.

@table @asis
@item Input:
@code{x} (double), @code{y} (double), @code{z} (double), @code{dx} (double), @code{dy} (double), @code{dz} (double), @code{r} (double), @code{tag = -1} (integer), @code{angle = 2*pi} (double)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2938,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2609,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7890,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6952,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/boolean.py#L23,boolean.py}, @url{@value{GITLAB-PREFIX}/examples/api/gui.py#L24,gui.py}, @url{@value{GITLAB-PREFIX}/examples/api/tube_boundary_layer.py#L14,tube_boundary_layer.py})
@end table

@item gmsh/model/occ/addCone
Add a cone in the OpenCASCADE CAD representation, defined by the center (@code{x}, @code{y}, @code{z}) of its first circular face, the 3 components of the vector (@code{dx}, @code{dy}, @code{dz}) defining its axis and the two radii @code{r1} and @code{r2} of the faces (these radii can be zero). If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. @code{angle} defines the optional angular opening (from 0 to 2*Pi). Return the tag of the cone.

@table @asis
@item Input:
@code{x} (double), @code{y} (double), @code{z} (double), @code{dx} (double), @code{dy} (double), @code{dz} (double), @code{r1} (double), @code{r2} (double), @code{tag = -1} (integer), @code{angle = 2*pi} (double)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2956,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2626,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7932,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L6986,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x1.cpp#L31,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x1.py#L27,x1.py})
@end table

@item gmsh/model/occ/addWedge
Add a right angular wedge in the OpenCASCADE CAD representation, defined by the right-angle point (@code{x}, @code{y}, @code{z}) and the 3 extends along the x-, y- and z-axes (@code{dx}, @code{dy}, @code{dz}). If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. The optional argument @code{ltx} defines the top extent along the x-axis. If a vector @code{zAxis} of size 3 is provided, use it to define the z-axis. Return the tag of the wedge.

@table @asis
@item Input:
@code{x} (double), @code{y} (double), @code{z} (double), @code{dx} (double), @code{dy} (double), @code{dz} (double), @code{tag = -1} (integer), @code{ltx = 0.} (double), @code{zAxis = []} (vector of doubles)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2976,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2645,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L7976,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7019,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/prim_axis.py#L21,prim_axis.py})
@end table

@item gmsh/model/occ/addTorus
Add a torus in the OpenCASCADE CAD representation, defined by its center (@code{x}, @code{y}, @code{z}) and its 2 radii @code{r} and @code{r2}. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. The optional argument @code{angle} defines the angular opening (from 0 to 2*Pi). If a vector @code{zAxis} of size 3 is provided, use it to define the z-axis. Return the tag of the torus.

@table @asis
@item Input:
@code{x} (double), @code{y} (double), @code{z} (double), @code{r1} (double), @code{r2} (double), @code{tag = -1} (integer), @code{angle = 2*pi} (double), @code{zAxis = []} (vector of doubles)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2994,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2662,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8020,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7050,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/prim_axis.py#L18,prim_axis.py})
@end table

@item gmsh/model/occ/addThruSections
Add a volume (if the optional argument @code{makeSolid} is set) or surfaces in the OpenCASCADE CAD representation, defined through the open or closed wires @code{wireTags}. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically. The new entities are returned in @code{outDimTags} as a vector of (dim, tag) pairs. If the optional argument @code{makeRuled} is set, the surfaces created on the boundary are forced to be ruled surfaces. If @code{maxDegree} is positive, set the maximal degree of resulting surface. The optional argument @code{continuity} allows to specify the continuity of the resulting shape ("C0", "G1", "C1", "G2", "C2", "C3", "CN"). The optional argument @code{parametrization} sets the parametrization type ("ChordLength", "Centripetal", "IsoParametric"). The optional argument @code{smoothing} determines if smoothing is applied.

@table @asis
@item Input:
@code{wireTags} (vector of integers), @code{tag = -1} (integer), @code{makeSolid = True} (boolean), @code{makeRuled = False} (boolean), @code{maxDegree = -1} (integer), @code{continuity = ""} (string), @code{parametrization = ""} (string), @code{smoothing = False} (boolean)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3017,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2684,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8061,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7088,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t19.cpp#L32,t19.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t19.py#L29,t19.py})
@end table

@item gmsh/model/occ/addThickSolid
Add a hollowed volume in the OpenCASCADE CAD representation, built from an initial volume @code{volumeTag} and a set of faces from this volume @code{excludeSurfaceTags}, which are to be removed. The remaining faces of the volume become the walls of the hollowed solid, with thickness @code{offset}. If @code{tag} is positive, set the tag explicitly; otherwise a new tag is selected automatically.

@table @asis
@item Input:
@code{volumeTag} (integer), @code{excludeSurfaceTags} (vector of integers), @code{offset} (double), @code{tag = -1} (integer)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3035,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2701,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8111,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7120,Julia}
@end table

@item gmsh/model/occ/extrude
Extrude the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the OpenCASCADE CAD representation, using a translation along (@code{dx}, @code{dy}, @code{dz}). Return extruded entities in @code{outDimTags}. If the @code{numElements} vector is not empty, also extrude the mesh: the entries in @code{numElements} give the number of elements in each layer. If the @code{height} vector is not empty, it provides the (cumulative) height of the different layers, normalized to 1. If @code{recombine} is set, recombine the mesh in the layers.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{dx} (double), @code{dy} (double), @code{dz} (double), @code{numElements = []} (vector of integers), @code{heights = []} (vector of doubles), @code{recombine = False} (boolean)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3050,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2715,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8147,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7157,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_3d.py#L63,naca_boundary_layer_3d.py})
@end table

@item gmsh/model/occ/revolve
Extrude the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the OpenCASCADE CAD representation, using a rotation of @code{angle} radians around the axis of revolution defined by the point (@code{x}, @code{y}, @code{z}) and the direction (@code{ax}, @code{ay}, @code{az}). Return extruded entities in @code{outDimTags}. If the @code{numElements} vector is not empty, also extrude the mesh: the entries in @code{numElements} give the number of elements in each layer. If the @code{height} vector is not empty, it provides the (cumulative) height of the different layers, normalized to 1. When the mesh is extruded the angle should be strictly smaller than 2*Pi. If @code{recombine} is set, recombine the mesh in the layers.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{x} (double), @code{y} (double), @code{z} (double), @code{ax} (double), @code{ay} (double), @code{az} (double), @code{angle} (double), @code{numElements = []} (vector of integers), @code{heights = []} (vector of doubles), @code{recombine = False} (boolean)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3071,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2735,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8191,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7201,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_3d.py#L84,naca_boundary_layer_3d.py})
@end table

@item gmsh/model/occ/addPipe
Add a pipe in the OpenCASCADE CAD representation, by extruding the entities @code{dimTags} (given as a vector of (dim, tag) pairs) along the wire @code{wireTag}. The type of sweep can be specified with @code{trihedron} (possible values: "DiscreteTrihedron", "CorrectedFrenet", "Fixed", "Frenet", "ConstantNormal", "Darboux", "GuideAC", "GuidePlan", "GuideACWithContact", "GuidePlanWithContact"). If @code{trihedron} is not provided, "DiscreteTrihedron" is assumed. Return the pipe in @code{outDimTags}.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{wireTag} (integer), @code{trihedron = ""} (string)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3093,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2756,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8246,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7235,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t19.cpp#L82,t19.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t19.py#L73,t19.py}, @url{@value{GITLAB-PREFIX}/examples/api/pipe.py#L29,pipe.py})
@end table

@item gmsh/model/occ/fillet
Fillet the volumes @code{volumeTags} on the curves @code{curveTags} with radii @code{radii}. The @code{radii} vector can either contain a single radius, as many radii as @code{curveTags}, or twice as many as @code{curveTags} (in which case different radii are provided for the begin and end points of the curves). Return the filleted entities in @code{outDimTags} as a vector of (dim, tag) pairs. Remove the original volume if @code{removeVolume} is set.

@table @asis
@item Input:
@code{volumeTags} (vector of integers), @code{curveTags} (vector of integers), @code{radii} (vector of doubles), @code{removeVolume = True} (boolean)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3106,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2768,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8281,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7270,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t19.cpp#L55,t19.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t19.py#L47,t19.py})
@end table

@item gmsh/model/occ/chamfer
Chamfer the volumes @code{volumeTags} on the curves @code{curveTags} with distances @code{distances} measured on surfaces @code{surfaceTags}. The @code{distances} vector can either contain a single distance, as many distances as @code{curveTags} and @code{surfaceTags}, or twice as many as @code{curveTags} and @code{surfaceTags} (in which case the first in each pair is measured on the corresponding surface in @code{surfaceTags}, the other on the other adjacent surface). Return the chamfered entities in @code{outDimTags}. Remove the original volume if @code{removeVolume} is set.

@table @asis
@item Input:
@code{volumeTags} (vector of integers), @code{curveTags} (vector of integers), @code{surfaceTags} (vector of integers), @code{distances} (vector of doubles), @code{removeVolume = True} (boolean)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3122,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2783,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8318,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7304,Julia}
@end table

@item gmsh/model/occ/fuse
Compute the boolean union (the fusion) of the entities @code{objectDimTags} and @code{toolDimTags} (vectors of (dim, tag) pairs) in the OpenCASCADE CAD representation. Return the resulting entities in @code{outDimTags}. If @code{tag} is positive, try to set the tag explicitly (only valid if the boolean operation results in a single entity). Remove the object if @code{removeObject} is set. Remove the tool if @code{removeTool} is set.

@table @asis
@item Input:
@code{objectDimTags} (vector of pairs of integers), @code{toolDimTags} (vector of pairs of integers), @code{tag = -1} (integer), @code{removeObject = True} (boolean), @code{removeTool = True} (boolean)
@item Output:
@code{outDimTags} (vector of pairs of integers), @code{outDimTagsMap} (vector of vectors of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3137,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2797,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8360,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7338,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x5.cpp#L27,x5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x5.py#L22,x5.py}, @url{@value{GITLAB-PREFIX}/examples/api/boolean.py#L26,boolean.py}, @url{@value{GITLAB-PREFIX}/examples/api/gui.py#L27,gui.py}, @url{@value{GITLAB-PREFIX}/examples/api/tube_boundary_layer.py#L16,tube_boundary_layer.py})
@end table

@item gmsh/model/occ/intersect
Compute the boolean intersection (the common parts) of the entities @code{objectDimTags} and @code{toolDimTags} (vectors of (dim, tag) pairs) in the OpenCASCADE CAD representation. Return the resulting entities in @code{outDimTags}. If @code{tag} is positive, try to set the tag explicitly (only valid if the boolean operation results in a single entity). Remove the object if @code{removeObject} is set. Remove the tool if @code{removeTool} is set.

@table @asis
@item Input:
@code{objectDimTags} (vector of pairs of integers), @code{toolDimTags} (vector of pairs of integers), @code{tag = -1} (integer), @code{removeObject = True} (boolean), @code{removeTool = True} (boolean)
@item Output:
@code{outDimTags} (vector of pairs of integers), @code{outDimTagsMap} (vector of vectors of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3153,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2812,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8403,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7387,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/boolean.py#L22,boolean.py}, @url{@value{GITLAB-PREFIX}/examples/api/gui.py#L23,gui.py})
@end table

@item gmsh/model/occ/cut
Compute the boolean difference between the entities @code{objectDimTags} and @code{toolDimTags} (given as vectors of (dim, tag) pairs) in the OpenCASCADE CAD representation. Return the resulting entities in @code{outDimTags}. If @code{tag} is positive, try to set the tag explicitly (only valid if the boolean operation results in a single entity). Remove the object if @code{removeObject} is set. Remove the tool if @code{removeTool} is set.

@table @asis
@item Input:
@code{objectDimTags} (vector of pairs of integers), @code{toolDimTags} (vector of pairs of integers), @code{tag = -1} (integer), @code{removeObject = True} (boolean), @code{removeTool = True} (boolean)
@item Output:
@code{outDimTags} (vector of pairs of integers), @code{outDimTagsMap} (vector of vectors of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3169,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2827,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8446,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7436,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t16.cpp#L41,t16.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t16.py#L32,t16.py}, @url{@value{GITLAB-PREFIX}/examples/api/boolean.py#L27,boolean.py}, @url{@value{GITLAB-PREFIX}/examples/api/extend_field.py#L7,extend_field.py}, @url{@value{GITLAB-PREFIX}/examples/api/gui.py#L28,gui.py}, @url{@value{GITLAB-PREFIX}/examples/api/spherical_surf.py#L13,spherical_surf.py})
@end table

@item gmsh/model/occ/fragment
Compute the boolean fragments (general fuse) resulting from the intersection of the entities @code{objectDimTags} and @code{toolDimTags} (given as vectors of (dim, tag) pairs) in the OpenCASCADE CAD representation, making all interfaces conformal. When applied to entities of different dimensions, the lower dimensional entities will be automatically embedded in the higher dimensional entities if they are not on their boundary. Return the resulting entities in @code{outDimTags}. If @code{tag} is positive, try to set the tag explicitly (only valid if the boolean operation results in a single entity). Remove the object if @code{removeObject} is set. Remove the tool if @code{removeTool} is set.

@table @asis
@item Input:
@code{objectDimTags} (vector of pairs of integers), @code{toolDimTags} (vector of pairs of integers), @code{tag = -1} (integer), @code{removeObject = True} (boolean), @code{removeTool = True} (boolean)
@item Output:
@code{outDimTags} (vector of pairs of integers), @code{outDimTagsMap} (vector of vectors of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3189,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2846,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8489,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7488,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t16.cpp#L61,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t18.cpp#L75,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t20.cpp#L85,t20.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L43,t21.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t16.py#L54,t16.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t18.py#L70,t18.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t20.py#L68,t20.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L33,t21.py}, @url{@value{GITLAB-PREFIX}/examples/api/bspline_bezier_patches.py#L70,bspline_bezier_patches.py}, ...)
@end table

@item gmsh/model/occ/translate
Translate the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the OpenCASCADE CAD representation along (@code{dx}, @code{dy}, @code{dz}).

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{dx} (double), @code{dy} (double), @code{dz} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3201,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2857,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8536,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7528,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t19.cpp#L47,t19.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t20.cpp#L72,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t19.py#L44,t19.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t20.py#L60,t20.py})
@end table

@item gmsh/model/occ/rotate
Rotate the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the OpenCASCADE CAD representation by @code{angle} radians around the axis of revolution defined by the point (@code{x}, @code{y}, @code{z}) and the direction (@code{ax}, @code{ay}, @code{az}).

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{x} (double), @code{y} (double), @code{z} (double), @code{ax} (double), @code{ay} (double), @code{az} (double), @code{angle} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3212,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2867,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8561,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7556,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t19.cpp#L78,t19.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t20.cpp#L64,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t19.py#L69,t19.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t20.py#L54,t20.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_2d.py#L71,naca_boundary_layer_2d.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_3d.py#L92,naca_boundary_layer_3d.py}, @url{@value{GITLAB-PREFIX}/examples/api/pipe.py#L26,pipe.py})
@end table

@item gmsh/model/occ/dilate
Scale the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the OpenCASCADE CAD representation by factors @code{a}, @code{b} and @code{c} along the three coordinate axes; use (@code{x}, @code{y}, @code{z}) as the center of the homothetic transformation.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{x} (double), @code{y} (double), @code{z} (double), @code{a} (double), @code{b} (double), @code{c} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3227,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2881,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8596,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7584,Julia}
@end table

@item gmsh/model/occ/mirror
Mirror the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the OpenCASCADE CAD representation, with respect to the plane of equation @code{a} * x + @code{b} * y + @code{c} * z + @code{d} = 0.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{a} (double), @code{b} (double), @code{c} (double), @code{d} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3240,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2893,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8629,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7609,Julia}
@end table

@item gmsh/model/occ/symmetrize
Mirror the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the OpenCASCADE CAD representation, with respect to the plane of equation @code{a} * x + @code{b} * y + @code{c} * z + @code{d} = 0. (This is a deprecated synonym for @code{mirror}.)

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{a} (double), @code{b} (double), @code{c} (double), @code{d} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3252,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2904,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8657,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7634,Julia}
@end table

@item gmsh/model/occ/affineTransform
Apply a general affine transformation matrix @code{affineTransform} (16 entries of a 4x4 matrix, by row; only the 12 first can be provided for convenience) to the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the OpenCASCADE CAD representation.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{affineTransform} (vector of doubles)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3264,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2915,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8686,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7657,Julia}
@end table

@item gmsh/model/occ/copy
Copy the entities @code{dimTags} in the OpenCASCADE CAD representation; the new entities are returned in @code{outDimTags}.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3271,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2921,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8711,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7681,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t19.cpp#L46,t19.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t20.cpp#L77,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t19.py#L43,t19.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t20.py#L64,t20.py})
@end table

@item gmsh/model/occ/remove
Remove the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the OpenCASCADE CAD representation, provided that they are not on the boundary of higher-dimensional entities. If @code{recursive} is true, remove all the entities on their boundaries, down to dimension 0.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{recursive = False} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3280,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2929,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8736,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7708,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t19.cpp#L86,t19.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t20.cpp#L91,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t19.py#L77,t19.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t20.py#L73,t20.py}, @url{@value{GITLAB-PREFIX}/examples/api/pipe.py#L31,pipe.py}, @url{@value{GITLAB-PREFIX}/examples/api/trimmed.py#L28,trimmed.py}, @url{@value{GITLAB-PREFIX}/examples/api/tube_boundary_layer.py#L17,tube_boundary_layer.py})
@end table

@item gmsh/model/occ/removeAllDuplicates
Remove all duplicate entities in the OpenCASCADE CAD representation (different entities at the same geometrical location) after intersecting (using boolean fragments) all highest dimensional entities.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3288,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2936,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8759,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7726,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/bspline_bezier_patches.py#L75,bspline_bezier_patches.py}, @url{@value{GITLAB-PREFIX}/examples/api/hybrid_order.py#L7,hybrid_order.py}, @url{@value{GITLAB-PREFIX}/examples/api/stl_to_mesh.py#L11,stl_to_mesh.py})
@end table

@item gmsh/model/occ/healShapes
Apply various healing procedures to the entities @code{dimTags} (given as a vector of (dim, tag) pairs), or to all the entities in the model if @code{dimTags} is empty, in the OpenCASCADE CAD representation. Return the healed entities in @code{outDimTags}.

@table @asis
@item Input:
@code{dimTags = []} (vector of pairs of integers), @code{tolerance = 1e-8} (double), @code{fixDegenerated = True} (boolean), @code{fixSmallEdges = True} (boolean), @code{fixSmallFaces = True} (boolean), @code{sewFaces = True} (boolean), @code{makeSolids = True} (boolean)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3296,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2942,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8775,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7755,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/bspline_bezier_patches.py#L65,bspline_bezier_patches.py}, @url{@value{GITLAB-PREFIX}/examples/api/heal.py#L11,heal.py})
@end table

@item gmsh/model/occ/convertToNURBS
Convert the entities @code{dimTags} to NURBS.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3308,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2953,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8815,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7779,Julia}
@end table

@item gmsh/model/occ/importShapes
Import BREP, STEP or IGES shapes from the file @code{fileName} in the OpenCASCADE CAD representation. The imported entities are returned in @code{outDimTags}, as a vector of (dim, tag) pairs. If the optional argument @code{highestDimOnly} is set, only import the highest dimensional entities in the file. The optional argument @code{format} can be used to force the format of the file (currently "brep", "step" or "iges").

@table @asis
@item Input:
@code{fileName} (string), @code{highestDimOnly = True} (boolean), @code{format = ""} (string)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3318,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2962,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8834,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7809,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t20.cpp#L28,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t20.py#L24,t20.py})
@end table

@item gmsh/model/occ/importShapesNativePointer
Imports an OpenCASCADE @code{shape} by providing a pointer to a native OpenCASCADE @code{TopoDS_Shape} object (passed as a pointer to void). The imported entities are returned in @code{outDimTags} as a vector of (dim, tag) pairs. If the optional argument @code{highestDimOnly} is set, only import the highest dimensional entities in @code{shape}. In Python, this function can be used for integration with PythonOCC, in which the SwigPyObject pointer of @code{TopoDS_Shape} must be passed as an int to @code{shape}, i.e., @code{shape = int(pythonocc_shape.this)}. Warning: this function is unsafe, as providing an invalid pointer will lead to undefined behavior.

@table @asis
@item Input:
@code{shape} (pointer), @code{highestDimOnly = True} (boolean)
@item Output:
@code{outDimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3334,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2977,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8867,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7842,Julia}
@end table

@item gmsh/model/occ/getEntities
Get all the OpenCASCADE entities. If @code{dim} is >= 0, return only the entities of the specified dimension (e.g. points if @code{dim} == 0). The entities are returned as a vector of (dim, tag) pairs.

@table @asis
@item Input:
@code{dim = -1} (integer)
@item Output:
@code{dimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3343,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2985,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8901,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7869,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t20.cpp#L90,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t20.py#L73,t20.py}, @url{@value{GITLAB-PREFIX}/examples/api/bspline_bezier_patches.py#L70,bspline_bezier_patches.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_3d.py#L74,naca_boundary_layer_3d.py}, @url{@value{GITLAB-PREFIX}/examples/api/tube_boundary_layer.py#L17,tube_boundary_layer.py})
@end table

@item gmsh/model/occ/getEntitiesInBoundingBox
Get the OpenCASCADE entities in the bounding box defined by the two points (@code{xmin}, @code{ymin}, @code{zmin}) and (@code{xmax}, @code{ymax}, @code{zmax}). If @code{dim} is >= 0, return only the entities of the specified dimension (e.g. points if @code{dim} == 0).

@table @asis
@item Input:
@code{xmin} (double), @code{ymin} (double), @code{zmin} (double), @code{xmax} (double), @code{ymax} (double), @code{zmax} (double), @code{dim = -1} (integer)
@item Output:
@code{dimTags} (vector of pairs of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3352,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2993,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8927,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7902,Julia}
@end table

@item gmsh/model/occ/getBoundingBox
Get the bounding box (@code{xmin}, @code{ymin}, @code{zmin}), (@code{xmax}, @code{ymax}, @code{zmax}) of the OpenCASCADE entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{xmin} (double), @code{ymin} (double), @code{zmin} (double), @code{xmax} (double), @code{ymax} (double), @code{zmax} (double)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3365,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3005,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L8966,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7934,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t20.cpp#L44,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t20.py#L34,t20.py}, @url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_3d.py#L67,naca_boundary_layer_3d.py})
@end table

@item gmsh/model/occ/getCurveLoops
Get the tags @code{curveLoopTags} of the curve loops making up the surface of tag @code{surfaceTag}, as well as the tags @code{curveTags} of the curves making up each curve loop.

@table @asis
@item Input:
@code{surfaceTag} (integer)
@item Output:
@code{curveLoopTags} (vector of integers), @code{curveTags} (vector of vectors of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3379,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3018,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9014,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7964,Julia}
@end table

@item gmsh/model/occ/getSurfaceLoops
Get the tags @code{surfaceLoopTags} of the surface loops making up the volume of tag @code{volumeTag}, as well as the tags @code{surfaceTags} of the surfaces making up each surface loop.

@table @asis
@item Input:
@code{volumeTag} (integer)
@item Output:
@code{surfaceLoopTags} (vector of integers), @code{surfaceTags} (vector of vectors of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3388,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3026,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9045,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L7997,Julia}
@end table

@item gmsh/model/occ/getMass
Get the mass of the OpenCASCADE entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{mass} (double)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3395,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3032,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9076,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8028,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/step_assembly.py#L28,step_assembly.py}, @url{@value{GITLAB-PREFIX}/examples/api/volume.py#L9,volume.py})
@end table

@item gmsh/model/occ/getCenterOfMass
Get the center of mass of the OpenCASCADE entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{x} (double), @code{y} (double), @code{z} (double)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3403,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3039,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9102,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8054,Julia}
@end table

@item gmsh/model/occ/getMatrixOfInertia
Get the matrix of inertia (by row) of the OpenCASCADE entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
@code{mat} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3413,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3048,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9138,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8080,Julia}
@end table

@item gmsh/model/occ/getMaxTag
Get the maximum tag of entities of dimension @code{dim} in the OpenCASCADE CAD representation.

@table @asis
@item Input:
@code{dim} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3421,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3055,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9165,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8104,Julia}
@end table

@item gmsh/model/occ/setMaxTag
Set the maximum tag @code{maxTag} for entities of dimension @code{dim} in the OpenCASCADE CAD representation.

@table @asis
@item Input:
@code{dim} (integer), @code{maxTag} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3427,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3060,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9187,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8124,Julia}
@end table

@item gmsh/model/occ/synchronize
Synchronize the OpenCASCADE CAD representation with the current Gmsh model. This can be called at any time, but since it involves a non trivial amount of processing, the number of synchronization points should normally be minimized. Without synchronization the entities in the OpenCASCADE CAD representation are not available to any function outside of the OpenCASCADE CAD kernel functions.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3438,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3070,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9208,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8143,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t16.cpp#L84,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t17.cpp#L29,t17.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t18.cpp#L28,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t19.cpp#L33,t19.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t20.cpp#L93,t20.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t16.py#L67,t16.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t17.py#L28,t17.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t18.py#L27,t18.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t19.py#L30,t19.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t20.py#L75,t20.py}, ...)
@end table

@end ftable

@node Namespace gmsh/model/occ/mesh, Namespace gmsh/view, Namespace gmsh/model/occ, Gmsh application programming interface
@section Namespace @code{gmsh/model/occ/mesh}: OpenCASCADE CAD kernel meshing constraints

@ftable @code
@item gmsh/model/occ/mesh/setSize
Set a mesh size constraint on the entities @code{dimTags} (given as a vector of (dim, tag) pairs) in the OpenCASCADE CAD representation. Currently only entities of dimension 0 (points) are handled.

@table @asis
@item Input:
@code{dimTags} (vector of pairs of integers), @code{size} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3447,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3075,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9232,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8172,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/naca_boundary_layer_3d.py#L89,naca_boundary_layer_3d.py})
@end table

@end ftable

@node Namespace gmsh/view, Namespace gmsh/view/option, Namespace gmsh/model/occ/mesh, Gmsh application programming interface
@section Namespace @code{gmsh/view}: post-processing view functions

@ftable @code
@item gmsh/view/add
Add a new post-processing view, with name @code{name}. If @code{tag} is positive use it (and remove the view with that tag if it already exists), otherwise associate a new tag. Return the view tag.

@table @asis
@item Input:
@code{name} (string), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3463,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3082,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9261,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8212,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t4.cpp#L111,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x3.cpp#L28,x3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x4.cpp#L33,x4.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x5.cpp#L80,x5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t4.py#L119,t4.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x3.py#L25,x3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x4.py#L31,x4.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x5.py#L68,x5.py}, @url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L89,adapt_mesh.py}, ...)
@end table

@item gmsh/view/remove
Remove the view with tag @code{tag}.

@table @asis
@item Input:
@code{tag} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3469,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3087,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9285,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8229,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/plugin.py#L28,plugin.py})
@end table

@item gmsh/view/getIndex
Get the index of the view with tag @code{tag} in the list of currently loaded views. This dynamic index (it can change when views are removed) is used to access view options.

@table @asis
@item Input:
@code{tag} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3476,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3093,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9302,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8250,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L103,adapt_mesh.py})
@end table

@item gmsh/view/getTags
Get the tags of all views.

@table @asis
@item Input:
-
@item Output:
@code{tags} (vector of integers)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3481,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3097,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9325,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8270,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t8.cpp#L81,t8.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t9.cpp#L37,t9.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t8.py#L77,t8.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t9.py#L27,t9.py}, @url{@value{GITLAB-PREFIX}/examples/api/plugin.py#L31,plugin.py})
@end table

@item gmsh/view/addModelData
Add model-based post-processing data to the view with tag @code{tag}. @code{modelName} identifies the model the data is attached to. @code{dataType} specifies the type of data, currently either "NodeData", "ElementData" or "ElementNodeData". @code{step} specifies the identifier (>= 0) of the data in a sequence. @code{tags} gives the tags of the nodes or elements in the mesh to which the data is associated. @code{data} is a vector of the same length as @code{tags}: each entry is the vector of double precision numbers representing the data associated with the corresponding tag. The optional @code{time} argument associate a time value with the data. @code{numComponents} gives the number of data components (1 for scalar data, 3 for vector data, etc.) per entity; if negative, it is automatically inferred (when possible) from the input data. @code{partition} allows one to specify data in several sub-sets.

@table @asis
@item Input:
@code{tag} (integer), @code{step} (integer), @code{modelName} (string), @code{dataType} (string), @code{tags} (vector of sizes), @code{data} (vector of vectors of doubles), @code{time = 0.} (double), @code{numComponents = -1} (integer), @code{partition = 0} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3497,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3112,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9347,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8310,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L90,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/plugin.py#L16,plugin.py}, @url{@value{GITLAB-PREFIX}/examples/api/poisson.py#L229,poisson.py}, @url{@value{GITLAB-PREFIX}/examples/api/view.py#L19,view.py})
@end table

@item gmsh/view/addHomogeneousModelData
Add homogeneous model-based post-processing data to the view with tag @code{tag}. The arguments have the same meaning as in @code{addModelData}, except that @code{data} is supposed to be homogeneous and is thus flattened in a single vector. For data types that can lead to different data sizes per tag (like "ElementNodeData"), the data should be padded.

@table @asis
@item Input:
@code{tag} (integer), @code{step} (integer), @code{modelName} (string), @code{dataType} (string), @code{tags} (vector of sizes), @code{data} (vector of doubles), @code{time = 0.} (double), @code{numComponents = -1} (integer), @code{partition = 0} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3514,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3128,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9394,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8341,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x4.cpp#L35,x4.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x4.py#L33,x4.py}, @url{@value{GITLAB-PREFIX}/examples/api/copy_mesh.py#L41,copy_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/view_element_size.py#L20,view_element_size.py}, @url{@value{GITLAB-PREFIX}/examples/api/view_renumbering.py#L18,view_renumbering.py})
@end table

@item gmsh/view/getModelData
Get model-based post-processing data from the view with tag @code{tag} at step @code{step}. Return the @code{data} associated to the nodes or the elements with tags @code{tags}, as well as the @code{dataType} and the number of components @code{numComponents}.

@table @asis
@item Input:
@code{tag} (integer), @code{step} (integer)
@item Output:
@code{dataType} (string), @code{tags} (vector of sizes), @code{data} (vector of vectors of doubles), @code{time} (double), @code{numComponents} (integer)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3530,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3143,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9434,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8369,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/get_data_perf.py#L20,get_data_perf.py}, @url{@value{GITLAB-PREFIX}/examples/api/mesh_quality.py#L19,mesh_quality.py}, @url{@value{GITLAB-PREFIX}/examples/api/plugin.py#L20,plugin.py})
@end table

@item gmsh/view/getHomogeneousModelData
Get homogeneous model-based post-processing data from the view with tag @code{tag} at step @code{step}. The arguments have the same meaning as in @code{getModelData}, except that @code{data} is returned flattened in a single vector, with the appropriate padding if necessary.

@table @asis
@item Input:
@code{tag} (integer), @code{step} (integer)
@item Output:
@code{dataType} (string), @code{tags} (vector of sizes), @code{data} (vector of doubles), @code{time} (double), @code{numComponents} (integer)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3544,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3156,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9480,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8411,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/get_data_perf.py#L25,get_data_perf.py})
@end table

@item gmsh/view/addListData
Add list-based post-processing data to the view with tag @code{tag}. List-based datasets are independent from any model and any mesh. @code{dataType} identifies the data by concatenating the field type ("S" for scalar, "V" for vector, "T" for tensor) and the element type ("P" for point, "L" for line, "T" for triangle, "S" for tetrahedron, "I" for prism, "H" for hexaHedron, "Y" for pyramid). For example @code{dataType} should be "ST" for a scalar field on triangles. @code{numEle} gives the number of elements in the data. @code{data} contains the data for the @code{numEle} elements, concatenated, with node coordinates followed by values per node, repeated for each step: [e1x1, ..., e1xn, e1y1, ..., e1yn, e1z1, ..., e1zn, e1v1..., e1vN, e2x1, ...].

@table @asis
@item Input:
@code{tag} (integer), @code{dataType} (string), @code{numEle} (integer), @code{data} (vector of doubles)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3564,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3175,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9526,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8451,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x3.cpp#L56,x3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x5.cpp#L81,x5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x3.py#L47,x3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x5.py#L69,x5.py}, @url{@value{GITLAB-PREFIX}/examples/api/normals.py#L42,normals.py}, @url{@value{GITLAB-PREFIX}/examples/api/view_adaptive_to_mesh.py#L42,view_adaptive_to_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/view_combine.py#L18,view_combine.py}, ...)
@end table

@item gmsh/view/getListData
Get list-based post-processing data from the view with tag @code{tag}. Return the types @code{dataTypes}, the number of elements @code{numElements} for each data type and the @code{data} for each data type. If @code{returnAdaptive} is set, return the data obtained after adaptive refinement, if available.

@table @asis
@item Input:
@code{tag} (integer), @code{returnAdaptive = False} (boolean)
@item Output:
@code{dataType} (vector of strings), @code{numElements} (vector of integers), @code{data} (vector of vectors of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3575,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3185,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9560,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8478,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/plugin.py#L35,plugin.py}, @url{@value{GITLAB-PREFIX}/examples/api/view_adaptive_to_mesh.py#L50,view_adaptive_to_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/volume.py#L19,volume.py})
@end table

@item gmsh/view/addListDataString
Add a string to a list-based post-processing view with tag @code{tag}. If @code{coord} contains 3 coordinates the string is positioned in the 3D model space ("3D string"); if it contains 2 coordinates it is positioned in the 2D graphics viewport ("2D string"). @code{data} contains one or more (for multistep views) strings. @code{style} contains key-value pairs of styling parameters, concatenated. Available keys are "Font" (possible values: "Times-Roman", "Times-Bold", "Times-Italic", "Times-BoldItalic", "Helvetica", "Helvetica-Bold", "Helvetica-Oblique", "Helvetica-BoldOblique", "Courier", "Courier-Bold", "Courier-Oblique", "Courier-BoldOblique", "Symbol", "ZapfDingbats", "Screen"), "FontSize" and "Align" (possible values: "Left" or "BottomLeft", "Center" or "BottomCenter", "Right" or "BottomRight", "TopLeft", "TopCenter", "TopRight", "CenterLeft", "CenterCenter", "CenterRight").

@table @asis
@item Input:
@code{tag} (integer), @code{coord} (vector of doubles), @code{data} (vector of strings), @code{style = []} (vector of strings)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3595,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3205,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9598,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8523,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t4.cpp#L115,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x3.cpp#L80,x3.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t4.py#L123,t4.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x3.py#L72,x3.py})
@end table

@item gmsh/view/getListDataStrings
Get list-based post-processing data strings (2D strings if @code{dim} == 2, 3D strings if @code{dim} = 3) from the view with tag @code{tag}. Return the coordinates in @code{coord}, the strings in @code{data} and the styles in @code{style}.

@table @asis
@item Input:
@code{tag} (integer), @code{dim} (integer)
@item Output:
@code{coord} (vector of doubles), @code{data} (vector of strings), @code{style} (vector of strings)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3605,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3214,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9637,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8549,Julia}
@end table

@item gmsh/view/setInterpolationMatrices
Set interpolation matrices for the element family @code{type} ("Line", "Triangle", "Quadrangle", "Tetrahedron", "Hexahedron", "Prism", "Pyramid") in the view @code{tag}. The approximation of the values over an element is written as a linear combination of @code{d} basis functions f_i(u, v, w) = sum_(j = 0, ..., @code{d} - 1) @code{coef}[i][j] u^@code{exp}[j][0] v^@code{exp}[j][1] w^@code{exp}[j][2], i = 0, ..., @code{d}-1, with u, v, w the coordinates in the reference element. The @code{coef} matrix (of size @code{d} x @code{d}) and the @code{exp} matrix (of size @code{d} x 3) are stored as vectors, by row. If @code{dGeo} is positive, use @code{coefGeo} and @code{expGeo} to define the interpolation of the x, y, z coordinates of the element in terms of the u, v, w coordinates, in exactly the same way. If @code{d} < 0, remove the interpolation matrices.

@table @asis
@item Input:
@code{tag} (integer), @code{type} (string), @code{d} (integer), @code{coef} (vector of doubles), @code{exp} (vector of doubles), @code{dGeo = 0} (integer), @code{coefGeo = []} (vector of doubles), @code{expGeo = []} (vector of doubles)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3624,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3232,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9674,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8594,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x3.cpp#L126,x3.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x3.py#L110,x3.py}, @url{@value{GITLAB-PREFIX}/examples/api/view_adaptive_to_mesh.py#L22,view_adaptive_to_mesh.py})
@end table

@item gmsh/view/addAlias
Add a post-processing view as an @code{alias} of the reference view with tag @code{refTag}. If @code{copyOptions} is set, copy the options of the reference view. If @code{tag} is positive use it (and remove the view with that tag if it already exists), otherwise associate a new tag. Return the view tag.

@table @asis
@item Input:
@code{refTag} (integer), @code{copyOptions = False} (boolean), @code{tag = -1} (integer)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3639,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3246,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9720,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8619,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/view_combine.py#L27,view_combine.py})
@end table

@item gmsh/view/combine
Combine elements (if @code{what} == "elements") or steps (if @code{what} == "steps") of all views (@code{how} == "all"), all visible views (@code{how} == "visible") or all views having the same name (@code{how} == "name"). Remove original views if @code{remove} is set.

@table @asis
@item Input:
@code{what} (string), @code{how} (string), @code{remove = True} (boolean), @code{copyOptions = True} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3649,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3255,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9748,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8643,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/view_combine.py#L23,view_combine.py})
@end table

@item gmsh/view/probe
Probe the view @code{tag} for its @code{values} at point (@code{x}, @code{y}, @code{z}). If no match is found, @code{value} is returned empty. Return only the value at step @code{step} is @code{step} is positive. Return only values with @code{numComp} if @code{numComp} is positive. Return the gradient of the @code{values} if @code{gradient} is set. If @code{distanceMax} is zero, only return a result if an exact match inside an element in the view is found; if @code{distanceMax} is positive and an exact match is not found, return the value at the closest node if it is closer than @code{distanceMax}; if @code{distanceMax} is negative and an exact match is not found, always return the value at the closest node. The distance to the match is returned in @code{distance}. Return the result from the element described by its coordinates if @code{xElementCoord}, @code{yElementCoord} and @code{zElementCoord} are provided. If @code{dim} is >= 0, return only matches from elements of the specified dimension.

@table @asis
@item Input:
@code{tag} (integer), @code{x} (double), @code{y} (double), @code{z} (double), @code{step = -1} (integer), @code{numComp = -1} (integer), @code{gradient = False} (boolean), @code{distanceMax = 0.} (double), @code{xElemCoord = []} (vector of doubles), @code{yElemCoord = []} (vector of doubles), @code{zElemCoord = []} (vector of doubles), @code{dim = -1} (integer)
@item Output:
@code{values} (vector of doubles), @code{distance} (double)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3669,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3274,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9774,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8686,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x3.cpp#L98,x3.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x3.py#L86,x3.py})
@end table

@item gmsh/view/write
Write the view to a file @code{fileName}. The export format is determined by the file extension. Append to the file if @code{append} is set.

@table @asis
@item Input:
@code{tag} (integer), @code{fileName} (string), @code{append = False} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3688,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3292,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9839,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8710,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/x3.cpp#L104,x3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x4.cpp#L88,x4.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/x3.py#L89,x3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x4.py#L81,x4.py}, @url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L92,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/normals.py#L43,normals.py}, @url{@value{GITLAB-PREFIX}/examples/api/plugin.py#L33,plugin.py}, ...)
@end table

@item gmsh/view/setVisibilityPerWindow
Set the global visibility of the view @code{tag} per window to @code{value}, where @code{windowIndex} identifies the window in the window list.

@table @asis
@item Input:
@code{tag} (integer), @code{value} (integer), @code{windowIndex = 0} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3696,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3299,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9861,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8730,Julia}
@end table

@end ftable

@node Namespace gmsh/view/option, Namespace gmsh/plugin, Namespace gmsh/view, Gmsh application programming interface
@section Namespace @code{gmsh/view/option}: view option handling functions

@ftable @code
@item gmsh/view/option/setNumber
Set the numerical option @code{name} to value @code{value} for the view with tag @code{tag}.

@table @asis
@item Input:
@code{tag} (integer), @code{name} (string), @code{value} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3706,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3306,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9890,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8759,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t8.cpp#L88,t8.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t9.cpp#L78,t9.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x3.cpp#L87,x3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x5.cpp#L82,x5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t8.py#L84,t8.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t9.py#L67,t9.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x3.py#L79,x3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x5.py#L70,x5.py}, @url{@value{GITLAB-PREFIX}/examples/api/view_adaptive_to_mesh.py#L45,view_adaptive_to_mesh.py})
@end table

@item gmsh/view/option/getNumber
Get the @code{value} of the numerical option @code{name} for the view with tag @code{tag}.

@table @asis
@item Input:
@code{tag} (integer), @code{name} (string)
@item Output:
@code{value} (double)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3714,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3312,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9913,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8781,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t8.cpp#L126,t8.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/x3.cpp#L90,x3.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t8.py#L126,t8.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x3.py#L81,x3.py})
@end table

@item gmsh/view/option/setString
Set the string option @code{name} to value @code{value} for the view with tag @code{tag}.

@table @asis
@item Input:
@code{tag} (integer), @code{name} (string), @code{value} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3721,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3318,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9939,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8802,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t4.cpp#L151,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t8.cpp#L100,t8.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t4.py#L161,t4.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t8.py#L96,t8.py})
@end table

@item gmsh/view/option/getString
Get the @code{value} of the string option @code{name} for the view with tag @code{tag}.

@table @asis
@item Input:
@code{tag} (integer), @code{name} (string)
@item Output:
@code{value} (string)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3728,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3324,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9961,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8824,Julia}
@end table

@item gmsh/view/option/setColor
Set the color option @code{name} to the RGBA value (@code{r}, @code{g}, @code{b}, @code{a}) for the view with tag @code{tag}, where where @code{r}, @code{g}, @code{b} and @code{a} should be integers between 0 and 255.

@table @asis
@item Input:
@code{tag} (integer), @code{name} (string), @code{r} (integer), @code{g} (integer), @code{b} (integer), @code{a = 255} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3737,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3332,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L9987,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8851,Julia}
@end table

@item gmsh/view/option/getColor
Get the @code{r}, @code{g}, @code{b}, @code{a} value of the color option @code{name} for the view with tag @code{tag}.

@table @asis
@item Input:
@code{tag} (integer), @code{name} (string)
@item Output:
@code{r} (integer), @code{g} (integer), @code{b} (integer), @code{a} (integer)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3748,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3342,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10017,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8877,Julia}
@end table

@item gmsh/view/option/copy
Copy the options from the view with tag @code{refTag} to the view with tag @code{tag}.

@table @asis
@item Input:
@code{refTag} (integer), @code{tag} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3759,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3352,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10057,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8900,Julia}
@end table

@end ftable

@node Namespace gmsh/plugin, Namespace gmsh/graphics, Namespace gmsh/view/option, Gmsh application programming interface
@section Namespace @code{gmsh/plugin}: plugin functions

@ftable @code
@item gmsh/plugin/setNumber
Set the numerical option @code{option} to the value @code{value} for plugin @code{name}. Plugins available in the official Gmsh release are listed in the @url{https://gmsh.info/doc/texinfo/gmsh.html#Gmsh-plugins,"Gmsh plugins" chapter of the Gmsh reference manual}.

@table @asis
@item Input:
@code{name} (string), @code{option} (string), @code{value} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3774,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3360,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10083,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8935,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t9.cpp#L46,t9.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L144,t21.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t9.py#L35,t9.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L131,t21.py}, @url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L103,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/crack3d.py#L29,crack3d.py}, @url{@value{GITLAB-PREFIX}/examples/api/crack.py#L33,crack.py}, ...)
@end table

@item gmsh/plugin/setString
Set the string option @code{option} to the value @code{value} for plugin @code{name}. Plugins available in the official Gmsh release are listed in the @url{https://gmsh.info/doc/texinfo/gmsh.html#Gmsh-plugins,"Gmsh plugins" chapter of the Gmsh reference manual}.

@table @asis
@item Input:
@code{name} (string), @code{option} (string), @code{value} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3784,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3369,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10108,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8958,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t9.cpp#L62,t9.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t9.py#L51,t9.py})
@end table

@item gmsh/plugin/run
Run the plugin @code{name}. Return the tag of the created view (if any). Plugins available in the official Gmsh release are listed in the @url{https://gmsh.info/doc/texinfo/gmsh.html#Gmsh-plugins,"Gmsh plugins" chapter of the Gmsh reference manual}.

@table @asis
@item Input:
@code{name} (string)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3794,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3378,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10133,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L8981,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t9.cpp#L48,t9.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L147,t21.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t9.py#L37,t9.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L134,t21.py}, @url{@value{GITLAB-PREFIX}/examples/api/adapt_mesh.py#L104,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/examples/api/crack3d.py#L32,crack3d.py}, @url{@value{GITLAB-PREFIX}/examples/api/crack.py#L36,crack.py}, ...)
@end table

@end ftable

@node Namespace gmsh/graphics, Namespace gmsh/fltk, Namespace gmsh/plugin, Gmsh application programming interface
@section Namespace @code{gmsh/graphics}: graphics functions

@ftable @code
@item gmsh/graphics/draw
Draw all the OpenGL scenes.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3803,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3382,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10162,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9006,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L129,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t8.cpp#L156,t8.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L129,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L192,t21.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L120,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t8.py#L154,t8.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L115,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L162,t21.py}, @url{@value{GITLAB-PREFIX}/examples/api/split_window.py#L44,split_window.py})
@end table

@end ftable

@node Namespace gmsh/fltk, Namespace gmsh/parser, Namespace gmsh/graphics, Gmsh application programming interface
@section Namespace @code{gmsh/fltk}: FLTK graphical user interface functions

@ftable @code
@item gmsh/fltk/initialize
Create the FLTK graphical user interface. Can only be called in the main thread.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3813,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3386,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10181,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9031,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L136,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t8.cpp#L71,t8.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L136,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L199,t21.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L124,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t8.py#L68,t8.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L119,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L166,t21.py}, @url{@value{GITLAB-PREFIX}/examples/api/custom_gui.py#L112,custom_gui.py}, ...)
@end table

@item gmsh/fltk/finalize
Close the FLTK graphical user interface. Can only be called in the main thread.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3819,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3390,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10195,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9045,Julia}
@end table

@item gmsh/fltk/wait
Wait at most @code{time} seconds for user interface events and return. If @code{time} < 0, wait indefinitely. First automatically create the user interface if it has not yet been initialized. Can only be called in the main thread.

@table @asis
@item Input:
@code{time = -1.} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3826,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3395,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10209,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9064,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L138,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L138,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L201,t21.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L126,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L121,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L168,t21.py}, @url{@value{GITLAB-PREFIX}/examples/api/custom_gui.py#L115,custom_gui.py}, @url{@value{GITLAB-PREFIX}/examples/api/prepro.py#L222,prepro.py}, ...)
@end table

@item gmsh/fltk/update
Update the user interface (potentially creating new widgets and windows). First automatically create the user interface if it has not yet been initialized. Can only be called in the main thread: use @code{awake("update")} to trigger an update of the user interface from another thread.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3834,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3402,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10228,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9081,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/custom_gui.py#L84,custom_gui.py}, @url{@value{GITLAB-PREFIX}/examples/api/prepro.py#L188,prepro.py})
@end table

@item gmsh/fltk/awake
Awake the main user interface thread and process pending events, and optionally perform an action (currently the only @code{action} allowed is "update"). 

@table @asis
@item Input:
@code{action = ""} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3841,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3407,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10244,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9099,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/custom_gui.py#L66,custom_gui.py})
@end table

@item gmsh/fltk/lock
Block the current thread until it can safely modify the user interface.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3846,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3411,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10263,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9113,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/custom_gui.py#L59,custom_gui.py})
@end table

@item gmsh/fltk/unlock
Release the lock that was set using lock.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3851,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3414,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10276,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9127,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/custom_gui.py#L61,custom_gui.py})
@end table

@item gmsh/fltk/run
Run the event loop of the graphical user interface, i.e. repeatedly call @code{wait()}. First automatically create the user interface if it has not yet been initialized. Can only be called in the main thread.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3858,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3419,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10289,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9143,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t1.cpp#L150,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t2.cpp#L168,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t4.cpp#L171,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t5.cpp#L229,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t6.cpp#L105,t6.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t1.py#L149,t1.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t2.py#L161,t2.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t4.py#L180,t4.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t5.py#L223,t5.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t6.py#L105,t6.py}, ...)
@end table

@item gmsh/fltk/isAvailable
Check if the user interface is available (e.g. to detect if it has been closed).

@table @asis
@item Input:
-
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3864,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3423,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10304,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9159,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L137,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L137,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L200,t21.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L125,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L120,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L167,t21.py}, @url{@value{GITLAB-PREFIX}/examples/api/custom_gui.py#L114,custom_gui.py}, @url{@value{GITLAB-PREFIX}/examples/api/prepro.py#L208,prepro.py}, ...)
@end table

@item gmsh/fltk/selectEntities
Select entities in the user interface. Return the selected entities as a vector of (dim, tag) pairs. If @code{dim} is >= 0, return only the entities of the specified dimension (e.g. points if @code{dim} == 0).

@table @asis
@item Input:
@code{dim = -1} (integer)
@item Output:
@code{dimTags} (vector of pairs of integers)
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3871,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3428,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10322,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9182,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/prepro.py#L204,prepro.py})
@end table

@item gmsh/fltk/selectElements
Select elements in the user interface.

@table @asis
@item Input:
-
@item Output:
@code{elementTags} (vector of sizes)
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3877,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3433,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10350,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9206,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/select_elements.py#L14,select_elements.py})
@end table

@item gmsh/fltk/selectViews
Select views in the user interface.

@table @asis
@item Input:
-
@item Output:
@code{viewTags} (vector of integers)
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3882,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3437,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10374,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9229,Julia}
@end table

@item gmsh/fltk/splitCurrentWindow
Split the current window horizontally (if @code{how} == "h") or vertically (if @code{how} == "v"), using ratio @code{ratio}. If @code{how} == "u", restore a single window.

@table @asis
@item Input:
@code{how = "v"} (string), @code{ratio = 0.5} (double)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3889,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3443,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10398,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9252,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/split_window.py#L21,split_window.py})
@end table

@item gmsh/fltk/setCurrentWindow
Set the current window by speficying its index (starting at 0) in the list of all windows. When new windows are created by splits, new windows are appended at the end of the list.

@table @asis
@item Input:
@code{windowIndex = 0} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3897,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3450,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10420,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9272,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/split_window.py#L36,split_window.py})
@end table

@item gmsh/fltk/setStatusMessage
Set a status message in the current window. If @code{graphics} is set, display the message inside the graphic window instead of the status bar.

@table @asis
@item Input:
@code{message} (string), @code{graphics = False} (boolean)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3903,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3455,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10440,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9292,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/prepro.py#L201,prepro.py}, @url{@value{GITLAB-PREFIX}/examples/api/select_elements.py#L13,select_elements.py})
@end table

@item gmsh/fltk/showContextWindow
Show context window for the entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim} (integer), @code{tag} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3909,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3460,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10461,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9311,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/prepro.py#L210,prepro.py})
@end table

@item gmsh/fltk/openTreeItem
Open the @code{name} item in the menu tree.

@table @asis
@item Input:
@code{name} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3915,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3465,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10481,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9329,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/prepro.py#L220,prepro.py})
@end table

@item gmsh/fltk/closeTreeItem
Close the @code{name} item in the menu tree.

@table @asis
@item Input:
@code{name} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3920,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3469,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10499,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9347,Julia}
@end table

@end ftable

@node Namespace gmsh/parser, Namespace gmsh/onelab, Namespace gmsh/fltk, Gmsh application programming interface
@section Namespace @code{gmsh/parser}: parser functions

@ftable @code
@item gmsh/parser/getNames
Get the names of the variables in the Gmsh parser matching the @code{search} regular expression. If @code{search} is empty, return all the names.

@table @asis
@item Input:
@code{search = ""} (string)
@item Output:
@code{names} (vector of strings)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3930,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3474,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10523,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9380,Julia}
@end table

@item gmsh/parser/setNumber
Set the value of the number variable @code{name} in the Gmsh parser. Create the variable if it does not exist; update the value if the variable exists.

@table @asis
@item Input:
@code{name} (string), @code{value} (vector of doubles)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3937,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3480,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10548,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9404,Julia}
@end table

@item gmsh/parser/setString
Set the value of the string variable @code{name} in the Gmsh parser. Create the variable if it does not exist; update the value if the variable exists.

@table @asis
@item Input:
@code{name} (string), @code{value} (vector of strings)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3944,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3486,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10570,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9424,Julia}
@end table

@item gmsh/parser/getNumber
Get the value of the number variable @code{name} from the Gmsh parser. Return an empty vector if the variable does not exist.

@table @asis
@item Input:
@code{name} (string)
@item Output:
@code{value} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3951,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3492,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10592,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9446,Julia}
@end table

@item gmsh/parser/getString
Get the value of the string variable @code{name} from the Gmsh parser. Return an empty vector if the variable does not exist.

@table @asis
@item Input:
@code{name} (string)
@item Output:
@code{value} (vector of strings)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3958,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3498,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10617,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9471,Julia}
@end table

@item gmsh/parser/clear
Clear all the Gmsh parser variables, or remove a single variable if @code{name} is given.

@table @asis
@item Input:
@code{name = ""} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3965,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3504,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10642,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9494,Julia}
@end table

@item gmsh/parser/parse
Parse the file @code{fileName} with the Gmsh parser.

@table @asis
@item Input:
@code{fileName} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3970,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3508,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10660,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9511,Julia}
@end table

@end ftable

@node Namespace gmsh/onelab, Namespace gmsh/logger, Namespace gmsh/parser, Gmsh application programming interface
@section Namespace @code{gmsh/onelab}: ONELAB server functions

@ftable @code
@item gmsh/onelab/set
Set one or more parameters in the ONELAB database, encoded in @code{format}.

@table @asis
@item Input:
@code{data} (string), @code{format = "json"} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3979,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3512,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10683,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9540,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L106,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L95,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L57,t21.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L99,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L82,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L45,t21.py}, @url{@value{GITLAB-PREFIX}/examples/api/custom_gui.py#L33,custom_gui.py}, @url{@value{GITLAB-PREFIX}/examples/api/onelab_test.py#L9,onelab_test.py}, ...)
@end table

@item gmsh/onelab/get
Get all the parameters (or a single one if @code{name} is specified) from the ONELAB database, encoded in @code{format}.

@table @asis
@item Input:
@code{name = ""} (string), @code{format = "json"} (string)
@item Output:
@code{data} (string)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3986,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3518,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10702,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9562,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/onelab_run_auto.py#L28,onelab_run_auto.py}, @url{@value{GITLAB-PREFIX}/examples/api/onelab_test.py#L35,onelab_test.py}, @url{@value{GITLAB-PREFIX}/examples/api/prepro.py#L170,prepro.py})
@end table

@item gmsh/onelab/getNames
Get the names of the parameters in the ONELAB database matching the @code{search} regular expression. If @code{search} is empty, return all the names.

@table @asis
@item Input:
@code{search = ""} (string)
@item Output:
@code{names} (vector of strings)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3994,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3525,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10728,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9585,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/prepro.py#L172,prepro.py})
@end table

@item gmsh/onelab/setNumber
Set the value of the number parameter @code{name} in the ONELAB database. Create the parameter if it does not exist; update the value if the parameter exists.

@table @asis
@item Input:
@code{name} (string), @code{value} (vector of doubles)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L4002,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3532,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10753,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9609,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/custom_gui.py#L67,custom_gui.py}, @url{@value{GITLAB-PREFIX}/examples/api/onelab_run.py#L18,onelab_run.py}, @url{@value{GITLAB-PREFIX}/examples/api/onelab_test.py#L40,onelab_test.py})
@end table

@item gmsh/onelab/setString
Set the value of the string parameter @code{name} in the ONELAB database. Create the parameter if it does not exist; update the value if the parameter exists.

@table @asis
@item Input:
@code{name} (string), @code{value} (vector of strings)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L4010,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3539,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10776,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9629,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L127,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L127,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L190,t21.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L118,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L113,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L160,t21.py}, @url{@value{GITLAB-PREFIX}/examples/api/custom_gui.py#L56,custom_gui.py}, @url{@value{GITLAB-PREFIX}/examples/api/onelab_test.py#L41,onelab_test.py}, ...)
@end table

@item gmsh/onelab/getNumber
Get the value of the number parameter @code{name} from the ONELAB database. Return an empty vector if the parameter does not exist.

@table @asis
@item Input:
@code{name} (string)
@item Output:
@code{value} (vector of doubles)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L4017,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3545,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10799,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9651,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L69,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L37,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L109,t21.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L64,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L29,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L95,t21.py}, @url{@value{GITLAB-PREFIX}/examples/api/custom_gui.py#L41,custom_gui.py}, @url{@value{GITLAB-PREFIX}/examples/api/prepro.py#L174,prepro.py}, ...)
@end table

@item gmsh/onelab/getString
Get the value of the string parameter @code{name} from the ONELAB database. Return an empty vector if the parameter does not exist.

@table @asis
@item Input:
@code{name} (string)
@item Output:
@code{value} (vector of strings)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L4024,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3551,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10824,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9676,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t3.cpp#L125,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L125,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t21.cpp#L188,t21.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t3.py#L116,t3.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t13.py#L111,t13.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t21.py#L158,t21.py}, @url{@value{GITLAB-PREFIX}/examples/api/custom_gui.py#L75,custom_gui.py}, @url{@value{GITLAB-PREFIX}/examples/api/prepro.py#L178,prepro.py}, ...)
@end table

@item gmsh/onelab/getChanged
Check if any parameters in the ONELAB database used by the client @code{name} have been changed.

@table @asis
@item Input:
@code{name} (string)
@item Output:
-
@item Return:
integer
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L4031,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3557,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10849,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9701,Julia}
@end table

@item gmsh/onelab/setChanged
Set the changed flag to value @code{value} for all the parameters in the ONELAB database used by the client @code{name}.

@table @asis
@item Input:
@code{name} (string), @code{value} (integer)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L4037,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3562,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10871,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9721,Julia}
@end table

@item gmsh/onelab/clear
Clear the ONELAB database, or remove a single parameter if @code{name} is given.

@table @asis
@item Input:
@code{name = ""} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L4043,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3567,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10892,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9739,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/onelab_test.py#L44,onelab_test.py})
@end table

@item gmsh/onelab/run
Run a ONELAB client. If @code{name} is provided, create a new ONELAB client with name @code{name} and executes @code{command}. If not, try to run a client that might be linked to the processed input files.

@table @asis
@item Input:
@code{name = ""} (string), @code{command = ""} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L4050,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3573,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10909,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9759,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/onelab_run.py#L24,onelab_run.py}, @url{@value{GITLAB-PREFIX}/examples/api/onelab_run_auto.py#L26,onelab_run_auto.py})
@end table

@end ftable

@node Namespace gmsh/logger, , Namespace gmsh/onelab, Gmsh application programming interface
@section Namespace @code{gmsh/logger}: information logging functions

@ftable @code
@item gmsh/logger/write
Write a @code{message}. @code{level} can be "info", "warning" or "error".

@table @asis
@item Input:
@code{message} (string), @code{level = "info"} (string)
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L4060,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3578,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10936,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9788,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t7.cpp#L23,t7.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t8.cpp#L41,t8.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t9.cpp#L31,t9.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t13.cpp#L26,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorials/c++/t16.cpp#L34,t16.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t8.py#L79,t8.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/t9.py#L29,t9.py}, @url{@value{GITLAB-PREFIX}/tutorials/python/x5.py#L91,x5.py}, @url{@value{GITLAB-PREFIX}/examples/api/custom_gui.py#L60,custom_gui.py}, @url{@value{GITLAB-PREFIX}/examples/api/terrain_stl.py#L26,terrain_stl.py})
@end table

@item gmsh/logger/start
Start logging messages.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L4066,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3583,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10955,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9802,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t16.cpp#L27,t16.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t16.py#L25,t16.py})
@end table

@item gmsh/logger/get
Get logged messages.

@table @asis
@item Input:
-
@item Output:
@code{log} (vector of strings)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L4071,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3586,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10968,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9821,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t16.cpp#L137,t16.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t16.py#L118,t16.py})
@end table

@item gmsh/logger/stop
Stop logging messages.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L4076,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3590,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L10989,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9839,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorials/c++/t16.cpp#L139,t16.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorials/python/t16.py#L120,t16.py})
@end table

@item gmsh/logger/getWallTime
Return wall clock time.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
double
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L4081,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3593,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L11002,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9855,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/examples/api/import_perf.py#L8,import_perf.py})
@end table

@item gmsh/logger/getCpuTime
Return CPU time.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
double
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L4086,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3596,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L11020,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9872,Julia}
@end table

@item gmsh/logger/getLastError
Return last error message, if any.

@table @asis
@item Input:
-
@item Output:
@code{error} (string)
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L4091,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L3599,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L11038,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L9892,Julia}
@end table

@end ftable

